using CKBS.AppContext;
using CKBS.Models.Services.Administrator.Inventory;
using CKBS.Models.Services.Inventory;
using CKBS.Models.Services.POS.service;
using CKBS.Models.Services.Production;
using System;
using System.Collections.Generic;
using System.Linq;
using CKBS.Models.Services.Financials;
using CKBS.Models.Services.Administrator.SystemInitialization;
using CKBS.Models.Services.ChartOfAccounts;
using CKBS.Models.Services.Banking;
using KEDI.Core.Premise.Models.ServicesClass.TaxGroup;
using KEDI.Core.Premise.Models.ServicesClass.Sale;
using Microsoft.AspNetCore.Mvc.Rendering;
using CKBS.Models.ServicesClass.GoodsIssue;
using CKBS.Models.Services.Inventory.PriceList;
using SetGlAccount = CKBS.Models.Services.Inventory.SetGlAccount;
using Type = CKBS.Models.Services.Financials.Type;
using KEDI.Core.Premise.Models.Services.Banking;
using KEDI.Core.Premise.Models.Sale;
using SaleOrderViewModel = KEDI.Core.Premise.Models.ServicesClass.Sale.SaleOrderViewModel;
using HumanResourcesEmployee = CKBS.Models.Services.HumanResources.Employee;
using KEDI.Core.Premise.Models.Services.Administrator.SetUp;
using CKBS.Models.Services.Administrator.Setup;
using KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales;
using KEDI.Core.Premise.Models.Services.Administrator.Inventory;
using KEDI.Core.Premise.Repository;
using CKBS.Models.Services.HumanResources;
using System.Threading.Tasks;
using KEDI.Core.Premise.Models.ProjectCostAnalysis.Classtore;
using KEDI.Core.Premise.Models.ProjectCostAnalysis;
using KEDI.Core.Premise.Models.Services.ServiceContractTemplate;
using Microsoft.EntityFrameworkCore;
using CKBS.Models.ReportClass;
using KEDI.Core.Helpers.Enumerations;
using KEDI.Core.Premise.Models.Partners;

namespace KEDI.Core.Premise.Models.Services.Responsitory
{
    //------------------------------------------------// start Interface Sale //--------------
    public interface ISale
    {
        void IssuseInStockSaleAREdit(int orderid, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches);
        void IssuseInStockSaleAREditOld(SaleAREdite saleAR, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches);
        Task<List<AttachmentFileOfContractTemplate>> GetAttachmentAsync(int id, string key);
        List<AttchmentFile> CreateDefaultRowAttachmet(int num, int number);
        List<ReportPurchaseAP> GetSaleAPEdits(int branchID, int warehouseID, string postingDate, string documentDate, string deliveryDate, string search, bool check);
        List<AttachmentFileOfContractTemplate> CreateDefaultRowAttachmetDetailOfContractTemplate(int num, int number);
        IEnumerable<ServiceItemSales> GetItemMaster(int PLID, int wareId, int comId);
        IEnumerable<SaleQuoteDetailViewModel> GetItemDetails(int PLID, int comId, int itemId, string barCode, int uomId);
        SaleCreditMemoDetailViewModel GetItemDetailsForSaleCM(int PLID, int comId, int itemId, string barCode, int uomId, int wareId, string process);
        IEnumerable<GroupDUoM> GetAllGroupDefind();
        IEnumerable<dynamic> GetSaleQuotesCopy(int cusId);
        IEnumerable<dynamic> GetSaleOrdersCopy(int cusId);
        IEnumerable<dynamic> GetARReserveInvoiceCopy(int cusId);
        IEnumerable<dynamic> GetSaleDeliverysCopy(int cusId);
        IEnumerable<dynamic> GetSaleARsCopy(int cusId);
        IEnumerable<dynamic> GetSaleARDownPMCopy(int cusId);
        IEnumerable<dynamic> GetSaleAREditCopy(int cusId);
        IEnumerable<SaleARDPINCN> ARDownPaymentINCN(int curId, string status, int arid = 0);
        IEnumerable<dynamic> GetARReserveInvoicEDTeCopy(int cusId);
        // ARReserveInvoiceUpdateViewModel GetARReserveInvoiceEDTDetailCopy(string number, int seriesId, int comId);
        FreightSaleView GetFreights();
        SaleQuoteUpdateViewModel GetSaleQuoteDetailCopy(string number, int seriesId, int comId);
        SaleOrderUpdateViewModel GetSaleOrderDetailCopy(string number, int seriesId, int comId);
        ARReserveInvoiceUpdateViewModel GetARReserveInvoiceEDTDetailCopy(string number, int seriesId, int comId, bool memo = false);
        ARReserveInvoiceUpdateViewModel GetARReserveInvoiceDetailDetailCopy(string number, int seriesId, int comId);
        //==========item master data==========
        SaleARUpdateViewModel GetItemMasterDataDetailCopy(string number, int seriesId, int comId);
        //===========end item master data======
        SaleQuoteUpdateViewModel FindSaleQuote(string number, int seriesId, int comId);
        SaleARDownUpdateViewModel FindSaleARDown(string number, int seriesId, int comId, bool fromCN = false);
        SaleOrderUpdateViewModel FindSaleOrder(string number, int seriesId, int comId);
        SaleARUpdateViewModel FindSaleAREdit(string number, int seriesId, int comId);
        SaleDeliveryUpdateViewModel FindSaleDelivery(string number, int seriesId, int comId);

        ReturnDeliveryUpdateViewModel FindReturnDelivery(string number, int seriesId, int comId);
        SaleARUpdateViewModel FindSaleAR(string number, int seriesId, int comId);

        ARReserveInvoiceUpdateViewModel FindARReserveInvoice(string number, int seriesId, int comId);
        Task<ServiceContractUpdateViewModel> FinddraftServiceContract(int Draftid, int comId);
        ServiceContractUpdateViewModel FindServiceContract(DateTime contract_edate, DateTime contract_sdate, int cus_id, string contract_no, DateTime renewal_date, DateTime post_date, string number, int seriesId, int comId);
        SaleCreditMemoUpdateViewModel FindSaleCreditMemo(string number, int seriesId, int comId);
        SaleDeliveryUpdateViewModel GetSaleDeliveryDetailCopy(string number, int seriesId, int comId);
        SaleARUpdateViewModel GetSaleARsDetailCopy(string number, int seriesId, int comId);
        SaleARDownUpdateViewModel GetSaleARDownPMDetailCopy(string number, int seriesId, int comId, bool fromCN = false);
        SaleARUpdateViewModel GetSaleAREditDetailCopy(string number, int seriesId, int comId);

        void IssuseInStockMaterialDelivery(int orderid, List<SerialNumber> serials, List<BatchNo> batches);
        void IssuseInStockARReserveInvocklDelivery(int orderid, List<SerialNumber> serials, List<BatchNo> batches);
        //void IssuseInStockMaterialSaleAR(int orderid);
        void IssuseInStockSaleAR(int orderid, string type, List<SaleARDPINCN> ards,
            SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches);
        void IssuseInStockSaleARBasic(int orderid, string type, List<SaleARDPINCN> ards,
                  SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches);

        void IssuseInStockARReserveInvoiceEDT(ARReserveInvoiceEditable arrEDT, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter);
        void CancelARReserveInvoiceEDT(ARReserveInvoiceEditable arrEDT);
        void IssuseInStockARReserveInvoiceEDTOld(ARReserveInvoiceEditable arrEDT, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter);
        void IssuseInStockARReserveInvoice(int orderid, string type, List<SaleARDPINCN> ards,
         SaleGLAccountDetermination saleGlDeter, FreightSale freight);
        void IssuseInStockServiceContract(int orderid, string type, List<SaleARDPINCN> ards,
       SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches);
        void ReturnDeliveryStock(int id, List<SerialNumber> serials, List<BatchNo> batches);
        void IssueARDownPayment(ARDownPayment ard, SaleGLAccountDetermination saleGlDeter);
        void CreateIncomingPaymentCustomerByARDownPayment(ARDownPayment ard, SystemCurrency syscur);
        void IssuseCancelSaleAr(SaleAR saleAr, List<SerialNumber> serials, List<BatchNo> batches, SaleGLAccountDetermination saleGlDeter);
        void IssuseCancelSaleArEdit(SaleAREdite saleAredit, List<SerialNumber> serials, List<BatchNo> batches, SaleGLAccountDetermination saleGlDeter);
        SaleQuoteUpdateViewModel FindProjectCostAnalysis(string number, int seriesId, int comId);
        public SaleARUpdateViewModel FindItemMasterData(string number, int seriesId, int comId);
        Task<List<ProjeccostStory>> GetStoryProjcostAsyce();
        DraftARUpdateViewModel FindDraftAsync(string draftname, int draftARId, int comId);
        Task<int> RemoveDraft(int id);
        DraftARUpdateViewModel FindDraftSaleDeliveryAsync(string draftname, int draftARId, int comId);
        DraftARUpdateViewModel FindDraftReserveAsync(string draftname, int draftARId, int comId);
        DraftARUpdateViewModel FindDraftReserveEDTAsync(string draftname, int draftARId, int comId);
        ARReserveInvoiceUpdateViewModel FindARReserveInvoiceEDT(string number, int seriesId, int comId);
        bool CreateIncomingPaymentCustomerByARReserveInvoiceEDTAsync(ARReserveInvoiceEditable aRReserveInvoice);
        void UpdateSourceARReserveInvoiceEDT(int baseonid, List<SaleDeliveryDetail> list);
        void IssuseInStockARREDT(ARReserveInvoiceEditable aRReserveInvoice, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter);
        void SaveHistoryARREDT(ARReserveInvoiceEditable aRReserveInvoice, List<ARReserveEditableDetailHistory> arrdttH);

    }
    //----------------------------------------------// end Interface sale // ----------------

    //--------------------------------------------- // Start Responsitory // ---------------
    public class SaleRepository : ISale
    {
        private readonly DataContext _context;
        private readonly IDataPropertyRepository _dataProp;
        private readonly UtilityModule _utility;
        private readonly UserManager _userModule;
        public SaleRepository(DataContext context, UserManager userModule, IDataPropertyRepository dataProperty, UtilityModule utility)
        {
            _context = context;
            _dataProp = dataProperty;
            _utility = utility;
            _userModule = userModule;
        }
        //find Draft Delivery

        public DraftARUpdateViewModel FindDraftSaleDeliveryAsync(string draftname, int draftARId, int comId)
        {
            #region 
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var draftAR = (from df in _context.DraftDeliveries.Where(s => s.Name == draftname && s.ID == draftARId && s.CompanyID == comId)
                           join docType in _context.DocumentTypes on df.DocTypeID equals docType.ID
                           let sem = _context.Employees.FirstOrDefault(i => df.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                           let fs = _context.FreightSales.Where(i => i.SaleID == df.ID && i.SaleType == SaleCopyType.Draftdelivery).FirstOrDefault() ?? new FreightSale()
                           let request = _context.Employees.Where(i => i.ID == df.RequestedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let receive = _context.Employees.Where(i => i.ID == df.ReceivedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let ship = _context.Employees.Where(i => i.ID == df.ShippedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           select new DraftARViewModel
                           {
                               BasedCopyKeys = df.BasedCopyKeys,
                               ReceivedBy = df.ReceivedBy,
                               RequestedBy = df.RequestedBy,
                               ShippedBy = df.ShippedBy,

                               ReceivedByName = receive.Name,
                               RequestedByName = request.Name,
                               ShippedByName = ship.Name,
                               Name = df.Name,
                               BasedOn = df.BaseOnID,
                               CopyKey = df.CopyKey,
                               BranchID = df.BranchID,
                               ChangeLog = df.ChangeLog,
                               CompanyID = df.CompanyID,
                               CusID = df.CusID,
                               DeliveryDate = df.DueDate,
                               DueDate = df.DueDate,
                               DisRate = (decimal)df.DisRate,
                               DisValue = (decimal)df.DisValue,
                               DocTypeID = df.DocTypeID,
                               DocumentDate = df.DocumentDate,
                               ExchangeRate = (decimal)df.ExchangeRate,
                               FreightAmount = df.FreightAmount,
                               FreightAmountSys = df.FreightAmountSys,

                               SaleEmID = df.SaleEmID,
                               SaleEmName = sem.Name ?? "",
                               FreightSalesView = new FreightSaleView
                               {
                                   AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                   SaleID = df.ID,
                                   ID = fs.ID,
                                   SaleType = fs.SaleType,
                                   TaxSumValue = fs.TaxSumValue,
                                   FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                  select new FreightSaleDetailViewModel
                                                                  {
                                                                      ID = fsd.ID,
                                                                      FreightSaleID = fsd.FreightSaleID,
                                                                      Amount = fsd.Amount,
                                                                      AmountWithTax = fsd.AmountWithTax,
                                                                      FreightID = fsd.FreightID,
                                                                      Name = fsd.Name,
                                                                      TaxGroup = fsd.TaxGroup,
                                                                      TaxGroupID = fsd.TaxGroupID,
                                                                      TaxGroups = GetTaxGroups(),
                                                                      TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                      {
                                                                          Value = i.ID.ToString(),
                                                                          Selected = fsd.TaxGroupID == i.ID,
                                                                          Text = $"{i.Code}-{i.Name}"
                                                                      }).ToList(),
                                                                      TaxRate = fsd.TaxRate,
                                                                      TotalTaxAmount = fsd.TotalTaxAmount
                                                                  }).ToList(),
                               },
                               IncludeVat = df.IncludeVat,
                               InvoiceNo = $"{docType.Code}-{df.InvoiceNumber}",
                               InvoiceNumber = df.InvoiceNumber,
                               LocalCurID = df.LocalCurID,
                               LocalSetRate = (decimal)df.LocalSetRate,
                               PostingDate = df.PostingDate,
                               PriceListID = df.PriceListID,
                               RefNo = df.RefNo,
                               Remarks = df.Remarks,
                               SaleCurrencyID = df.SaleCurrencyID,
                               SeriesDID = df.SeriesDID,
                               SeriesID = df.SeriesID,
                               DraftID = df.ID,
                               Status = df.Status,
                               SubTotal = (decimal)df.SubTotal,
                               SubTotalAfterDis = df.SubTotalAfterDis,
                               SubTotalAfterDisSys = df.SubTotalAfterDisSys,
                               SubTotalBefDis = df.SubTotalBefDis,
                               SubTotalBefDisSys = df.SubTotalBefDisSys,
                               SubTotalSys = (decimal)df.SubTotalSys,
                               TotalAmount = (decimal)df.TotalAmount,
                               TotalAmountSys = (decimal)df.TotalAmountSys,
                               TypeDis = df.TypeDis,
                               UserID = df.UserID,
                               VatRate = (decimal)df.VatRate,
                               VatValue = (decimal)df.VatValue,
                               WarehouseID = df.WarehouseID,
                           }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _df = (from df in draftAR
                       join dfd in _context.DraftDeliveryDetails on df.DraftID equals dfd.DraftDeliveryID
                       join item in _context.ItemMasterDatas on dfd.ItemID equals item.ID
                       join cur in _context.Currency on df.SaleCurrencyID equals cur.ID

                       select new DraftARDetailViewModel
                       {
                           //LineID = DateTime.Now.Ticks.ToString(),
                           LineID = dfd.ID,
                           FinDisRate = dfd.FinDisRate,
                           FinDisValue = dfd.FinDisValue,
                           FinTotalValue = dfd.FinTotalValue,
                           TaxOfFinDisValue = dfd.TaxOfFinDisValue,
                           ItemCode = dfd.ItemCode,
                           BarCode = item.Barcode,
                           Currency = cur.Description,
                           TotalSys = (decimal)dfd.TotalSys,
                           DraftDetailID = dfd.ID,
                           DraftID = df.DraftID,
                           Cost = (decimal)dfd.Cost,
                           CurrencyID = cur.ID,
                           DisRate = (decimal)dfd.DisRate,
                           DisValue = (decimal)dfd.DisValue,
                           ItemNameEN = item.EnglishName,
                           ItemNameKH = item.KhmerName,
                           GUomID = item.GroupUomID,
                           ItemID = item.ID,
                           ItemType = item.Type,
                           Process = item.Process,
                           Qty = (decimal)dfd.Qty,
                           Factor = (decimal)dfd.Factor,
                           OpenQty = (decimal)dfd.OpenQty,
                           UnitPrice = (decimal)dfd.UnitPrice,
                           UomName = dfd.UomName,
                           UomID = dfd.UomID,
                           TaxGroupID = dfd.TaxGroupID,
                           TaxRate = dfd.TaxRate,
                           Remarks = dfd.Remarks,
                           TaxGroupList = tgs.Select(c => new SelectListItem
                           {
                               Value = c.ID.ToString(),
                               Text = $"{c.Code}-{c.Name}",
                               Selected = c.ID == dfd.TaxGroupID
                           }).ToList(),
                           TotalWTax = (decimal)dfd.TotalWTax,
                           TaxValue = dfd.TaxValue,
                           Total = (decimal)dfd.Total,
                           /// select List UoM ///
                           UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                   join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                   select new UOMSViewModel
                                   {
                                       BaseUoMID = GDU.BaseUOM,
                                       Factor = GDU.Factor,
                                       ID = UNM.ID,
                                       Name = UNM.Name
                                   }).Select(c => new SelectListItem
                                   {
                                       Value = c.ID.ToString(),
                                       Text = c.Name,
                                       Selected = c.ID == dfd.UomID
                                   }).ToList(),
                           UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                       join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                       select new UOMSViewModel
                                       {
                                           BaseUoMID = GDU.BaseUOM,
                                           Factor = GDU.Factor,
                                           ID = UNM.ID,
                                           Name = UNM.Name
                                       }).ToList(),
                           TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                        let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                        select new TaxGroupViewModel
                                        {
                                            ID = t.ID,
                                            //GLID = tg.GLID,
                                            Name = t.Name,
                                            Code = t.Code,
                                            Effectivefrom = tgds.EffectiveFrom,
                                            Rate = tgds.Rate,
                                            Type = (int)t.Type,
                                        }
                                         ).ToList(),
                           UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == df.PriceListID)
                                            select new UomPriceList
                                            {
                                                UoMID = (int)pld.UomID,
                                                UnitPrice = (decimal)pld.UnitPrice
                                            }
                                             ).ToList(),
                       }).ToList();
            _dataProp.DataProperty(_df, comId, "ItemID", "AddictionProps");

            var data = new DraftARUpdateViewModel
            {
                SaleDraft = draftAR.FirstOrDefault(),
                DraftARDetail = _df,
            };
            return data;
        }


        public DraftARUpdateViewModel FindDraftReserveAsync(string draftname, int draftARId, int comId)
        {
            #region 
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var draftAR = (from df in _context.DraftReserveInvoices.Where(s => s.Name == draftname && s.ID == draftARId && s.CompanyID == comId)
                           join docType in _context.DocumentTypes on df.DocTypeID equals docType.ID
                           let sem = _context.Employees.FirstOrDefault(i => df.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                           let fs = _context.FreightSales.Where(i => i.SaleID == df.ID && i.SaleType == SaleCopyType.DraftReserve).FirstOrDefault() ?? new FreightSale()
                           let request = _context.Employees.Where(i => i.ID == df.RequestedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let receive = _context.Employees.Where(i => i.ID == df.ReceivedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let ship = _context.Employees.Where(i => i.ID == df.ShippedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           select new DraftARViewModel
                           {
                               BasedCopyKeys = df.BasedCopyKeys,
                               ReceivedBy = df.ReceivedBy,
                               RequestedBy = df.RequestedBy,
                               ShippedBy = df.ShippedBy,

                               ReceivedByName = receive.Name,
                               RequestedByName = request.Name,
                               ShippedByName = ship.Name,
                               Name = df.Name,
                               BasedOn = df.BaseOnID,
                               CopyKey = df.CopyKey,
                               BranchID = df.BranchID,
                               ChangeLog = df.ChangeLog,
                               CompanyID = df.CompanyID,
                               CusID = df.CusID,
                               DeliveryDate = df.DueDate,
                               DueDate = df.DueDate,
                               DisRate = (decimal)df.DisRate,
                               DisValue = (decimal)df.DisValue,
                               DocTypeID = df.DocTypeID,
                               DocumentDate = df.DocumentDate,
                               ExchangeRate = (decimal)df.ExchangeRate,
                               FreightAmount = df.FreightAmount,
                               FreightAmountSys = df.FreightAmountSys,

                               SaleEmID = df.SaleEmID,
                               SaleEmName = sem.Name ?? "",
                               FreightSalesView = new FreightSaleView
                               {
                                   AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                   SaleID = df.ID,
                                   ID = fs.ID,
                                   SaleType = fs.SaleType,
                                   TaxSumValue = fs.TaxSumValue,
                                   FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                  select new FreightSaleDetailViewModel
                                                                  {
                                                                      ID = fsd.ID,
                                                                      FreightSaleID = fsd.FreightSaleID,
                                                                      Amount = fsd.Amount,
                                                                      AmountWithTax = fsd.AmountWithTax,
                                                                      FreightID = fsd.FreightID,
                                                                      Name = fsd.Name,
                                                                      TaxGroup = fsd.TaxGroup,
                                                                      TaxGroupID = fsd.TaxGroupID,
                                                                      TaxGroups = GetTaxGroups(),
                                                                      TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                      {
                                                                          Value = i.ID.ToString(),
                                                                          Selected = fsd.TaxGroupID == i.ID,
                                                                          Text = $"{i.Code}-{i.Name}"
                                                                      }).ToList(),
                                                                      TaxRate = fsd.TaxRate,
                                                                      TotalTaxAmount = fsd.TotalTaxAmount
                                                                  }).ToList(),
                               },
                               IncludeVat = df.IncludeVat,
                               InvoiceNo = $"{docType.Code}-{df.InvoiceNumber}",
                               InvoiceNumber = df.InvoiceNumber,
                               LocalCurID = df.LocalCurID,
                               LocalSetRate = (decimal)df.LocalSetRate,
                               PostingDate = df.PostingDate,
                               PriceListID = df.PriceListID,
                               RefNo = df.RefNo,
                               Remarks = df.Remarks,
                               SaleCurrencyID = df.SaleCurrencyID,
                               SeriesDID = df.SeriesDID,
                               SeriesID = df.SeriesID,
                               DraftID = df.ID,
                               Status = df.Status,
                               SubTotal = (decimal)df.SubTotal,
                               SubTotalAfterDis = df.SubTotalAfterDis,
                               SubTotalAfterDisSys = df.SubTotalAfterDisSys,
                               SubTotalBefDis = df.SubTotalBefDis,
                               SubTotalBefDisSys = df.SubTotalBefDisSys,
                               SubTotalSys = (decimal)df.SubTotalSys,
                               TotalAmount = (decimal)df.TotalAmount,
                               TotalAmountSys = (decimal)df.TotalAmountSys,
                               TypeDis = df.TypeDis,
                               UserID = df.UserID,
                               VatRate = (decimal)df.VatRate,
                               VatValue = (decimal)df.VatValue,
                               WarehouseID = df.WarehouseID,
                           }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _df = (from df in draftAR
                       join dfd in _context.DraftReserveInvoiceDetails on df.DraftID equals dfd.DraftReserveInvoiceID
                       join item in _context.ItemMasterDatas on dfd.ItemID equals item.ID
                       join cur in _context.Currency on df.SaleCurrencyID equals cur.ID

                       select new DraftARDetailViewModel
                       {
                           //LineID = DateTime.Now.Ticks.ToString(),
                           LineID = dfd.ID,
                           FinDisRate = dfd.FinDisRate,
                           FinDisValue = dfd.FinDisValue,
                           FinTotalValue = dfd.FinTotalValue,
                           TaxOfFinDisValue = dfd.TaxOfFinDisValue,
                           ItemCode = dfd.ItemCode,
                           BarCode = item.Barcode,
                           Currency = cur.Description,
                           TotalSys = (decimal)dfd.TotalSys,
                           DraftDetailID = dfd.ID,
                           DraftID = df.DraftID,
                           Cost = (decimal)dfd.Cost,
                           CurrencyID = cur.ID,
                           DisRate = (decimal)dfd.DisRate,
                           DisValue = (decimal)dfd.DisValue,
                           ItemNameEN = item.EnglishName,
                           ItemNameKH = item.KhmerName,
                           GUomID = item.GroupUomID,
                           ItemID = item.ID,
                           ItemType = item.Type,
                           Process = item.Process,
                           Qty = (decimal)dfd.Qty,
                           Factor = (decimal)dfd.Factor,
                           OpenQty = (decimal)dfd.OpenQty,
                           UnitPrice = (decimal)dfd.UnitPrice,
                           UomName = dfd.UomName,
                           UomID = dfd.UomID,
                           TaxGroupID = dfd.TaxGroupID,
                           TaxRate = dfd.TaxRate,
                           Remarks = dfd.Remarks,
                           TaxGroupList = tgs.Select(c => new SelectListItem
                           {
                               Value = c.ID.ToString(),
                               Text = $"{c.Code}-{c.Name}",
                               Selected = c.ID == dfd.TaxGroupID
                           }).ToList(),
                           TotalWTax = (decimal)dfd.TotalWTax,
                           TaxValue = dfd.TaxValue,
                           Total = (decimal)dfd.Total,
                           /// select List UoM ///
                           UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                   join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                   select new UOMSViewModel
                                   {
                                       BaseUoMID = GDU.BaseUOM,
                                       Factor = GDU.Factor,
                                       ID = UNM.ID,
                                       Name = UNM.Name
                                   }).Select(c => new SelectListItem
                                   {
                                       Value = c.ID.ToString(),
                                       Text = c.Name,
                                       Selected = c.ID == dfd.UomID
                                   }).ToList(),
                           UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                       join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                       select new UOMSViewModel
                                       {
                                           BaseUoMID = GDU.BaseUOM,
                                           Factor = GDU.Factor,
                                           ID = UNM.ID,
                                           Name = UNM.Name
                                       }).ToList(),
                           TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                        let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                        select new TaxGroupViewModel
                                        {
                                            ID = t.ID,
                                            //GLID = tg.GLID,
                                            Name = t.Name,
                                            Code = t.Code,
                                            Effectivefrom = tgds.EffectiveFrom,
                                            Rate = tgds.Rate,
                                            Type = (int)t.Type,
                                        }
                                         ).ToList(),
                           UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == df.PriceListID)
                                            select new UomPriceList
                                            {
                                                UoMID = (int)pld.UomID,
                                                UnitPrice = (decimal)pld.UnitPrice
                                            }
                                             ).ToList(),
                       }).ToList();
            _dataProp.DataProperty(_df, comId, "ItemID", "AddictionProps");

            var data = new DraftARUpdateViewModel
            {
                SaleDraft = draftAR.FirstOrDefault(),
                DraftARDetail = _df,
            };
            return data;
        }

        public DraftARUpdateViewModel FindDraftReserveEDTAsync(string draftname, int draftARId, int comId)
        {
            #region 
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var draftAR = (from df in _context.DraftReserveInvoiceEditables.Where(s => s.Name == draftname && s.DraffID == draftARId && s.CompanyID == comId)
                           join docType in _context.DocumentTypes on df.DocTypeID equals docType.ID
                           let sem = _context.Employees.FirstOrDefault(i => df.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                           let fs = _context.FreightSales.FirstOrDefault(i => i.SaleID == df.DraffID && i.SaleType == SaleCopyType.DraftSARReserveInvoiceEDT) ?? new FreightSale()
                           let request = _context.Employees.Where(i => i.ID == df.RequestedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let receive = _context.Employees.Where(i => i.ID == df.ReceivedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let ship = _context.Employees.Where(i => i.ID == df.ShippedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           select new DraftARViewModel
                           {

                               BasedCopyKeys = df.BasedCopyKeys,
                               ReceivedBy = df.ReceivedBy,
                               RequestedBy = df.RequestedBy,
                               ShippedBy = df.ShippedBy,
                               DraftID = df.DraffID,
                               ReceivedByName = receive.Name,
                               RequestedByName = request.Name,
                               ShippedByName = ship.Name,
                               Name = df.Name,
                               BasedOn = df.BaseOnID,
                               CopyKey = df.CopyKey,
                               BranchID = df.BranchID,
                               ChangeLog = df.ChangeLog,
                               CompanyID = df.CompanyID,
                               CusID = df.CusID,
                               DeliveryDate = df.DueDate,
                               DueDate = df.DueDate,
                               DisRate = (decimal)df.DisRate,
                               DisValue = (decimal)df.DisValue,
                               DocTypeID = df.DocTypeID,
                               DocumentDate = df.DocumentDate,
                               ExchangeRate = (decimal)df.ExchangeRate,
                               FreightAmount = df.FreightAmount,
                               FreightAmountSys = df.FreightAmountSys,

                               SaleEmID = df.SaleEmID,
                               SaleEmName = sem.Name ?? "",
                               FreightSalesView = new FreightSaleView
                               {
                                   AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                   SaleID = df.DraffID,
                                   ID = fs.ID,
                                   SaleType = fs.SaleType,
                                   TaxSumValue = fs.TaxSumValue,
                                   FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                  select new FreightSaleDetailViewModel
                                                                  {
                                                                      ID = fsd.ID,
                                                                      FreightSaleID = fsd.FreightSaleID,
                                                                      Amount = fsd.Amount,
                                                                      AmountWithTax = fsd.AmountWithTax,
                                                                      FreightID = fsd.FreightID,
                                                                      Name = fsd.Name,
                                                                      TaxGroup = fsd.TaxGroup,
                                                                      TaxGroupID = fsd.TaxGroupID,
                                                                      TaxGroups = GetTaxGroups(),
                                                                      TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                      {
                                                                          Value = i.ID.ToString(),
                                                                          Selected = fsd.TaxGroupID == i.ID,
                                                                          Text = $"{i.Code}-{i.Name}"
                                                                      }).ToList(),
                                                                      TaxRate = fsd.TaxRate,
                                                                      TotalTaxAmount = fsd.TotalTaxAmount
                                                                  }).ToList(),
                               },
                               IncludeVat = df.IncludeVat,
                               InvoiceNo = $"{docType.Code}-{df.InvoiceNumber}",
                               InvoiceNumber = df.InvoiceNumber,
                               LocalCurID = df.LocalCurID,
                               LocalSetRate = (decimal)df.LocalSetRate,
                               PostingDate = df.PostingDate,
                               PriceListID = df.PriceListID,
                               RefNo = df.RefNo,
                               Remarks = df.Remarks,
                               SaleCurrencyID = df.SaleCurrencyID,
                               SeriesDID = df.SeriesDID,
                               SeriesID = df.SeriesID,

                               Status = df.Status,
                               SubTotal = (decimal)df.SubTotal,
                               SubTotalAfterDis = df.SubTotalAfterDis,
                               SubTotalAfterDisSys = df.SubTotalAfterDisSys,
                               SubTotalBefDis = df.SubTotalBefDis,
                               SubTotalBefDisSys = df.SubTotalBefDisSys,
                               SubTotalSys = (decimal)df.SubTotalSys,
                               TotalAmount = (decimal)df.TotalAmount,
                               TotalAmountSys = (decimal)df.TotalAmountSys,
                               TypeDis = df.TypeDis,
                               UserID = df.UserID,
                               VatRate = (decimal)df.VatRate,
                               VatValue = (decimal)df.VatValue,
                               WarehouseID = df.WarehouseID,
                           }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _df = (from df in draftAR
                       join dfd in _context.DraftReserveInvoiceEditableDetails on df.DraftID equals dfd.DraftReserveInvoiceEditableID
                       join item in _context.ItemMasterDatas on dfd.ItemID equals item.ID
                       join cur in _context.Currency on df.SaleCurrencyID equals cur.ID

                       select new DraftARDetailViewModel
                       {
                           //LineID = DateTime.Now.Ticks.ToString(),
                           LineID = dfd.DraffDID,
                           FinDisRate = dfd.FinDisRate,
                           FinDisValue = dfd.FinDisValue,
                           FinTotalValue = dfd.FinTotalValue,
                           TaxOfFinDisValue = dfd.TaxOfFinDisValue,
                           ItemCode = dfd.ItemCode,
                           BarCode = item.Barcode,
                           Currency = cur.Description,
                           TotalSys = (decimal)dfd.TotalSys,
                           DraftDetailID = dfd.DraffDID,
                           DraftID = df.DraftID,
                           Cost = (decimal)dfd.Cost,
                           CurrencyID = cur.ID,
                           DisRate = (decimal)dfd.DisRate,
                           DisValue = (decimal)dfd.DisValue,
                           ItemNameEN = item.EnglishName,
                           ItemNameKH = item.KhmerName,
                           GUomID = item.GroupUomID,
                           ItemID = item.ID,
                           ItemType = item.Type,
                           Process = item.Process,
                           Qty = (decimal)dfd.Qty,
                           Factor = (decimal)dfd.Factor,
                           OpenQty = (decimal)dfd.OpenQty,
                           UnitPrice = (decimal)dfd.UnitPrice,
                           UomName = dfd.UomName,
                           UomID = dfd.UomID,
                           TaxGroupID = dfd.TaxGroupID,
                           TaxRate = dfd.TaxRate,
                           Remarks = dfd.Remarks,
                           TaxGroupList = tgs.Select(c => new SelectListItem
                           {
                               Value = c.ID.ToString(),
                               Text = $"{c.Code}-{c.Name}",
                               Selected = c.ID == dfd.TaxGroupID
                           }).ToList(),
                           TotalWTax = (decimal)dfd.TotalWTax,
                           TaxValue = dfd.TaxValue,
                           Total = (decimal)dfd.Total,
                           /// select List UoM ///
                           UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                   join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                   select new UOMSViewModel
                                   {
                                       BaseUoMID = GDU.BaseUOM,
                                       Factor = GDU.Factor,
                                       ID = UNM.ID,
                                       Name = UNM.Name
                                   }).Select(c => new SelectListItem
                                   {
                                       Value = c.ID.ToString(),
                                       Text = c.Name,
                                       Selected = c.ID == dfd.UomID
                                   }).ToList(),
                           UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                       join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                       select new UOMSViewModel
                                       {
                                           BaseUoMID = GDU.BaseUOM,
                                           Factor = GDU.Factor,
                                           ID = UNM.ID,
                                           Name = UNM.Name
                                       }).ToList(),
                           TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                        let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                        select new TaxGroupViewModel
                                        {
                                            ID = t.ID,
                                            //GLID = tg.GLID,
                                            Name = t.Name,
                                            Code = t.Code,
                                            Effectivefrom = tgds.EffectiveFrom,
                                            Rate = tgds.Rate,
                                            Type = (int)t.Type,
                                        }
                                         ).ToList(),
                           UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == df.PriceListID)
                                            select new UomPriceList
                                            {
                                                UoMID = (int)pld.UomID,
                                                UnitPrice = (decimal)pld.UnitPrice
                                            }
                                             ).ToList(),
                       }).ToList();
            foreach (var i in _df)
            {
                i.DisValue = i.DisRate == 0 ? 0 : (i.Qty * i.UnitPrice) * (i.DisRate / 100);
                i.Total = (i.Qty * i.UnitPrice) - i.DisValue;
                i.TotalSys = i.Total * draftAR.FirstOrDefault().ExchangeRate;
                i.TaxValue = i.TaxRate == 0 ? 0 : (i.TaxRate / 100) * i.Total;
                i.FinDisValue = i.FinDisRate == 0 ? 0 : (i.FinDisRate / 100) * i.Total;
                i.FinTotalValue = i.Total - i.FinDisValue;
                i.TaxOfFinDisValue = i.TaxRate == 0 ? 0 : i.FinTotalValue * (i.TaxRate / 100);
                i.TotalWTax = i.Total + i.TaxOfFinDisValue;

            }
            draftAR.FirstOrDefault().SubTotal = _df.Sum(i => i.Total);
            draftAR.FirstOrDefault().SubTotalSys = _df.Sum(i => i.Total) * draftAR.FirstOrDefault().ExchangeRate;
            draftAR.FirstOrDefault().DisValue = draftAR.FirstOrDefault().DisRate == 0 ? 0 : draftAR.FirstOrDefault().SubTotal * (draftAR.FirstOrDefault().DisRate / 100);
            draftAR.FirstOrDefault().SubTotalAfterDis = draftAR.FirstOrDefault().SubTotal - draftAR.FirstOrDefault().DisValue;
            draftAR.FirstOrDefault().VatValue = _df.Sum(i => i.TaxOfFinDisValue) + draftAR.FirstOrDefault().FreightSalesView.FreightSaleDetailViewModels.Sum(i => i.TotalTaxAmount);
            draftAR.FirstOrDefault().TotalAmount = draftAR.FirstOrDefault().FreightAmount + draftAR.FirstOrDefault().VatValue + draftAR.FirstOrDefault().SubTotalAfterDis;
            _dataProp.DataProperty(_df, comId, "ItemID", "AddictionProps");

            var data = new DraftARUpdateViewModel
            {
                SaleDraft = draftAR.FirstOrDefault(),
                DraftARDetail = _df,
            };
            return data;
        }

        public DraftARUpdateViewModel FindDraftAsync(string draftname, int draftARId, int comId)
        {
            #region 
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var draftAR = (from df in _context.DraftARs.Where(s => s.DraftName == draftname && s.DraftID == draftARId && s.CompanyID == comId)
                           join docType in _context.DocumentTypes on df.DocTypeID equals docType.ID
                           let sem = _context.Employees.FirstOrDefault(i => df.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                           let fs = _context.FreightSales.Where(i => i.SaleID == df.DraftID && i.SaleType == SaleCopyType.DraftSAleAR).FirstOrDefault() ?? new FreightSale()
                           let request = _context.Employees.Where(i => i.ID == df.RequestedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let receive = _context.Employees.Where(i => i.ID == df.ReceivedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           let ship = _context.Employees.Where(i => i.ID == df.ShippedBy).FirstOrDefault() ?? new HumanResourcesEmployee()
                           select new DraftARViewModel
                           {
                               BasedCopyKeys = df.BasedCopyKeys,
                               ReceivedBy = df.ReceivedBy,
                               RequestedBy = df.RequestedBy,
                               ShippedBy = df.ShippedBy,
                               ReceivedByName = receive.Name,
                               RequestedByName = request.Name,
                               ShippedByName = ship.Name,
                               ShipTo = df.ShipTo,
                               BasedOn = df.DraftID,
                               CopyKey = df.CopyKey,
                               BranchID = df.BranchID,
                               ChangeLog = df.ChangeLog,
                               CompanyID = df.CompanyID,
                               CusID = df.CusID,
                               DeliveryDate = df.DueDate,
                               DueDate = df.DueDate,
                               DisRate = (decimal)df.DisRate,
                               DisValue = (decimal)df.DisValue,
                               DocTypeID = df.DocTypeID,
                               DocumentDate = df.DocumentDate,
                               ExchangeRate = (decimal)df.ExchangeRate,
                               FreightAmount = df.FreightAmount,
                               FreightAmountSys = df.FreightAmountSys,
                               DownPayment = df.DownPayment,
                               DownPaymentSys = df.DownPaymentSys,
                               SaleEmID = df.SaleEmID,
                               SaleEmName = sem.Name ?? "",
                               FreightSalesView = new FreightSaleView
                               {
                                   AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                   SaleID = df.DraftID,
                                   ID = fs.ID,
                                   SaleType = fs.SaleType,
                                   TaxSumValue = fs.TaxSumValue,
                                   FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                  select new FreightSaleDetailViewModel
                                                                  {
                                                                      ID = fsd.ID,
                                                                      FreightSaleID = fsd.FreightSaleID,
                                                                      Amount = fsd.Amount,
                                                                      AmountWithTax = fsd.AmountWithTax,
                                                                      FreightID = fsd.FreightID,
                                                                      Name = fsd.Name,
                                                                      TaxGroup = fsd.TaxGroup,
                                                                      TaxGroupID = fsd.TaxGroupID,
                                                                      TaxGroups = GetTaxGroups(),
                                                                      TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                      {
                                                                          Value = i.ID.ToString(),
                                                                          Selected = fsd.TaxGroupID == i.ID,
                                                                          Text = $"{i.Code}-{i.Name}"
                                                                      }).ToList(),
                                                                      TaxRate = fsd.TaxRate,
                                                                      TotalTaxAmount = fsd.TotalTaxAmount
                                                                  }).ToList(),
                               },
                               IncludeVat = df.IncludeVat,
                               InvoiceNo = $"{docType.Code}-{df.InvoiceNumber}",
                               InvoiceNumber = df.InvoiceNumber,
                               LocalCurID = df.LocalCurID,
                               LocalSetRate = (decimal)df.LocalSetRate,
                               PostingDate = df.PostingDate,
                               PriceListID = df.PriceListID,
                               RefNo = df.RefNo,
                               Remarks = df.Remarks,
                               SaleCurrencyID = df.SaleCurrencyID,
                               SeriesDID = df.SeriesDID,
                               SeriesID = df.SeriesID,
                               DraftID = df.DraftID,
                               Status = df.Status,
                               SubTotal = (decimal)df.SubTotal,
                               SubTotalAfterDis = df.SubTotalAfterDis,
                               SubTotalAfterDisSys = df.SubTotalAfterDisSys,
                               SubTotalBefDis = df.SubTotalBefDis,
                               SubTotalBefDisSys = df.SubTotalBefDisSys,
                               SubTotalSys = (decimal)df.SubTotalSys,
                               TotalAmount = (decimal)df.TotalAmount,
                               TotalAmountSys = (decimal)df.TotalAmountSys,
                               TypeDis = df.TypeDis,
                               UserID = df.UserID,
                               VatRate = (decimal)df.VatRate,
                               VatValue = (decimal)df.VatValue,
                               WarehouseID = df.WarehouseID,
                               AppliedAmount = (decimal)df.AppliedAmount,
                           }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _df = (from df in draftAR
                       join dfd in _context.DraftARDetails on df.DraftID equals dfd.DraftID
                       join item in _context.ItemMasterDatas on dfd.ItemID equals item.ID
                       join cur in _context.Currency on df.SaleCurrencyID equals cur.ID

                       select new DraftARDetailViewModel
                       {
                           //LineID = DateTime.Now.Ticks.ToString(),
                           LineID = dfd.DraftDetailID,
                           FinDisRate = dfd.FinDisRate,
                           FinDisValue = dfd.FinDisValue,
                           FinTotalValue = dfd.FinTotalValue,
                           TaxOfFinDisValue = dfd.TaxOfFinDisValue,
                           ItemCode = dfd.ItemCode,
                           BarCode = item.Barcode,
                           Currency = cur.Description,
                           TotalSys = (decimal)dfd.TotalSys,
                           DraftDetailID = dfd.DraftDetailID,
                           DraftID = df.DraftID,
                           Cost = (decimal)dfd.Cost,
                           CurrencyID = cur.ID,
                           DisRate = (decimal)dfd.DisRate,
                           DisValue = (decimal)dfd.DisValue,
                           ItemNameEN = item.EnglishName,
                           ItemNameKH = item.KhmerName,
                           GUomID = item.GroupUomID,
                           ItemID = item.ID,
                           ItemType = item.Type,
                           Process = item.Process,
                           Qty = (decimal)dfd.Qty,
                           Factor = (decimal)dfd.Factor,
                           OpenQty = (decimal)dfd.OpenQty,
                           UnitPrice = (decimal)dfd.UnitPrice,
                           UomName = dfd.UomName,
                           UomID = dfd.UomID,
                           TaxGroupID = dfd.TaxGroupID,
                           TaxRate = dfd.TaxRate,
                           Remarks = dfd.Remarks,
                           TaxGroupList = tgs.Select(c => new SelectListItem
                           {
                               Value = c.ID.ToString(),
                               Text = $"{c.Code}-{c.Name}",
                               Selected = c.ID == dfd.TaxGroupID
                           }).ToList(),
                           TotalWTax = (decimal)dfd.TotalWTax,
                           TaxValue = dfd.TaxValue,
                           Total = (decimal)dfd.Total,
                           /// select List UoM ///
                           UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                   join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                   select new UOMSViewModel
                                   {
                                       BaseUoMID = GDU.BaseUOM,
                                       Factor = GDU.Factor,
                                       ID = UNM.ID,
                                       Name = UNM.Name
                                   }).Select(c => new SelectListItem
                                   {
                                       Value = c.ID.ToString(),
                                       Text = c.Name,
                                       Selected = c.ID == dfd.UomID
                                   }).ToList(),
                           UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                       join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                       select new UOMSViewModel
                                       {
                                           BaseUoMID = GDU.BaseUOM,
                                           Factor = GDU.Factor,
                                           ID = UNM.ID,
                                           Name = UNM.Name
                                       }).ToList(),
                           TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                        let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                        select new TaxGroupViewModel
                                        {
                                            ID = t.ID,
                                            //GLID = tg.GLID,
                                            Name = t.Name,
                                            Code = t.Code,
                                            Effectivefrom = tgds.EffectiveFrom,
                                            Rate = tgds.Rate,
                                            Type = (int)t.Type,
                                        }
                                         ).ToList(),
                           UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == df.PriceListID)
                                            select new UomPriceList
                                            {
                                                UoMID = (int)pld.UomID,
                                                UnitPrice = (decimal)pld.UnitPrice
                                            }
                                             ).ToList(),
                       }).ToList();
            _dataProp.DataProperty(_df, comId, "ItemID", "AddictionProps");
            var data = new DraftARUpdateViewModel
            {
                SaleDraft = draftAR.FirstOrDefault(),
                DraftARDetail = _df,
            };
            return data;
        }

        public async Task<int> RemoveDraft(int id)
        {
            var tab = await _context.DraftARs.FirstAsync(t => t.DraftID == id);
            tab.Remove = true;
            _context.DraftARs.Update(tab);
            return await _context.SaveChangesAsync();
        }
        #region Sale AR Edit

        public void IssuseInStockSaleAREdit(int orderid, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var Order = _context.SaleAREdites.First(w => w.SARID == orderid);
            var OrderDetails = _context.SaleAREditeDetails.Where(w => w.SARID == orderid).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.Series.Find(Order.SeriesID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.BranchID= Order.BranchID;
                journalEntry.TransNo = Order.InvoiceNumber;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + Order.InvoiceNumber;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                decimal accreAmount = (decimal)Order.TotalAmountSys;
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = accreAmount,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                glAcc.Balance += accreAmount;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,
                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Debit = accreAmount,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    Creator = Order.UserID,
                    BPAcctID = Order.CusID,
                    Effective = EffectiveBlance.Debit

                });
                _context.Update(glAcc);
            }
            // BP ARDown Payment //

            if (Order.DownPaymentSys > 0)
            {
                var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();
                if (dpmAcc.ID > 0)
                {
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Debit = Order.DownPaymentSys,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    dpmAcc.Balance += Order.DownPaymentSys;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = dpmAcc.Code,
                        Details = douTypeID.Name + " - " + dpmAcc.Code,
                        CumulativeBalance = dpmAcc.Balance,
                        Debit = Order.DownPaymentSys,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = dpmAcc.ID,
                        BPAcctID = Order.CusID,
                        Creator = Order.UserID,
                        Effective = EffectiveBlance.Debit
                    });
                    _context.Update(dpmAcc);
                }
                // Tax AR Down Payment //
                var _ards = ards.Where(i => i.Selected).ToList();
                if (_ards.Count > 0)
                {
                    foreach (var ard in _ards)
                    {
                        if (ard.SaleARDPINCNDetails.Any())
                        {
                            foreach (var i in ard.SaleARDPINCNDetails)
                            {
                                // Tax Account ///
                                var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                                decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                                if (taxAcc.ID > 0)
                                {
                                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                    if (taxjur.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                        taxAcc.Balance += taxValue;
                                        //journalEntryDetail
                                        taxjur.Debit += taxValue;
                                        //accountBalance
                                        accBalance.CumulativeBalance = taxAcc.Balance;
                                        accBalance.Debit += taxValue;
                                    }
                                    else
                                    {
                                        taxAcc.Balance += taxValue;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = taxAcc.ID,
                                            Debit = taxValue,
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = taxAcc.Code,
                                            Details = douTypeID.Name + " - " + taxAcc.Code,
                                            CumulativeBalance = taxAcc.Balance,
                                            Debit = taxValue,
                                            LocalSetRate = ard.LocalSetRate,
                                            GLAID = taxAcc.ID,
                                            Effective = EffectiveBlance.Debit
                                        });
                                    }
                                    _context.Update(taxAcc);
                                    _context.SaveChanges();
                                }
                            }
                        }
                        var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                        __ard.Status = "used";
                        __ard.ARID = orderid;
                        _context.ARDownPayments.Update(__ard);
                        _context.SaveChanges();
                    }
                }

            }
            // Freight //
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (type != "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        inventoryAccID = inventoryAcc.ID;
                        COGSAccID = COGSAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                    if (type == "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null && inventoryAcc != null && COGSAcc != null)
                    {
                        if (type != "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            inventoryAccID = inventoryAcc.ID;
                            COGSAccID = COGSAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                        if (type == "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                    }
                }
                if (itemMaster.Process != "Standard")
                {
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = item.Qty * item.Factor;
                    double Cost = 0;
                    var wareSum = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID);
                    var wareDetails = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item.ItemID);
                    if (wareSum != null)
                    {
                        if (Order.CopyType == SaleCopyType.Order)
                        {
                            wareSum.Committed -= (double)item.Qty;
                            itemMaster.StockCommit -= (double)item.Qty;
                        }
                        //WerehouseSummary
                        wareSum.InStock -= @Qty;
                        //Itemmasterdata
                        itemMaster.StockIn = wareSum.InStock - @Qty;
                        _context.WarehouseSummary.Update(wareSum);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _utility.UpdateItemAccounting(_itemAcc, wareSum);
                    }
                    if (type != "Delivery")
                    {
                        if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                        {
                            if (serials.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var s in serials)
                                {
                                    if (s.SerialNumberSelected != null)
                                    {
                                        foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                        {
                                            var waredetial = wareDetails.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                Cost = waredetial.Cost;
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = waredetial.InStock,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                waredetial.InStock -= 1;
                                                // insert to warehouse detail
                                                _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = 1,
                                                    ItemID = waredetial.ItemID,
                                                    Location = waredetial.Location,
                                                    LotNumber = waredetial.LotNumber,
                                                    MfrDate = waredetial.MfrDate,
                                                    MfrSerialNumber = waredetial.MfrSerialNumber,
                                                    PlateNumber = waredetial.PlateNumber,
                                                    MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                    MfrWarDateStart = waredetial.MfrWarDateStart,
                                                    Color = waredetial.Color,
                                                    Brand = waredetial.Brand,
                                                    Condition = waredetial.Condition,
                                                    Type = waredetial.Type,
                                                    Power = waredetial.Power,
                                                    Year = waredetial.Year,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SerialNumber = waredetial.SerialNumber,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = _expdate,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.SARID,
                                                    Contract = itemMaster.ContractID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost;
                                                _COGSAccAmount = (decimal)waredetial.Cost;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialAREdit(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // Insert to Inventory Audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate,
                                                }).ToList();
                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            LineID = item.LineID,
                                            TypeItem = SaleCopyType.SaleAREdite.ToString(),
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                        {
                            if (batches.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var b in batches)
                                {
                                    if (b.BatchNoSelected != null)
                                    {
                                        foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                        {
                                            decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                            var waredetial = wareDetails.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = (double)selectedQty,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                Cost = waredetial.Cost;
                                                waredetial.InStock -= (double)selectedQty;

                                                // insert to waredetial
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = selectedQty,
                                                    ItemID = item.ItemID,
                                                    Location = waredetial.Location,
                                                    MfrDate = waredetial.MfrDate,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = sb.ExpireDate,
                                                    BatchAttr1 = waredetial.BatchAttr1,
                                                    BatchAttr2 = waredetial.BatchAttr2,
                                                    BatchNo = waredetial.BatchNo,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.SARID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialAREdit(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // insert to inventory audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate
                                                }).ToList();

                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            LineID = item.LineID,
                                            TypeItem = SaleCopyType.SaleAREdite.ToString(),
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else
                        {
                            List<WarehouseDetail> _whlists = wareDetails.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                            if (warehouse.IsAllowNegativeStock && _whlists.Count == 0)
                            {
                                var wh = wareDetails.LastOrDefault();
                                _whlists.Add(wh);
                            }
                            foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                            {
                                InventoryAudit inventoryAudit = new();
                                WarehouseDetail item_IssusStock = item_warehouse;
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                    {
                                        @IssusQty = @Qty;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        double _cost = item_IssusStock.Cost;
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }

                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    wareDetails = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == Order.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * item.Qty * Order.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * item.Qty * Order.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.SaleAREdite.ToString(),
                        WarehouseID = Order.WarehouseID,
                        BranchID = Order.BranchID,
                        UserID = Order.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = Order.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = Order.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost * -1,
                        LocalCurID = Order.LocalCurID,
                        LocalSetRate = Order.LocalSetRate,
                        SeriesDetailID = Order.SeriesDID,
                        SeriesID = Order.SeriesID,
                        DocumentTypeID = Order.DocTypeID,
                        CompanyID = Order.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }
                if (type != "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                if (type == "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                        _context.SaveChanges();
                    }
                }
                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialAREdit(
                        inventoryAccID, COGSAccID, journalEntryDetail,
                        accountBalance, inventoryAccAmount, COGSAccAmount,
                        journalEntry, Order, docType, douTypeID, glAcc, type
                    );
                }
            }
            //IssuseInstocMaterialkSaleAR
            foreach (var item in OrderDetails)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * (double)orft.Factor) * ((double)bomd.Qty * (double)gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item_detail.ItemID);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_detail.GUoMID);
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "SD";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                    item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "AR";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg += (decimal)@AvgCost * (decimal)@IssusQty;
                                COGSAccAmountAvg += (decimal)@AvgCost * (decimal)@IssusQty;
                                _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            if (type != "Delivery")
                            {
                                _context.WarehouseDetails.Update(item_IssusStock);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);

                                            double cost = (inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost)) / (inventory_audit.Sum(q => q.Qty) - @IssusQty);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                        if (type != "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();

                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                            }
                            //inventoryAccID
                            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                            if (glAccInvenfifo.ID > 0)
                            {
                                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                                if (listInvenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    //journalEntryDetail
                                    listInvenfifo.Credit += inventoryAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                    accBalance.Credit += inventoryAccAmountAvg;
                                }
                                else
                                {
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = inventoryAccIDAvg,
                                        Credit = inventoryAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                        CumulativeBalance = glAccInvenfifo.Balance,
                                        Credit = inventoryAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = inventoryAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccInvenfifo);
                            }

                            // COGS
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    //journalEntryDetail
                                    listCOGSfifo.Debit += COGSAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Debit += COGSAccAmountAvg;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccIDAvg,
                                        Debit = COGSAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Debit = COGSAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccIDAvg,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(glAccCOGSfifo);
                            }
                            _context.SaveChanges();
                        }
                        if (type == "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                                _context.SaveChanges();
                            }
                        }
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }

        public void IssuseInStockSaleAREditOld(SaleAREdite saleAR, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter, FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var Order = _context.SaleAREdites.FirstOrDefault(w => w.SARID == saleAR.SARID);
            var OrderDetails = _context.SaleAREditeDetails.Where(w => w.SARID == saleAR.SARID).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.Series.Find(Order.SeriesID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            var arEHistory = _context.SaleAREditeHistory.LastOrDefault(w => w.SARID == saleAR.SARID);
            var arEDetailHistory = _context.SaleAREditeDetailHistory.Where(w => w.SAREID == arEHistory.ID);
            Order.UserID = saleAR.UserID;
            Order.SubTotalBefDis = saleAR.SubTotalBefDis;
            Order.SubTotalBefDisSys = saleAR.SubTotalBefDisSys;
            Order.SubTotalAfterDis = saleAR.SubTotalAfterDis;
            Order.SubTotalAfterDisSys = saleAR.SubTotalAfterDisSys;
            Order.SubTotal = saleAR.SubTotal;
            Order.SubTotalSys = saleAR.SubTotalSys;
            Order.DisRate = saleAR.DisRate;
            Order.DisValue = saleAR.DisValue;
            Order.TypeDis = saleAR.TypeDis;
            Order.TotalAmountSys = saleAR.TotalAmountSys;
            Order.TotalAmount = saleAR.TotalAmount;
            Order.SaleEmID = saleAR.SaleEmID;
            Order.ShipTo = saleAR.ShipTo;
            Order.RefNo = saleAR.RefNo;
            List<SaleAREditeDetailHistory> SaleAREditeDetailHistory = new();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            foreach (var ard in arEDetailHistory)
            {
                double newQty = 0;
                double oldQty = 0;
                double qty = 0;
                var aredNew = saleAR.SaleAREditeDetails.FirstOrDefault(w => w.ItemID == ard.ItemID) ?? new SaleAREditeDetail();
                if (aredNew.SARID != 0 && !aredNew.Delete)
                {
                    newQty = aredNew.Qty * aredNew.Factor;
                    oldQty = ard.Qty * ard.Factor;
                    qty = newQty - oldQty;
                    SaleAREditeDetailHistory.Add(new SaleAREditeDetailHistory
                    {
                        SARDID = aredNew.SARDID,
                        LineID = aredNew.LineID,
                        SARID = aredNew.SARID,
                        SQDID = aredNew.SQDID,
                        SODID = aredNew.SODID,
                        SDDID = aredNew.SDDID,
                        ItemID = aredNew.ItemID,
                        TaxGroupID = aredNew.TaxGroupID,
                        TaxRate = aredNew.TaxRate,
                        TaxValue = aredNew.TaxValue,
                        TaxOfFinDisValue = aredNew.TaxOfFinDisValue,
                        FinTotalValue = aredNew.FinTotalValue,
                        ItemCode = aredNew.ItemCode,
                        ItemNameKH = aredNew.ItemNameKH,
                        ItemNameEN = aredNew.ItemNameEN,
                        Qty = qty,
                        OpenQty = qty,
                        EditeQty = qty,
                        PrintQty = qty,
                        GUomID = aredNew.GUomID,
                        UomID = aredNew.UomID,
                        UomName = aredNew.UomName,
                        Factor = aredNew.Factor,
                        Cost = aredNew.Cost,
                        UnitPrice = aredNew.UnitPrice,
                        DisRate = aredNew.DisRate,
                        DisValue = aredNew.DisValue,
                        FinDisRate = aredNew.FinDisRate,
                        FinDisValue = aredNew.FinDisValue,
                        TypeDis = aredNew.TypeDis,
                        VatRate = aredNew.VatRate,
                        VatValue = aredNew.VatValue,
                        Total = aredNew.Total,
                        TotalSys = aredNew.TotalSys - ard.TotalSys,
                        TotalWTax = aredNew.TotalWTax,
                        TotalWTaxSys = aredNew.TotalWTaxSys,
                        CurrencyID = aredNew.CurrencyID,
                        ExpireDate = aredNew.ExpireDate,
                        ItemType = aredNew.ItemType,
                        Remarks = aredNew.Remarks,
                        Delete = aredNew.Delete,
                    });
                }
                else if (aredNew.SARID != 0 && aredNew.Delete)
                {
                    SaleAREditeDetailHistory.Add(new SaleAREditeDetailHistory
                    {
                        SARDID = aredNew.SARDID,
                        LineID = aredNew.LineID,
                        SARID = aredNew.SARID,
                        SQDID = aredNew.SQDID,
                        SODID = aredNew.SODID,
                        SDDID = aredNew.SDDID,
                        ItemID = aredNew.ItemID,
                        TaxGroupID = aredNew.TaxGroupID,
                        TaxRate = aredNew.TaxRate,
                        TaxValue = aredNew.TaxValue,
                        TaxOfFinDisValue = aredNew.TaxOfFinDisValue,
                        FinTotalValue = aredNew.FinTotalValue,
                        ItemCode = aredNew.ItemCode,
                        ItemNameKH = aredNew.ItemNameKH,
                        ItemNameEN = aredNew.ItemNameEN,
                        Qty = (aredNew.Qty * aredNew.Factor) * -1,
                        OpenQty = (aredNew.Qty * aredNew.Factor) * -1,
                        EditeQty = (aredNew.Qty * aredNew.Factor) * -1,
                        PrintQty = (aredNew.Qty * aredNew.Factor) * -1,
                        GUomID = aredNew.GUomID,
                        UomID = aredNew.UomID,
                        UomName = aredNew.UomName,
                        Factor = aredNew.Factor,
                        Cost = aredNew.Cost,
                        UnitPrice = aredNew.UnitPrice,
                        DisRate = aredNew.DisRate,
                        DisValue = aredNew.DisValue,
                        FinDisRate = aredNew.FinDisRate,
                        FinDisValue = aredNew.FinDisValue,
                        TypeDis = aredNew.TypeDis,
                        VatRate = aredNew.VatRate,
                        VatValue = aredNew.VatValue,
                        Total = aredNew.Total,
                        TotalSys = aredNew.TotalSys * -1,
                        TotalWTax = aredNew.TotalWTax,
                        TotalWTaxSys = aredNew.TotalWTaxSys,
                        CurrencyID = aredNew.CurrencyID,
                        ExpireDate = aredNew.ExpireDate,
                        ItemType = aredNew.ItemType,
                        Remarks = aredNew.Remarks,
                        Delete = aredNew.Delete,
                    });
                }
            }
            foreach (var ardNew in saleAR.SaleAREditeDetails.Where(w => w.Status == AREDetailStatus.New))
            {
                SaleAREditeDetailHistory.Add(new SaleAREditeDetailHistory
                {
                    SARDID = ardNew.SARDID,
                    LineID = ardNew.LineID,
                    SARID = ardNew.SARID,
                    SQDID = ardNew.SQDID,
                    SODID = ardNew.SODID,
                    SDDID = ardNew.SDDID,
                    ItemID = ardNew.ItemID,
                    TaxGroupID = ardNew.TaxGroupID,
                    TaxRate = ardNew.TaxRate,
                    TaxValue = ardNew.TaxValue,
                    TaxOfFinDisValue = ardNew.TaxOfFinDisValue,
                    FinTotalValue = ardNew.FinTotalValue,
                    ItemCode = ardNew.ItemCode,
                    ItemNameKH = ardNew.ItemNameKH,
                    ItemNameEN = ardNew.ItemNameEN,
                    Qty = ardNew.Qty * ardNew.Factor,
                    OpenQty = ardNew.Qty * ardNew.Factor,
                    EditeQty = ardNew.Qty * ardNew.Factor,
                    PrintQty = ardNew.Qty * ardNew.Factor,
                    GUomID = ardNew.GUomID,
                    UomID = ardNew.UomID,
                    UomName = ardNew.UomName,
                    Factor = ardNew.Factor,
                    Cost = ardNew.Cost,
                    UnitPrice = ardNew.UnitPrice,
                    DisRate = ardNew.DisRate,
                    DisValue = ardNew.DisValue,
                    FinDisRate = ardNew.FinDisRate,
                    FinDisValue = ardNew.FinDisValue,
                    TypeDis = ardNew.TypeDis,
                    VatRate = ardNew.VatRate,
                    VatValue = ardNew.VatValue,
                    Total = ardNew.Total,
                    TotalSys = ardNew.TotalSys,
                    TotalWTax = ardNew.TotalWTax,
                    TotalWTaxSys = ardNew.TotalWTaxSys,
                    CurrencyID = ardNew.CurrencyID,
                    ExpireDate = ardNew.ExpireDate,
                    ItemType = ardNew.ItemType,
                    Remarks = ardNew.Remarks,
                    Delete = ardNew.Delete,
                });
            }
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.BranchID = Order.BranchID;
                journalEntry.TransNo = Order.InvoiceNumber;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + Order.InvoiceNumber;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            #region ReceiceAccount
            var GrandTotalSys = saleAR.TotalAmountSys - arEHistory.TotalAmountSys;
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (GrandTotalSys > 0)
            {
                if (glAcc.ID > 0)
                {
                    decimal accreAmount = (decimal)GrandTotalSys;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Debit = accreAmount,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    glAcc.Balance += accreAmount;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAcc.Code,
                        CumulativeBalance = glAcc.Balance,
                        Debit = accreAmount,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = accountReceive.GLAccID,
                        Creator = Order.UserID,
                        BPAcctID = Order.CusID,
                        Effective = EffectiveBlance.Debit
                    });
                    _context.Update(glAcc);
                }
            }
            else if (GrandTotalSys < 0)
            {
                if (glAcc.ID > 0)
                {
                    decimal accreAmount = (decimal)GrandTotalSys * -1;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Credit = accreAmount,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    glAcc.Balance -= accreAmount;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAcc.Code,
                        CumulativeBalance = glAcc.Balance,
                        Credit = accreAmount,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = accountReceive.GLAccID,
                        Creator = Order.UserID,
                        BPAcctID = Order.CusID,
                        Effective = EffectiveBlance.Credit
                    });
                    _context.Update(glAcc);
                    _context.SaveChanges();
                }
            }
            #endregion
            #region DownPaymentAccount
            if (Order.DownPaymentSys > 0)
            {
                var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();
                if (dpmAcc.ID > 0)
                {
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Debit = Order.DownPaymentSys,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    dpmAcc.Balance += Order.DownPaymentSys;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = dpmAcc.Code,
                        Details = douTypeID.Name + " - " + dpmAcc.Code,
                        CumulativeBalance = dpmAcc.Balance,
                        Debit = Order.DownPaymentSys,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = dpmAcc.ID,
                        BPAcctID = Order.CusID,
                        Creator = Order.UserID,
                        Effective = EffectiveBlance.Debit

                    });
                    _context.Update(dpmAcc);
                }
                // Tax AR Down Payment //
                var _ards = ards.Where(i => i.Selected).ToList();
                if (_ards.Count > 0)
                {
                    foreach (var ard in _ards)
                    {
                        if (ard.SaleARDPINCNDetails.Any())
                        {
                            foreach (var i in ard.SaleARDPINCNDetails)
                            {
                                // Tax Account ///
                                var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                                decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                                if (taxAcc.ID > 0)
                                {
                                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                    if (taxjur.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                        taxAcc.Balance += taxValue;
                                        //journalEntryDetail
                                        taxjur.Debit += taxValue;
                                        //accountBalance
                                        accBalance.CumulativeBalance = taxAcc.Balance;
                                        accBalance.Debit += taxValue;
                                    }
                                    else
                                    {
                                        taxAcc.Balance += taxValue;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = taxAcc.ID,
                                            Debit = taxValue,
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = taxAcc.Code,
                                            Details = douTypeID.Name + " - " + taxAcc.Code,
                                            CumulativeBalance = taxAcc.Balance,
                                            Debit = taxValue,
                                            LocalSetRate = ard.LocalSetRate,
                                            GLAID = taxAcc.ID,
                                            Effective = EffectiveBlance.Debit
                                        });
                                    }
                                    _context.Update(taxAcc);

                                }
                            }
                        }
                        var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                        __ard.Status = "used";
                        __ard.ARID = saleAR.SARID;
                        _context.ARDownPayments.Update(__ard);
                        _context.SaveChanges();
                    }
                }
            }
            #endregion
            #region Freight
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);

                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);

                        }
                    }
                }
            }
            #endregion

            //IssuseInStockSaleAR
            foreach (var item in SaleAREditeDetailHistory.Where(w => w.Qty > 0))
            {
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                    if (saleAR.DisRate > 0)
                    {
                        decimal disvalue = (decimal)item.TotalSys * (decimal)saleAR.DisRate / 100;
                        revenueAccAmount = (decimal)item.TotalSys - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = (decimal)item.TotalSys;
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null && inventoryAcc != null && COGSAcc != null)
                    {
                        revenueAccID = revenueAcc.ID;
                        inventoryAccID = inventoryAcc.ID;
                        COGSAccID = COGSAcc.ID;
                        if (saleAR.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)saleAR.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                }
                if (itemMaster.Process != "Standard")
                {
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = item.Qty;
                    double Cost = 0;
                    var wareSum = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID);
                    var wareDetails = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item.ItemID);
                    if (wareSum != null)
                    {
                        if (Order.CopyType == SaleCopyType.Order)
                        {
                            wareSum.Committed -= (double)item.Qty;
                            itemMaster.StockCommit -= (double)item.Qty;
                        }
                        //WerehouseSummary
                        wareSum.InStock -= @Qty;
                        //Itemmasterdata
                        itemMaster.StockIn = wareSum.InStock - @Qty;
                        _context.WarehouseSummary.Update(wareSum);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _utility.UpdateItemAccounting(_itemAcc, wareSum);
                    }
                    if (type != "Delivery")
                    {
                        if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                        {
                            if (serials.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var s in serials)
                                {
                                    if (s.SerialNumberSelected != null)
                                    {
                                        foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                        {
                                            var waredetial = wareDetails.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                Cost = waredetial.Cost;
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = waredetial.InStock,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                waredetial.InStock -= 1;
                                                // insert to warehouse detail
                                                _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = 1,
                                                    ItemID = waredetial.ItemID,
                                                    Location = waredetial.Location,
                                                    LotNumber = waredetial.LotNumber,
                                                    MfrDate = waredetial.MfrDate,
                                                    MfrSerialNumber = waredetial.MfrSerialNumber,
                                                    MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                    MfrWarDateStart = waredetial.MfrWarDateStart,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SerialNumber = waredetial.SerialNumber,
                                                    PlateNumber = waredetial.PlateNumber,
                                                    Color = waredetial.Color,
                                                    Brand = waredetial.Brand,
                                                    Condition = waredetial.Condition,
                                                    Type = waredetial.Type,
                                                    Power = waredetial.Power,
                                                    Year = waredetial.Year,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = _expdate,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.SARID,
                                                    Contract = itemMaster.ContractID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost;
                                                _COGSAccAmount = (decimal)waredetial.Cost;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialAREdit(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // Insert to Inventory Audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate,
                                                }).ToList();
                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            LineID = item.LineID,
                                            TypeItem = SaleCopyType.SaleAREdite.ToString(),
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                        {
                            if (batches.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var b in batches)
                                {
                                    if (b.BatchNoSelected != null)
                                    {
                                        foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                        {
                                            decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                            var waredetial = wareDetails.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = (double)selectedQty,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                Cost = waredetial.Cost;
                                                waredetial.InStock -= (double)selectedQty;

                                                // insert to waredetial
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = selectedQty,
                                                    ItemID = item.ItemID,
                                                    Location = waredetial.Location,
                                                    MfrDate = waredetial.MfrDate,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = sb.ExpireDate,
                                                    BatchAttr1 = waredetial.BatchAttr1,
                                                    BatchAttr2 = waredetial.BatchAttr2,
                                                    BatchNo = waredetial.BatchNo,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.SARID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialAREdit(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // insert to inventory audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate
                                                }).ToList();

                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            LineID = item.LineID,
                                            TypeItem = SaleCopyType.SaleAREdite.ToString(),
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else
                        {
                            List<WarehouseDetail> _whlists = wareDetails.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                            if (warehouse.IsAllowNegativeStock && _whlists.Count == 0)
                            {
                                var wh = wareDetails.LastOrDefault();
                                _whlists.Add(wh);
                            }
                            foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                            {
                                InventoryAudit inventoryAudit = new();
                                WarehouseDetail item_IssusStock = item_warehouse;
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                    {
                                        @IssusQty = @Qty;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        double _cost = item_IssusStock.Cost;
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    wareDetails = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == Order.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * item.Qty * Order.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * item.Qty * Order.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.SaleAREdite.ToString(),
                        WarehouseID = Order.WarehouseID,
                        BranchID = Order.BranchID,
                        UserID = Order.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = Order.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = Order.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost * -1,
                        LocalCurID = Order.LocalCurID,
                        LocalSetRate = Order.LocalSetRate,
                        SeriesDetailID = Order.SeriesDID,
                        SeriesID = Order.SeriesID,
                        DocumentTypeID = Order.DocTypeID,
                        CompanyID = Order.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }
                #region TaxAccount
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit

                        });
                    }
                    _context.Update(taxAcc);
                }
                #endregion
                #region RevenueAccount
                if (revenueAccAmount >= 0)
                {
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit

                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                else if (revenueAccAmount < 0)
                {
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance += revenueAccAmount * -1;
                            //journalEntryDetail
                            listRevenfifo.Debit += revenueAccAmount * -1;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Debit += revenueAccAmount * -1;
                        }
                        else
                        {
                            glAccRevenfifo.Balance += revenueAccAmount * -1;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Debit = revenueAccAmount * -1,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Debit = revenueAccAmount * -1,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Debit

                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                #endregion
                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialAREdit(
                        inventoryAccID, COGSAccID, journalEntryDetail,
                        accountBalance, inventoryAccAmount, COGSAccAmount,
                        journalEntry, Order, docType, douTypeID, glAcc, type
                    );
                }
            }
            //IssuseInstocMaterialkSaleAR
            foreach (var item in OrderDetails)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * (double)orft.Factor) * ((double)bomd.Qty * (double)gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item_detail.ItemID);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_detail.GUoMID);
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "SD";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                    item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "AR";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg += (decimal)@AvgCost * (decimal)@IssusQty;
                                COGSAccAmountAvg += (decimal)@AvgCost * (decimal)@IssusQty;
                                _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            if (type != "Delivery")
                            {
                                _context.WarehouseDetails.Update(item_IssusStock);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);

                                            double cost = (inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost)) / (inventory_audit.Sum(q => q.Qty) - @IssusQty);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                        if (type != "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();

                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                            }
                            //inventoryAccID
                            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                            if (glAccInvenfifo.ID > 0)
                            {
                                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                                if (listInvenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    //journalEntryDetail
                                    listInvenfifo.Credit += inventoryAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                    accBalance.Credit += inventoryAccAmountAvg;
                                }
                                else
                                {
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = inventoryAccIDAvg,
                                        Credit = inventoryAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                        CumulativeBalance = glAccInvenfifo.Balance,
                                        Credit = inventoryAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = inventoryAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccInvenfifo);
                            }

                            // COGS
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    //journalEntryDetail
                                    listCOGSfifo.Debit += COGSAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Debit += COGSAccAmountAvg;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccIDAvg,
                                        Debit = COGSAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Debit = COGSAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccIDAvg,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(glAccCOGSfifo);
                            }
                            _context.SaveChanges();
                        }
                        if (type == "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                                _context.SaveChanges();
                            }
                        }
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            //GoodReceiptStock
            List<SaleAREditeDetail> saleEDetail = new();
            saleEDetail = OrderDetails.ToList();
            foreach (var itemdt in SaleAREditeDetailHistory.Where(w => w.Qty < 0))
            {
                var itemmaster = _context.ItemMasterDatas.FirstOrDefault(w => !w.Delete && w.ID == itemdt.ItemID);
                var gd = _context.GroupDUoMs.FirstOrDefault(W => W.GroupUoMID == itemmaster.GroupUomID && W.AltUOM == itemdt.UomID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemmaster.GroupUomID);
                var ware = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID);
                var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.ItemID == itemdt.ItemID && i.WarehouseID == saleAR.WarehouseID);
                int inventoryAccID = 0, COGSAccID = 0, revenueAccID = 0;
                decimal inventoryAccAmount = 0, COGSAccAmount = 0, revenueAccAmount = 0;
                List<ItemAccounting> itemAccs = new();
                double @Qty = itemdt.Qty * -1;
                double _cost = 0;
                var itemReceiptStock = saleEDetail.Where(w => w.ItemID == itemdt.ItemID).OrderBy(o => o.SARID);
                if (itemmaster.Process != "Standard")
                {
                    foreach (var itemEdit in itemReceiptStock)
                    {
                        InventoryAudit item_inventory_audit = new();
                        WarehouseDetail warehousedetail = new();
                        double CheckStockQty = 0;
                        double itemEditQty = itemEdit.Qty * itemEdit.Factor;
                        CheckStockQty = itemEditQty - @Qty;
                        _cost = itemEdit.Cost / itemEdit.Factor;
                        if (CheckStockQty >= 0)
                        {
                            if (itemmaster.SetGlAccount == SetGlAccount.ItemLevel)
                            {
                                itemAccs = _context.ItemAccountings.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID).ToList();
                                var inventoryAcc = (from ia in itemAccs
                                                    join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                    select gl
                                                     ).FirstOrDefault();
                                var COGSAcc = (from ia in itemAccs
                                               join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                               select gl).FirstOrDefault() ?? new GLAccount();
                                var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == Order.WarehouseID)
                                                  join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                                  select gl).FirstOrDefault() ?? new GLAccount();
                                if (inventoryAcc != null)
                                {
                                    inventoryAccID = inventoryAcc.ID;
                                }
                                if (COGSAcc != null)
                                {
                                    COGSAccID = COGSAcc.ID;
                                }
                                if (revenueAcc != null)
                                {
                                    revenueAccID = revenueAcc.ID;
                                }
                                if (saleAR.DisRate > 0)
                                {
                                    decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                                    revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                                }
                                else
                                {
                                    revenueAccAmount = ((decimal)itemdt.TotalSys);
                                }
                            }

                            else if (itemmaster.SetGlAccount == SetGlAccount.ItemGroup)
                            {
                                itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemmaster.ItemGroup1ID).ToList();
                                var inventoryAcc = (from ia in itemAccs
                                                    join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                    select gl
                                                     ).FirstOrDefault();
                                var COGSAcc = (from ia in itemAccs
                                               join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                               select gl).FirstOrDefault() ?? new GLAccount();
                                var revenueAcc = (from ia in itemAccs
                                                  join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                                  select gl).FirstOrDefault() ?? new GLAccount();
                                if (inventoryAcc != null)
                                {
                                    inventoryAccID = inventoryAcc.ID;
                                }
                                if (COGSAcc != null)
                                {
                                    COGSAccID = COGSAcc.ID;
                                }
                                if (revenueAcc != null)
                                {
                                    revenueAccID = revenueAcc.ID;
                                }
                                if (saleAR.DisRate > 0)
                                {
                                    decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                                    revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                                }
                                else
                                {
                                    revenueAccAmount = ((decimal)itemdt.TotalSys);
                                }
                            }
                            inventoryAccAmount = (decimal)_cost * (decimal)@Qty;
                            COGSAccAmount = (decimal)_cost * (decimal)@Qty;
                            // update itmemasterdata                    
                            itemmaster.StockIn += @Qty;
                            //update warehouse                    
                            ware.InStock += @Qty;
                            _utility.UpdateItemAccounting(_itemAcc, ware);

                            #region InventoryAccount                             
                            var glAccInven = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
                            var journalDetail = journalEntryDetail.FirstOrDefault(w => w.ItemID == inventoryAccID) ?? new JournalEntryDetail();
                            if (journalDetail.ItemID > 0)
                            {
                                glAccInven.Balance += inventoryAccAmount;
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                                //journalEntryDetail
                                journalDetail.Debit += inventoryAccAmount;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccInven.Balance;
                                accBalance.Debit += inventoryAccAmount;
                            }
                            else
                            {

                                glAccInven.Balance += inventoryAccAmount;

                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = inventoryAccID,
                                    Debit = inventoryAccAmount,
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAR.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAR.InvoiceNo,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + "-" + glAccInven.Code,
                                    CumulativeBalance = glAccInven.Balance,
                                    Debit = inventoryAccAmount,
                                    LocalSetRate = (decimal)saleAR.LocalSetRate,
                                    GLAID = inventoryAccID,
                                    Effective = EffectiveBlance.Debit
                                });
                                _context.Update(glAccInven);

                            }
                            #endregion
                            #region COGSAccount                             
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                                    glAccCOGSfifo.Balance -= COGSAccAmount;
                                    //journalEntryDetail
                                    listCOGSfifo.Credit += COGSAccAmount;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Credit += COGSAccAmount;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance -= COGSAccAmount;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccID,
                                        Credit = COGSAccAmount,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Credit = COGSAccAmount,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccID,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccCOGSfifo);

                            }
                            #endregion
                            #region RevenueAccount
                            if (revenueAccAmount > 0)
                            {
                                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                                if (glAccRevenfifo.ID > 0)
                                {
                                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                    if (listRevenfifo.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                                        glAccRevenfifo.Balance -= revenueAccAmount;
                                        //journalEntryDetail
                                        listRevenfifo.Credit += revenueAccAmount;
                                        //accountBalance
                                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                        accBalance.Credit += revenueAccAmount;
                                    }
                                    else
                                    {
                                        glAccRevenfifo.Balance -= revenueAccAmount;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = revenueAccID,
                                            Credit = revenueAccAmount,
                                            BPAcctID = Order.CusID
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = glAcc.Code,
                                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                            CumulativeBalance = glAccRevenfifo.Balance,
                                            Credit = revenueAccAmount,
                                            LocalSetRate = (decimal)Order.LocalSetRate,
                                            GLAID = revenueAccID,
                                            Effective = EffectiveBlance.Credit
                                        });
                                    }
                                    _context.Update(glAccRevenfifo);

                                }
                            }
                            else if (revenueAccAmount < 0)
                            {
                                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                                if (glAccRevenfifo.ID > 0)
                                {
                                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                    if (listRevenfifo.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                                        glAccRevenfifo.Balance += revenueAccAmount * -1;
                                        //journalEntryDetail
                                        listRevenfifo.Debit += revenueAccAmount * -1;
                                        //accountBalance
                                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                        accBalance.Debit += revenueAccAmount * -1;
                                    }
                                    else
                                    {
                                        glAccRevenfifo.Balance += revenueAccAmount * -1;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = revenueAccID,
                                            Debit = revenueAccAmount * -1,
                                            BPAcctID = Order.CusID
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = glAcc.Code,
                                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                            CumulativeBalance = glAccRevenfifo.Balance,
                                            Debit = revenueAccAmount * -1,
                                            LocalSetRate = (decimal)Order.LocalSetRate,
                                            GLAID = revenueAccID,
                                            Effective = EffectiveBlance.Debit
                                        });
                                    }
                                    _context.Update(glAccRevenfifo);
                                }
                            }
                            #endregion
                            _context.ItemMasterDatas.Update(itemmaster);
                            _context.WarehouseSummary.Update(ware);
                            //insert warehousedetail                          
                            warehousedetail.WarehouseID = saleAR.WarehouseID;
                            warehousedetail.UserID = saleAR.UserID;
                            warehousedetail.UomID = itemdt.UomID;
                            warehousedetail.SyetemDate = DateTime.Now;
                            warehousedetail.TimeIn = DateTime.Now;
                            warehousedetail.InStock = @Qty;
                            warehousedetail.CurrencyID = saleAR.SaleCurrencyID;
                            warehousedetail.ExpireDate = itemdt.ExpireDate;
                            warehousedetail.ItemID = itemdt.ItemID;
                            warehousedetail.Cost = _cost;
                            warehousedetail.BPID = 0;
                            warehousedetail.TransType = TransTypeWD.AR;
                            warehousedetail.InStockFrom = saleAR.SARID;
                            _context.WarehouseDetails.Add(warehousedetail);
                            _context.SaveChanges();
                            if (itemmaster.Process == "FIFO")
                            {
                                //insert inventoryaudit
                                var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID);
                                var pri_detial = _context.PriceListDetails.Where(w => w.ItemID == itemdt.ItemID);
                                item_inventory_audit.ID = 0;
                                item_inventory_audit.LineID = itemdt.LineID;
                                item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                item_inventory_audit.WarehouseID = saleAR.WarehouseID;
                                item_inventory_audit.BranchID = saleAR.BranchID;
                                item_inventory_audit.UserID = saleAR.UserID;
                                item_inventory_audit.ItemID = itemdt.ItemID;
                                item_inventory_audit.CurrencyID = saleAR.SaleCurrencyID;
                                item_inventory_audit.UomID = orft.BaseUOM;
                                item_inventory_audit.InvoiceNo = saleAR.InvoiceNo;
                                item_inventory_audit.Trans_Type = docType.Code;
                                item_inventory_audit.Process = itemmaster.Process;
                                item_inventory_audit.SystemDate = DateTime.Now;
                                item_inventory_audit.PostingDate = Order.PostingDate;
                                item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString();
                                item_inventory_audit.Qty = @Qty;
                                item_inventory_audit.Cost = _cost;
                                item_inventory_audit.Price = 0;
                                item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                                item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@Qty * _cost);
                                item_inventory_audit.Trans_Valuse = (@Qty * _cost);
                                item_inventory_audit.ExpireDate = itemdt.ExpireDate;
                                item_inventory_audit.LocalCurID = saleAR.LocalCurID;
                                item_inventory_audit.LocalSetRate = saleAR.LocalSetRate;
                                item_inventory_audit.SeriesDetailID = saleAR.SeriesDID;
                                item_inventory_audit.SeriesID = saleAR.SeriesID;
                                item_inventory_audit.DocumentTypeID = saleAR.DocTypeID;
                                item_inventory_audit.CompanyID = saleAR.CompanyID;
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                            else if (itemmaster.Process == "Average")
                            {
                                //insert inventoryaudit
                                var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID);
                                var warehouse_sammary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID);
                                var pri_detial = _context.PriceListDetails.Where(w => w.ItemID == itemdt.ItemID);
                                InventoryAudit avgInAudit = new() { Qty = @Qty, Cost = _cost };
                                double @AvgCost = _utility.CalAVGCost(itemdt.ItemID, saleAR.WarehouseID, avgInAudit);
                                @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                item_inventory_audit.ID = 0;
                                item_inventory_audit.LineID = itemdt.LineID;
                                item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                item_inventory_audit.WarehouseID = saleAR.WarehouseID;
                                item_inventory_audit.BranchID = saleAR.BranchID;
                                item_inventory_audit.UserID = saleAR.UserID;
                                item_inventory_audit.ItemID = itemdt.ItemID;
                                item_inventory_audit.CurrencyID = saleAR.SaleCurrencyID;
                                item_inventory_audit.UomID = orft.BaseUOM;
                                item_inventory_audit.InvoiceNo = saleAR.InvoiceNo;
                                item_inventory_audit.Trans_Type = docType.Code;
                                item_inventory_audit.Process = itemmaster.Process;
                                item_inventory_audit.SystemDate = DateTime.Now;
                                item_inventory_audit.PostingDate = Order.PostingDate;
                                item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString();
                                item_inventory_audit.Qty = @Qty;
                                item_inventory_audit.Cost = @AvgCost;
                                item_inventory_audit.Price = 0;
                                item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                                item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@Qty * _cost);
                                item_inventory_audit.Trans_Valuse = (@Qty * _cost);
                                item_inventory_audit.ExpireDate = itemdt.ExpireDate;
                                item_inventory_audit.LocalCurID = saleAR.LocalCurID;
                                item_inventory_audit.LocalSetRate = saleAR.LocalSetRate;
                                item_inventory_audit.SeriesDetailID = saleAR.SeriesDID;
                                item_inventory_audit.SeriesID = saleAR.SeriesID;
                                item_inventory_audit.DocumentTypeID = saleAR.DocTypeID;
                                item_inventory_audit.CompanyID = saleAR.CompanyID;
                                // update_warehouse_summary
                                warehouse_sammary.Cost = @AvgCost;
                                _context.WarehouseSummary.Update(warehouse_sammary);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                            break;
                        }
                        else
                        {
                            @Qty -= itemEditQty;
                            if (itemmaster.SetGlAccount == SetGlAccount.ItemLevel)
                            {
                                itemAccs = _context.ItemAccountings.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID).ToList();
                                var inventoryAcc = (from ia in itemAccs
                                                    join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                    select gl
                                                     ).FirstOrDefault();
                                var COGSAcc = (from ia in itemAccs
                                               join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                               select gl).FirstOrDefault() ?? new GLAccount();
                                var revenueAcc = (from ia in itemAccs
                                                  join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                                  select gl).FirstOrDefault() ?? new GLAccount();
                                if (inventoryAcc != null)
                                {
                                    inventoryAccID = inventoryAcc.ID;
                                }
                                if (COGSAcc != null)
                                {
                                    COGSAccID = COGSAcc.ID;
                                }
                                if (saleAR.DisRate > 0)
                                {
                                    decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                                    revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                                }
                                else
                                {
                                    revenueAccAmount = ((decimal)itemdt.TotalSys);
                                }
                            }
                            else if (itemmaster.SetGlAccount == SetGlAccount.ItemGroup)
                            {
                                itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemmaster.ItemGroup1ID).ToList();
                                var inventoryAcc = (from ia in itemAccs
                                                    join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                    select gl
                                                     ).FirstOrDefault();
                                var COGSAcc = (from ia in itemAccs
                                               join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                               select gl).FirstOrDefault() ?? new GLAccount();
                                var revenueAcc = (from ia in itemAccs
                                                  join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                                  select gl).FirstOrDefault() ?? new GLAccount();
                                if (inventoryAcc != null)
                                {
                                    inventoryAccID = inventoryAcc.ID;
                                }
                                if (COGSAcc != null)
                                {
                                    COGSAccID = COGSAcc.ID;
                                }
                                if (saleAR.DisRate > 0)
                                {
                                    decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                                    revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                                }
                                else
                                {
                                    revenueAccAmount = ((decimal)itemdt.TotalSys);
                                }
                            }
                            inventoryAccAmount = (decimal)_cost * (decimal)itemEditQty;
                            COGSAccAmount = (decimal)_cost * (decimal)itemEditQty;
                            // update itmemasterdata                    
                            itemmaster.StockIn += itemEditQty;
                            //update warehouse                    
                            ware.InStock += itemEditQty;
                            _utility.UpdateItemAccounting(_itemAcc, ware);

                            #region InventoryAccount                              
                            var glAccInven = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID);
                            var journalDetail = journalEntryDetail.FirstOrDefault(w => w.ItemID == inventoryAccID) ?? new JournalEntryDetail();
                            if (journalDetail.ItemID > 0)
                            {
                                glAccInven.Balance += inventoryAccAmount;
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                                //journalEntryDetail
                                journalDetail.Debit += inventoryAccAmount;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccInven.Balance;
                                accBalance.Debit += inventoryAccAmount;
                            }
                            else
                            {
                                glAccInven.Balance += inventoryAccAmount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = inventoryAccID,
                                    Debit = inventoryAccAmount,
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAR.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAR.InvoiceNo,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + "-" + glAccInven.Code,
                                    CumulativeBalance = glAccInven.Balance,
                                    Debit = inventoryAccAmount,
                                    LocalSetRate = (decimal)saleAR.LocalSetRate,
                                    GLAID = inventoryAccID,
                                    Effective = EffectiveBlance.Debit
                                });
                                _context.Update(glAccInven);

                            }
                            #endregion
                            #region COGSAccount
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                                    glAccCOGSfifo.Balance -= COGSAccAmount;
                                    //journalEntryDetail
                                    listCOGSfifo.Credit += COGSAccAmount;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Credit += COGSAccAmount;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance -= COGSAccAmount;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccID,
                                        Credit = COGSAccAmount,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Credit = COGSAccAmount,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccID,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccCOGSfifo);
                            }
                            #endregion
                            #region RevenueAccount    
                            if (revenueAccAmount > 0)
                            {
                                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                                if (glAccRevenfifo.ID > 0)
                                {
                                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                    if (listRevenfifo.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                                        glAccRevenfifo.Balance -= revenueAccAmount;
                                        //journalEntryDetail
                                        listRevenfifo.Credit += revenueAccAmount;
                                        //accountBalance
                                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                        accBalance.Credit += revenueAccAmount;
                                    }
                                    else
                                    {
                                        glAccRevenfifo.Balance -= revenueAccAmount;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = revenueAccID,
                                            Credit = revenueAccAmount,
                                            BPAcctID = Order.CusID
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = glAcc.Code,
                                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                            CumulativeBalance = glAccRevenfifo.Balance,
                                            Credit = revenueAccAmount,
                                            LocalSetRate = (decimal)Order.LocalSetRate,
                                            GLAID = revenueAccID,
                                            Effective = EffectiveBlance.Credit
                                        });
                                    }
                                    _context.Update(glAccRevenfifo);
                                }
                            }
                            else if (revenueAccAmount < 0)
                            {
                                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                                if (glAccRevenfifo.ID > 0)
                                {
                                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                    if (listRevenfifo.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                                        glAccRevenfifo.Balance += revenueAccAmount * -1;
                                        //journalEntryDetail
                                        listRevenfifo.Debit += revenueAccAmount * -1;
                                        //accountBalance
                                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                        accBalance.Debit += revenueAccAmount * -1;
                                    }
                                    else
                                    {
                                        glAccRevenfifo.Balance += revenueAccAmount * -1;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = revenueAccID,
                                            Debit = revenueAccAmount * -1,
                                            BPAcctID = Order.CusID
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = glAcc.Code,
                                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                            CumulativeBalance = glAccRevenfifo.Balance,
                                            Debit = revenueAccAmount * -1,
                                            LocalSetRate = (decimal)Order.LocalSetRate,
                                            GLAID = revenueAccID,
                                            Effective = EffectiveBlance.Debit
                                        });
                                    }
                                    _context.Update(glAccRevenfifo);
                                }
                            }
                            #endregion
                            _context.ItemMasterDatas.Update(itemmaster);
                            _context.WarehouseSummary.Update(ware);
                            //insert warehousedetail
                            warehousedetail.ID = 0;
                            warehousedetail.WarehouseID = saleAR.WarehouseID;
                            warehousedetail.UserID = saleAR.UserID;
                            warehousedetail.UomID = itemdt.UomID;
                            warehousedetail.SyetemDate = DateTime.Now;
                            warehousedetail.TimeIn = DateTime.Now;
                            warehousedetail.InStock = itemEditQty;
                            warehousedetail.CurrencyID = saleAR.SaleCurrencyID;
                            warehousedetail.ExpireDate = itemdt.ExpireDate;
                            warehousedetail.ItemID = itemdt.ItemID;
                            warehousedetail.Cost = _cost;
                            warehousedetail.IsDeleted = true;
                            warehousedetail.BPID = saleAR.CusID;
                            warehousedetail.TransType = TransTypeWD.PurAP;
                            warehousedetail.InStockFrom = saleAR.CusID;
                            _context.WarehouseDetails.Add(warehousedetail);
                            _context.SaveChanges();
                            if (itemmaster.Process == "FIFO")
                            {
                                //insert inventoryaudit
                                var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == itemdt.ItemID && w.UomID == itemdt.UomID && w.WarehouseID == saleAR.WarehouseID);
                                var pri_detial = _context.PriceListDetails.Where(w => w.ItemID == itemdt.ItemID);
                                item_inventory_audit.ID = 0;
                                item_inventory_audit.LineID = itemdt.LineID;
                                item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                item_inventory_audit.WarehouseID = saleAR.WarehouseID;
                                item_inventory_audit.BranchID = saleAR.BranchID;
                                item_inventory_audit.UserID = saleAR.UserID;
                                item_inventory_audit.ItemID = itemdt.ItemID;
                                item_inventory_audit.CurrencyID = saleAR.SaleCurrencyID;
                                item_inventory_audit.UomID = orft.BaseUOM;
                                item_inventory_audit.InvoiceNo = saleAR.InvoiceNo;
                                item_inventory_audit.Trans_Type = docType.Code;
                                item_inventory_audit.Process = itemmaster.Process;
                                item_inventory_audit.SystemDate = DateTime.Now;
                                item_inventory_audit.PostingDate = Order.PostingDate;
                                item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString();
                                item_inventory_audit.Qty = itemEditQty;
                                item_inventory_audit.Cost = _cost;
                                item_inventory_audit.Price = 0;
                                item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + itemEditQty;
                                item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (itemEditQty * _cost);
                                item_inventory_audit.Trans_Valuse = (itemEditQty * _cost);
                                item_inventory_audit.ExpireDate = itemdt.ExpireDate;
                                item_inventory_audit.LocalCurID = saleAR.LocalCurID;
                                item_inventory_audit.LocalSetRate = saleAR.LocalSetRate;
                                item_inventory_audit.SeriesDetailID = saleAR.SeriesDID;
                                item_inventory_audit.SeriesID = saleAR.SeriesID;
                                item_inventory_audit.DocumentTypeID = saleAR.DocTypeID;
                                item_inventory_audit.CompanyID = saleAR.CompanyID;
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                            else if (itemmaster.Process == "Average")
                            {
                                //insert inventoryaudit
                                var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID);
                                var warehouse_sammary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID);
                                var pri_detial = _context.PriceListDetails.Where(w => w.ItemID == itemdt.ItemID);
                                InventoryAudit avgInAudit = new() { Qty = itemEditQty, Cost = _cost };
                                double @AvgCost = _utility.CalAVGCost(itemdt.ItemID, saleAR.WarehouseID, avgInAudit);
                                @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                item_inventory_audit.ID = 0;
                                item_inventory_audit.LineID = itemdt.LineID;
                                item_inventory_audit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                                item_inventory_audit.WarehouseID = saleAR.WarehouseID;
                                item_inventory_audit.BranchID = saleAR.BranchID;
                                item_inventory_audit.UserID = saleAR.UserID;
                                item_inventory_audit.ItemID = itemdt.ItemID;
                                item_inventory_audit.CurrencyID = saleAR.SaleCurrencyID;
                                item_inventory_audit.UomID = orft.BaseUOM;
                                item_inventory_audit.InvoiceNo = saleAR.InvoiceNo;
                                item_inventory_audit.Trans_Type = docType.Code;
                                item_inventory_audit.Process = itemmaster.Process;
                                item_inventory_audit.SystemDate = DateTime.Now;
                                item_inventory_audit.PostingDate = Order.PostingDate;
                                item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString();
                                item_inventory_audit.Qty = itemEditQty;
                                item_inventory_audit.Cost = @AvgCost;
                                item_inventory_audit.Price = 0;
                                item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + itemEditQty;
                                item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (itemEditQty * _cost);
                                item_inventory_audit.Trans_Valuse = (itemEditQty * _cost);
                                item_inventory_audit.ExpireDate = itemdt.ExpireDate;
                                item_inventory_audit.LocalCurID = saleAR.LocalCurID;
                                item_inventory_audit.LocalSetRate = saleAR.LocalSetRate;
                                item_inventory_audit.SeriesDetailID = saleAR.SeriesDID;
                                item_inventory_audit.SeriesID = saleAR.SeriesID;
                                item_inventory_audit.DocumentTypeID = saleAR.DocTypeID;
                                item_inventory_audit.CompanyID = saleAR.CompanyID;
                                // update_warehouse_summary
                                warehouse_sammary.Cost = @AvgCost;
                                _context.WarehouseSummary.Update(warehouse_sammary);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                    }
                }
                else
                {
                    _cost = itemdt.Cost / itemdt.Factor;
                    if (itemmaster.SetGlAccount == SetGlAccount.ItemLevel)
                    {
                        itemAccs = _context.ItemAccountings.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID).ToList();
                        var inventoryAcc = (from ia in itemAccs
                                            join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                            select gl
                                             ).FirstOrDefault();
                        var COGSAcc = (from ia in itemAccs
                                       join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                       select gl).FirstOrDefault() ?? new GLAccount();
                        var revenueAcc = (from ia in itemAccs
                                          join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                          select gl).FirstOrDefault() ?? new GLAccount();
                        if (inventoryAcc != null)
                        {
                            inventoryAccID = inventoryAcc.ID;
                        }
                        if (COGSAcc != null)
                        {
                            COGSAccID = COGSAcc.ID;
                        }
                        if (revenueAcc != null)
                        {
                            revenueAcc.ID = -revenueAccID;
                        }
                        if (saleAR.DisRate > 0)
                        {
                            decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                            revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = ((decimal)itemdt.TotalSys);
                        }
                    }
                    else if (itemmaster.SetGlAccount == SetGlAccount.ItemGroup)
                    {
                        itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemmaster.ItemGroup1ID).ToList();
                        var inventoryAcc = (from ia in itemAccs
                                            join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                            select gl
                                             ).FirstOrDefault();
                        var COGSAcc = (from ia in itemAccs
                                       join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                       select gl).FirstOrDefault() ?? new GLAccount();
                        var revenueAcc = (from ia in itemAccs
                                          join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                          select gl).FirstOrDefault() ?? new GLAccount();
                        if (inventoryAcc != null)
                        {
                            inventoryAccID = inventoryAcc.ID;
                        }
                        if (COGSAcc != null)
                        {
                            COGSAccID = COGSAcc.ID;
                        }
                        if (revenueAcc != null)
                        {
                            revenueAccID = revenueAcc.ID;
                        }
                        if (saleAR.DisRate > 0)
                        {
                            decimal disvalue = (decimal)itemdt.TotalSys * (decimal)saleAR.DisRate / 100;
                            revenueAccAmount = (decimal)itemdt.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)itemdt.TotalSys;
                        }
                    }
                    inventoryAccAmount = (decimal)_cost * (decimal)@Qty;
                    COGSAccAmount = (decimal)_cost * (decimal)@Qty;
                    #region InventoryAccount                     
                    var glAccInven = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
                    var journalDetail = journalEntryDetail.FirstOrDefault(w => w.ItemID == inventoryAccID) ?? new JournalEntryDetail();
                    if (glAccInven.ID > 0)
                    {
                        if (journalDetail.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                            glAccInven.Balance += inventoryAccAmount;
                            //journalEntryDetail
                            journalDetail.Debit += inventoryAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccInven.Balance;
                            accBalance.Debit += inventoryAccAmount;
                        }
                        else
                        {
                            glAccInven.Balance += inventoryAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = inventoryAccID,
                                Debit = inventoryAccAmount,
                            });
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = saleAR.PostingDate,
                                Origin = docType.ID,
                                OriginNo = saleAR.InvoiceNo,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + "-" + glAccInven.Code,
                                CumulativeBalance = glAccInven.Balance,
                                Debit = inventoryAccAmount,
                                LocalSetRate = (decimal)saleAR.LocalSetRate,
                                GLAID = inventoryAccID,
                                Effective = EffectiveBlance.Debit
                            });
                        }
                        _context.Update(glAccInven);
                        // _context.SaveChanges();
                    }
                    #endregion
                    #region COGSAccount                     
                    var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                    if (glAccCOGSfifo.ID > 0)
                    {
                        var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                        if (listCOGSfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                            glAccCOGSfifo.Balance -= COGSAccAmount;
                            //journalEntryDetail
                            listCOGSfifo.Credit -= COGSAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                            accBalance.Credit -= COGSAccAmount;
                        }
                        else
                        {
                            glAccCOGSfifo.Balance += COGSAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = COGSAccID,
                                Credit = COGSAccAmount,
                                BPAcctID = Order.CusID
                            });
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                CumulativeBalance = glAccCOGSfifo.Balance,
                                Credit = COGSAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = COGSAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccCOGSfifo);

                    }
                    #endregion
                    #region RevenueAccount  
                    if (revenueAccAmount > 0)
                    {
                        var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                        if (glAccRevenfifo.ID > 0)
                        {
                            var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                            if (listRevenfifo.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                                glAccRevenfifo.Balance -= revenueAccAmount;
                                //journalEntryDetail
                                listRevenfifo.Credit += revenueAccAmount;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                accBalance.Credit += revenueAccAmount;
                            }
                            else
                            {
                                glAccRevenfifo.Balance += revenueAccAmount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = revenueAccID,
                                    Credit = revenueAccAmount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                    CumulativeBalance = glAccRevenfifo.Balance,
                                    Credit = revenueAccAmount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = revenueAccID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(glAccRevenfifo);
                        }
                    }
                    else if (revenueAccAmount < 0)
                    {
                        var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                        if (glAccRevenfifo.ID > 0)
                        {
                            var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                            if (listRevenfifo.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                                glAccRevenfifo.Balance += revenueAccAmount * -1;
                                //journalEntryDetail
                                listRevenfifo.Debit += revenueAccAmount * -1;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                accBalance.Debit += revenueAccAmount * -1;
                            }
                            else
                            {
                                glAccRevenfifo.Balance += revenueAccAmount * -1;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = revenueAccID,
                                    Debit = revenueAccAmount * -1,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                    CumulativeBalance = glAccRevenfifo.Balance,
                                    Debit = revenueAccAmount * -1,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = revenueAccID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(glAccRevenfifo);
                        }
                    }
                    #endregion
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == Order.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = itemdt.LineID,
                        TypeItem = SaleCopyType.SaleAREdite.ToString(),
                        WarehouseID = Order.WarehouseID,
                        BranchID = Order.BranchID,
                        UserID = Order.UserID,
                        ItemID = itemdt.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = (int)itemmaster.InventoryUoMID,
                        InvoiceNo = Order.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemmaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = Order.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = @Qty,
                        Cost = _cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * _cost),
                        Trans_Valuse = @Qty * _cost,
                        LocalCurID = Order.LocalCurID,
                        LocalSetRate = Order.LocalSetRate,
                        SeriesDetailID = Order.SeriesDID,
                        SeriesID = Order.SeriesID,
                        DocumentTypeID = Order.DocTypeID,
                        CompanyID = Order.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }
            }
            foreach (var itemdt in SaleAREditeDetailHistory.Where(w => w.Qty == 0 && w.TotalSys != 0))
            {
                var itemmaster = _context.ItemMasterDatas.FirstOrDefault(w => !w.Delete && w.ID == itemdt.ItemID);
                int revenueAccID = 0;
                decimal revenueAccAmount = 0;
                if (itemmaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var itemAccs = _context.ItemAccountings.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == saleAR.WarehouseID).ToList();

                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == itemdt.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null)
                    {
                        revenueAcc.ID = revenueAccID;
                    }
                    if (saleAR.DisRate > 0)
                    {
                        decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                        revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = ((decimal)itemdt.TotalSys);
                    }
                }

                else if (itemmaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemmaster.ItemGroup1ID).ToList();
                    var revenueAcc = (from ia in itemAccs
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null)
                    {
                        revenueAccID = revenueAcc.ID;
                    }
                    if (saleAR.DisRate > 0)
                    {
                        decimal disvalue = ((decimal)itemdt.TotalSys) * (decimal)saleAR.DisRate / 100;
                        revenueAccAmount = ((decimal)itemdt.TotalSys) - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = ((decimal)itemdt.TotalSys);
                    }
                }
                #region RevenueAccount  
                if (revenueAccAmount > 0)
                {
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                else if (revenueAccAmount < 0)
                {
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance += revenueAccAmount * -1;
                            //journalEntryDetail
                            listRevenfifo.Debit += revenueAccAmount * -1;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Debit += revenueAccAmount * -1;
                        }
                        else
                        {
                            glAccRevenfifo.Balance += revenueAccAmount * -1;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Debit = revenueAccAmount * -1,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Debit = revenueAccAmount * -1,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Debit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                #endregion
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }

        #endregion
        //==========attchment of contract template====
        public List<AttachmentFileOfContractTemplate> CreateDefaultRowAttachment(int num, string lineIdM = "", int number = 0)
        {
            List<AttachmentFileOfContractTemplate> lstsam = new();
            for (var i = 0; i < num - number; i++)
            {
                //string lineId = DateTime.Now.Ticks.ToString();
                AttachmentFileOfContractTemplate lstam = new()
                {
                    TargetPath = "",
                    AttachmentDate = "",
                    LineID = DateTime.Now.Ticks.ToString(),
                    LineMID = lineIdM,

                };
                lstsam.Add(lstam);
            }
            return lstsam;
        }
        public async Task<List<AttachmentFileOfContractTemplate>> GetAttachmentAsync(int id, string key)
        {
            int count;
            List<AttachmentFileOfContractTemplate> stageatt = new();


            if (id != 0)
            {
                var list = (from stgattach in _context.AttachmentFileOfContractTemplates.Where(i => i.ID == id)
                            select new AttachmentFileOfContractTemplate
                            {
                                ID = stgattach.ID,
                                LineID = $"{DateTime.Now.Ticks}{stgattach.ID + 1}",
                                LineMID = key,
                                TargetPath = stgattach.TargetPath,
                                FileName = stgattach.FileName,
                                AttachmentDate = stgattach.AttachmentDate,

                            }).ToList();
                count = list.Count;
                if (count < 10)
                {
                    var lst = CreateDefaultRowAttachment(10, key, count);
                    list.AddRange(lst);
                }
                return await Task.FromResult(list);
            }
            else
            {
                string lineId = DateTime.Now.Ticks.ToString();
                var lis = CreateDefaultRowAttachment(10, key, 0);
                stageatt.AddRange(lis);
                return await Task.FromResult(stageatt);
            }
        }
        //======end attchment contract template=====
        public FreightSaleView GetFreights()
        {
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            //var taxGselectLists = new SelectList(taxGroup, "ID", "Name");
            var freightDetails = (from fre in _context.Freights
                                  select new FreightSaleDetailViewModel
                                  {
                                      Amount = 0,
                                      FreightID = fre.ID,
                                      ID = 0,
                                      FreightSaleID = 0,
                                      Name = fre.Name,
                                      TaxGroupSelect = taxGroup.Select(c => new SelectListItem
                                      {
                                          Value = c.ID.ToString(),
                                          Text = $"{c.Code}-{c.Name}",
                                      }).ToList(),
                                      TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                                   let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                                   select new TaxGroupViewModel
                                                   {
                                                       ID = t.ID,
                                                       //GLID = tg.GLID,
                                                       Name = t.Name,
                                                       Code = t.Code,
                                                       Effectivefrom = tgds.EffectiveFrom,
                                                       Rate = tgds.Rate,
                                                       Type = (int)t.Type,
                                                   }
                                         ).ToList(),
                                      TaxGroup = "",
                                      TaxGroupID = 0,
                                      TaxRate = 0,
                                      TotalTaxAmount = 0,
                                  }).ToList();
            var freights = new FreightSaleView
            {
                AmountReven = 0,
                FreightSaleDetailViewModels = freightDetails,
                ID = 0,
                SaleID = 0,
                SaleType = SaleCopyType.None,
                TaxSumValue = 0,
            };
            return freights;
        }
        public IEnumerable<GroupDUoM> GetAllGroupDefind()
        {
            var uom = _context.UnitofMeasures.Where(u => u.Delete == false);
            var guom = _context.GroupUOMs.Where(g => g.Delete == false);
            var duom = _context.GroupDUoMs.Where(o => o.Delete == false);
            var list = (from du in duom
                        join g_uom in guom on du.GroupUoMID equals g_uom.ID
                        join buo in uom on du.BaseUOM equals buo.ID
                        join auo in uom on du.AltUOM equals auo.ID
                        where g_uom.Delete == false
                        select new GroupDUoM
                        {
                            ID = du.ID,
                            GroupUoMID = du.GroupUoMID,
                            UoMID = du.UoMID,
                            AltQty = du.AltQty,
                            BaseUOM = du.BaseUOM,
                            AltUOM = du.AltUOM,
                            BaseQty = du.BaseQty,
                            Factor = du.Factor,
                            UnitofMeasure = new UnitofMeasure
                            {
                                ID = auo.ID,
                                Name = buo.Name,
                                AltUomName = auo.Name
                            },
                        }
                );
            return list;
        }
        public Dictionary<int, string> Typevat => EnumHelper.ToDictionary(typeof(VatType));
        public List<ReportPurchaseAP> GetSaleAPEdits(int branchID, int warehouseID, string postingDate, string documentDate, string deliveryDate, string search, bool check)
        {
            List<SaleAREdite> purchaseAPEdits = new();
            if (branchID != 0 && warehouseID != 0 && postingDate == null && documentDate == null && deliveryDate == null && search == null && check == false)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.WarehouseID == warehouseID).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate != null && documentDate == null && deliveryDate == null && search == null && check == false)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.WarehouseID == warehouseID && w.PostingDate == Convert.ToDateTime(postingDate)).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate != null && documentDate != null && deliveryDate == null && search == null && check == false)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.WarehouseID == warehouseID && w.PostingDate >= Convert.ToDateTime(postingDate) && w.DocumentDate <= Convert.ToDateTime(documentDate)).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate != null && documentDate != null && deliveryDate != null && search == null && check == false)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.WarehouseID == warehouseID && w.PostingDate >= Convert.ToDateTime(postingDate) && w.DocumentDate <= Convert.ToDateTime(documentDate) && w.DueDate <= Convert.ToDateTime(deliveryDate)).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate != null && documentDate != null && deliveryDate != null || search != null && check == false)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.InvoiceNo == search).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate != null && documentDate != null && deliveryDate != null && search != null || check == true)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate == null && documentDate != null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.DocumentDate == Convert.ToDateTime(documentDate)).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate == null && documentDate != null && deliveryDate != null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.DueDate >= Convert.ToDateTime(deliveryDate) && w.DocumentDate <= Convert.ToDateTime(documentDate)).ToList();
            }
            else if (branchID != 0 && warehouseID != 0 && postingDate == null && documentDate == null && deliveryDate != null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.DueDate == Convert.ToDateTime(deliveryDate)).ToList();
            }
            else if (branchID != 0 && warehouseID == 0 && postingDate != null && documentDate == null && deliveryDate == null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.PostingDate == Convert.ToDateTime(postingDate)).ToList();
            }
            else if (branchID != 0 && warehouseID == 0 && postingDate == null && documentDate != null && deliveryDate == null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.DocumentDate == Convert.ToDateTime(documentDate)).ToList();
            }
            else if (branchID != 0 && warehouseID == 0 && postingDate == null && documentDate == null && deliveryDate != null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.DueDate == Convert.ToDateTime(deliveryDate)).ToList();
            }
            else if (branchID != 0 && warehouseID == 0 && postingDate != null && documentDate != null && deliveryDate == null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.PostingDate >= Convert.ToDateTime(postingDate) && w.DocumentDate <= Convert.ToDateTime(documentDate)).ToList();
            }
            else if (branchID != 0 && warehouseID == 0 && postingDate != null && documentDate != null && deliveryDate != null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.PostingDate >= Convert.ToDateTime(postingDate) && w.DocumentDate >= Convert.ToDateTime(documentDate) && w.DueDate >= Convert.ToDateTime(deliveryDate)).ToList();
            }
            else if (branchID != 0 && warehouseID == 0 && postingDate == null && documentDate != null && deliveryDate != null)
            {
                purchaseAPEdits = _context.SaleAREdites.Where(w => w.UserID == branchID && w.DocumentDate >= Convert.ToDateTime(documentDate) && w.DueDate >= Convert.ToDateTime(deliveryDate)).ToList();
            }
            else
            {
                return new List<ReportPurchaseAP>();
            }
            var list = (from s in purchaseAPEdits
                        join duc in _context.DocumentTypes on s.DocTypeID equals duc.ID
                        join cus in _context.BusinessPartners on s.UserID equals cus.ID
                        join us in _context.UserAccounts on s.UserID equals us.ID
                        select new ReportPurchaseAP
                        {
                            ID = s.SARID,
                            InvoiceNo = duc.Code + "-" + s.InvoiceNumber,
                            ExchangeRate = s.ExchangeRate,
                            UserName = us.Username,
                            BusinessName = cus.Name,
                            Balance_due = s.TotalAmount,
                            Balance_due_sys = s.TotalAmountSys,
                            Status = s.Status,
                            VatType = Typevat.Select(s => new SelectListItem
                            {
                                Value = s.Key.ToString(),
                                Text = s.Value
                            }).ToList(),
                        }).ToList();
            return list;
        }

        private void InsertFinancialAREdit(int inventoryAccID, int COGSAccID, List<JournalEntryDetail> journalEntryDetail, List<AccountBalance> accountBalance, decimal inventoryAccAmount,
                                            decimal COGSAccAmount, JournalEntry journalEntry, SaleAREdite Order, DocumentType docType, DocumentType douTypeID, GLAccount glAcc, string type)
        {
            if (type != "Delivery")
            {
                //inventoryAccID
                var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
                if (glAccInvenfifo.ID > 0)
                {
                    var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                    if (listInvenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        //journalEntryDetail
                        listInvenfifo.Credit += inventoryAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                        accBalance.Credit += inventoryAccAmount;
                    }
                    else
                    {
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = inventoryAccID,
                            Credit = inventoryAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                            CumulativeBalance = glAccInvenfifo.Balance,
                            Credit = inventoryAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = inventoryAccID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(glAccInvenfifo);
                }
                // COGS
                var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                if (glAccCOGSfifo.ID > 0)
                {
                    var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                    if (listCOGSfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        //journalEntryDetail
                        listCOGSfifo.Debit += COGSAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                        accBalance.Debit += COGSAccAmount;
                    }
                    else
                    {
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = COGSAccID,
                            Debit = COGSAccAmount,
                            BPAcctID = Order.CusID
                        });
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                            CumulativeBalance = glAccCOGSfifo.Balance,
                            Debit = COGSAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = COGSAccID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(glAccCOGSfifo);
                }
                _context.SaveChanges();
            }
        }

        public SaleARUpdateViewModel FindSaleAREdit(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleAR = (from ar in _context.SaleAREdites.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                          let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                          let fs = _context.FreightSales.Where(i => i.SaleID == ar.SARID && i.SaleType == SaleCopyType.AR).FirstOrDefault() ?? new FreightSale()
                          let reqBy = _context.Employees.FirstOrDefault(i => i.ID == ar.RequestedBy) ?? new HumanResourcesEmployee()
                          let shipBy = _context.Employees.FirstOrDefault(i => i.ID == ar.ShippedBy) ?? new HumanResourcesEmployee()
                          let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == ar.ReceivedBy) ?? new HumanResourcesEmployee()
                          select new SaleARViewModel
                          {

                              RequestedByID = reqBy.ID,
                              ShippedByID = shipBy.ID,
                              ReceivedByID = receiveBy.ID,
                              ShipTo = ar.ShipTo,
                              BasedCopyKeys = ar.BasedCopyKeys,
                              RequestedByName = reqBy.Name,
                              ShippedByName = shipBy.Name,
                              ReceivedByName = receiveBy.Name,

                              BasedOn = ar.BaseOnID,
                              BaseOnID = ar.BaseOnID,
                              CopyKey = ar.CopyKey,
                              CopyType = ar.CopyType,
                              BranchID = ar.BranchID,
                              ChangeLog = ar.ChangeLog,
                              CompanyID = ar.CompanyID,
                              CusID = ar.CusID,
                              DeliveryDate = ar.DueDate,
                              DueDate = ar.DueDate,
                              DisRate = (decimal)ar.DisRate,
                              DisValue = (decimal)ar.DisValue,
                              DocTypeID = ar.DocTypeID,
                              DocumentDate = ar.DocumentDate,
                              ExchangeRate = (decimal)ar.ExchangeRate,
                              FreightAmount = ar.FreightAmount,
                              FreightAmountSys = ar.FreightAmountSys,
                              DownPayment = ar.DownPayment,
                              DownPaymentSys = ar.DownPaymentSys,
                              SaleEmID = ar.SaleEmID,
                              SaleEmName = sem.Name ?? "",
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                  SaleID = ar.SARID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = ar.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                              InvoiceNumber = ar.InvoiceNumber,
                              LocalCurID = ar.LocalCurID,
                              LocalSetRate = (decimal)ar.LocalSetRate,
                              PostingDate = ar.PostingDate,
                              PriceListID = ar.PriceListID,
                              RefNo = ar.RefNo,
                              Remarks = ar.Remarks,
                              SaleCurrencyID = ar.SaleCurrencyID,
                              SeriesDID = ar.SeriesDID,
                              SeriesID = ar.SeriesID,
                              SARID = ar.SARID,
                              Status = ar.Status,
                              SubTotal = (decimal)ar.SubTotal,
                              SubTotalAfterDis = ar.SubTotalAfterDis,
                              SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                              SubTotalBefDis = ar.SubTotalBefDis,
                              SubTotalBefDisSys = ar.SubTotalBefDisSys,
                              SubTotalSys = (decimal)ar.SubTotalSys,
                              TotalAmount = (decimal)ar.TotalAmount,
                              TotalAmountSys = (decimal)ar.TotalAmountSys,
                              TypeDis = ar.TypeDis,
                              UserID = ar.UserID,
                              VatRate = (decimal)ar.VatRate,
                              VatValue = (decimal)ar.VatValue,
                              WarehouseID = ar.WarehouseID,
                              AppliedAmount = (decimal)ar.AppliedAmount,
                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sAr in saleAR
                        join sArd in _context.SaleAREditeDetails on sAr.SARID equals sArd.SARID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        group new { sAr, sArd, item, cur } by new { sArd.ItemID, sArd.LineID } into g
                        let datas = g.FirstOrDefault()
                        select new SaleARDetailViewModel
                        {
                            LineID = string.IsNullOrWhiteSpace(datas.sArd.LineID) ? datas.sArd.LineID.ToString() : datas.sArd.LineID,
                            FinDisRate = datas.sArd.FinDisRate,
                            FinDisValue = datas.sArd.FinDisValue,
                            FinTotalValue = datas.sArd.FinTotalValue,
                            TaxOfFinDisValue = datas.sArd.TaxOfFinDisValue,
                            ItemCode = datas.sArd.ItemCode,
                            BarCode = datas.item.Barcode,
                            Currency = datas.cur.Description,
                            TotalSys = (decimal)datas.sArd.TotalSys,
                            SQDID = datas.sArd.SQDID,
                            SODID = datas.sArd.SODID,
                            SDDID = datas.sArd.SDDID,
                            SARDID = datas.sArd.SARDID,
                            SARID = datas.sAr.SARID,
                            Cost = (decimal)datas.sArd.Cost,
                            CurrencyID = datas.cur.ID,
                            DisRate = (decimal)datas.sArd.DisRate,
                            DisValue = (decimal)datas.sArd.DisValue,
                            ItemNameEN = datas.item.EnglishName,
                            ItemNameKH = datas.item.KhmerName,
                            GUomID = datas.item.GroupUomID,
                            ItemID = datas.item.ID,
                            ItemType = datas.item.Type,
                            Process = datas.item.Process,
                            Qty = (decimal)g.Sum(x => x.sArd.Qty),
                            Factor = (decimal)datas.sArd.Factor,
                            OpenQty = (decimal)g.Sum(x => x.sArd.OpenQty),
                            UnitPrice = (decimal)datas.sArd.UnitPrice,
                            UomName = datas.sArd.UomName,
                            UomID = datas.sArd.UomID,
                            TaxGroupID = datas.sArd.TaxGroupID,
                            TaxRate = datas.sArd.TaxRate,
                            Remarks = datas.sArd.Remarks,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == datas.sArd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)datas.sArd.TotalWTax,
                            TaxValue = datas.sArd.TaxValue,
                            Total = (decimal)datas.sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == datas.item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == datas.sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == datas.item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == datas.item.ID && i.PriceListID == datas.sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new SaleARUpdateViewModel
            {
                SaleAR = saleAR.FirstOrDefault(),
                SaleARDetails = _sqd,
            };
            return data;
        }

        public IEnumerable<dynamic> GetSaleAREditCopy(int cusId)
        {
            var data = (from sd in _context.SaleAREdites.Where(s => s.Status == "open" && s.CusID == cusId)
                        join doctype in _context.DocumentTypes on sd.DocTypeID equals doctype.ID
                        let sem = _context.Employees.FirstOrDefault(i => sd.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let sdd = _context.SaleARDetails.Where(i => i.SARID == sd.SARID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == sd.SaleCurrencyID)
                        select new
                        {
                            sd.SARID,
                            sd.CusID,
                            BasedOn = sd.SARID,
                            sd.BranchID,
                            sd.WarehouseID,
                            sd.UserID,
                            sd.SaleCurrencyID,
                            sd.CompanyID,
                            sd.DocTypeID,
                            sd.SeriesID,
                            sd.SeriesDID,
                            InvoiceNumber = $"{doctype.Code}-{sd.InvoiceNumber}",
                            sd.RefNo,
                            InvoiceNo = sd.InvoiceNumber,
                            sd.ExchangeRate,
                            sd.PostingDate,
                            sd.DeliveryDate,
                            sd.DocumentDate,
                            sd.IncludeVat,
                            sd.Status,
                            Currency = cur.Description,
                            sd.SubTotal,
                            sd.TotalAmount,
                            sd.SubTotalSys,
                            sd.DisRate,
                            sd.DisValue,
                            sd.TypeDis,
                            sd.Remarks,
                            sd.VatRate,
                            sd.VatValue,
                            sd.FeeNote,
                            sd.FeeAmount,
                            sd.TotalAmountSys,
                            sd.CopyType,
                            sd.CopyKey,
                            sd.BasedCopyKeys,
                            sd.ChangeLog,
                            sd.PriceListID,
                            sd.LocalCurID,
                            sd.LocalSetRate,
                            SaleOrderDetails = sdd,
                            sd.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public SaleARUpdateViewModel GetSaleAREditDetailCopy(string number, int seriesId, int comId)
        {

            bool copied;
            int count1, count2 = 0;
            var datas = FindSaleAREdit(number, seriesId, comId);
            var master = datas.SaleAR;
            count1 = datas.SaleARDetails.Count;
            var detail = datas.SaleARDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = detail.Count;
            copied = count1 != count2 ? true : false;
            var data = new SaleARUpdateViewModel
            {
                SaleAR = master,
                SaleARDetails = detail,
            };

            checkCopy(detail, master, copied);
            data.SaleARDetails.ForEach(i =>
            {
                i.LineID = i.LineID;
                i.SaleCopyType = SaleCopyType.SaleAREdite;
            });
            data.SaleAR.BaseOnID = data.SaleAR.SARID;


            return data;
        }
        //IssuseInStockMaterialDelivery
        public void IssuseInStockMaterialDelivery(int orderid, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var saledeli = _context.SaleDeliveries.First(w => w.SDID == orderid);
            var saleDD = _context.SaleDeliveryDetails.Where(w => w.SDID == orderid);
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == saledeli.CompanyID);
            var docType = _context.DocumentTypes.Find(saledeli.DocTypeID);
            var series = _context.Series.Find(saledeli.SeriesID);
            var glAccs = _context.GLAccounts.Where(i => i.IsActive).ToList();
            var warehouse = _context.Warehouses.Find(saledeli.WarehouseID) ?? new Warehouse();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.BranchID= saledeli.BranchID;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = saledeli.UserID;
                journalEntry.TransNo = saledeli.InvoiceNumber;
                journalEntry.PostingDate = saledeli.PostingDate;
                journalEntry.DocumentDate = saledeli.DocumentDate;
                journalEntry.DueDate = saledeli.DueDate;
                journalEntry.SSCID = saledeli.SaleCurrencyID;
                journalEntry.LLCID = saledeli.LocalCurID;
                journalEntry.CompanyID = saledeli.CompanyID;
                journalEntry.LocalSetRate = (decimal)saledeli.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + saledeli.InvoiceNumber;
                _context.Update(journalEntry);
                _context.SaveChanges();
            }
            //IssuseInstock Deliverry
            foreach (var deli in saleDD)
            {
                int inventoryAccID = 0, COGSAccID = 0;
                decimal inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == deli.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == deli.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var itemAccs = _context.ItemAccountings.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in glAccs on ia.InventoryAccount equals gl.Code
                                        select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in glAccs on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID);
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in glAccs on ia.InventoryAccount equals gl.Code
                                        select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in glAccs on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                }
                if (itemMaster.Process != "Standard")
                {
                    var warehouseSummary = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == deli.ItemID);
                    var waredetials = _context.WarehouseDetails.Where(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == deli.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == saledeli.WarehouseID && i.ItemID == deli.ItemID);
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = deli.Qty * deli.Factor;
                    double Cost = 0;
                    //WerehouseSummary
                    //item_warehouse_material.Committed -= (double)deli.Qty;
                    warehouseSummary.InStock -= @Qty;
                    //Itemmasterdata
                    itemMaster.StockIn -= (double)deli.Qty;
                    _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                    if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                    {
                        if (serials.Count > 0)
                        {
                            List<WareForAudiView> wareForAudis = new();
                            foreach (var s in serials)
                            {
                                if (s.SerialNumberSelected != null)
                                {
                                    foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                    {
                                        var waredetial = waredetials.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            wareForAudis.Add(new WareForAudiView
                                            {
                                                Cost = waredetial.Cost,
                                                Qty = waredetial.InStock,
                                                ExpireDate = waredetial.ExpireDate,
                                            });
                                            Cost = waredetial.Cost;
                                            waredetial.InStock -= 1;
                                            // insert to warehouse detail
                                            _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                            var stockout = new StockOut
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (decimal)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = 1,
                                                ItemID = waredetial.ItemID,
                                                Location = waredetial.Location,
                                                LotNumber = waredetial.LotNumber,
                                                MfrDate = waredetial.MfrDate,
                                                MfrSerialNumber = waredetial.MfrSerialNumber,
                                                MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                MfrWarDateStart = waredetial.MfrWarDateStart,
                                                ProcessItem = ProcessItem.SEBA,
                                                SerialNumber = waredetial.SerialNumber,
                                                PlateNumber = waredetial.PlateNumber,
                                                Color = waredetial.Color,
                                                Brand = waredetial.Brand,
                                                Condition = waredetial.Condition,
                                                Type = waredetial.Type,
                                                Power = waredetial.Power,
                                                Year = waredetial.Year,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = deli.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = _expdate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = waredetial.ID,
                                                TransID = saledeli.SDID,
                                                Contract = itemMaster.ContractID
                                            };
                                            _inventoryAccAmount = (decimal)waredetial.Cost;
                                            _COGSAccAmount = (decimal)waredetial.Cost;
                                            _context.StockOuts.Add(stockout);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialDelivery(
                                            inventoryAccID,
                                            COGSAccID,
                                            journalEntryDetail,
                                            accountBalance,
                                            _inventoryAccAmount,
                                            _COGSAccAmount,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                                    }
                                }
                            }

                            wareForAudis = (from wa in wareForAudis
                                            group wa by wa.Cost into g
                                            let wha = g.FirstOrDefault()
                                            select new WareForAudiView
                                            {
                                                Qty = g.Sum(i => i.Qty),
                                                Cost = wha.Cost,
                                                ExpireDate = wha.ExpireDate,
                                            }).ToList();
                            if (wareForAudis.Any())
                            {
                                foreach (var i in wareForAudis)
                                {
                                    // Insert to Inventory Audit
                                    var inventory_audit = _context.InventoryAudits
                                            .Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    var inventory = new InventoryAudit
                                    {
                                        ID = 0,
                                        LineID = deli.LineID,
                                        TypeItem = SaleCopyType.Delivery.ToString(),
                                        WarehouseID = saledeli.WarehouseID,
                                        BranchID = saledeli.BranchID,
                                        UserID = saledeli.UserID,
                                        ItemID = deli.ItemID,
                                        CurrencyID = saledeli.SaleCurrencyID,
                                        UomID = baseUOM.BaseUOM,
                                        InvoiceNo = saledeli.InvoiceNo,
                                        Trans_Type = docType.Code,
                                        Process = itemMaster.Process,
                                        SystemDate = DateTime.Now,
                                        PostingDate = saledeli.PostingDate,
                                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                        Qty = i.Qty * -1,
                                        Cost = i.Cost,
                                        Price = 0,
                                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                        Trans_Valuse = i.Qty * i.Cost * -1,
                                        ExpireDate = i.ExpireDate,
                                        LocalCurID = saledeli.LocalCurID,
                                        LocalSetRate = saledeli.LocalSetRate,
                                        CompanyID = saledeli.CompanyID,
                                        DocumentTypeID = docType.ID,
                                        SeriesID = saledeli.SeriesID,
                                        SeriesDetailID = saledeli.SeriesDID,
                                    };
                                    _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                    _context.InventoryAudits.Add(inventory);
                                    _context.SaveChanges();
                                }
                            }
                        }
                    }
                    else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                    {
                        if (batches.Count > 0)
                        {
                            List<WareForAudiView> wareForAudis = new();
                            foreach (var b in batches)
                            {
                                if (b.BatchNoSelected != null)
                                {
                                    foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                    {
                                        decimal selectedQty = sb.SelectedQty * (decimal)deli.Factor;
                                        var waredetial = waredetials.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            Cost = waredetial.Cost;
                                            wareForAudis.Add(new WareForAudiView
                                            {
                                                Cost = waredetial.Cost,
                                                Qty = (double)selectedQty,
                                                ExpireDate = waredetial.ExpireDate,
                                            });
                                            waredetial.InStock -= (double)selectedQty;

                                            // insert to waredetial
                                            var stockOut = new StockOut
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (decimal)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = selectedQty,
                                                ItemID = deli.ItemID,
                                                Location = waredetial.Location,
                                                MfrDate = waredetial.MfrDate,
                                                ProcessItem = ProcessItem.SEBA,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = deli.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = sb.ExpireDate,
                                                BatchAttr1 = waredetial.BatchAttr1,
                                                BatchAttr2 = waredetial.BatchAttr2,
                                                BatchNo = waredetial.BatchNo,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = waredetial.ID,
                                                TransID = saledeli.SDID,
                                            };
                                            _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                            _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                            _context.StockOuts.Add(stockOut);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialDelivery(
                                            inventoryAccID,
                                            COGSAccID,
                                            journalEntryDetail,
                                            accountBalance,
                                            _inventoryAccAmount,
                                            _COGSAccAmount,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                                    }
                                }
                            }

                            // insert to inventory audit
                            wareForAudis = (from wa in wareForAudis
                                            group wa by wa.Cost into g
                                            let wha = g.FirstOrDefault()
                                            select new WareForAudiView
                                            {
                                                Qty = g.Sum(i => i.Qty),
                                                Cost = wha.Cost,
                                                ExpireDate = wha.ExpireDate,
                                            }).ToList();
                            if (wareForAudis.Any())
                            {
                                foreach (var i in wareForAudis)
                                {
                                    var inventory_audit = _context.InventoryAudits
                                            .Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    var inventory = new InventoryAudit
                                    {
                                        ID = 0,
                                        LineID = deli.LineID,
                                        TypeItem = SaleCopyType.Delivery.ToString(),
                                        WarehouseID = saledeli.WarehouseID,
                                        BranchID = saledeli.BranchID,
                                        UserID = saledeli.UserID,
                                        ItemID = deli.ItemID,
                                        CurrencyID = saledeli.SaleCurrencyID,
                                        UomID = baseUOM.BaseUOM,
                                        InvoiceNo = saledeli.InvoiceNo,
                                        Trans_Type = docType.Code,
                                        Process = itemMaster.Process,
                                        SystemDate = DateTime.Now,
                                        PostingDate = saledeli.PostingDate,
                                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                        Qty = i.Qty * -1,
                                        Cost = i.Cost,
                                        Price = 0,
                                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                        Trans_Valuse = i.Qty * i.Cost * -1,
                                        ExpireDate = i.ExpireDate,
                                        LocalCurID = saledeli.LocalCurID,
                                        LocalSetRate = saledeli.LocalSetRate,
                                        CompanyID = saledeli.CompanyID,
                                        DocumentTypeID = docType.ID,
                                        SeriesID = saledeli.SeriesID,
                                        SeriesDetailID = saledeli.SeriesDID,
                                    };
                                    _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                    _context.InventoryAudits.Add(inventory);
                                    _context.SaveChanges();
                                }
                            }
                        }
                    }
                    else
                    {
                        List<WarehouseDetail> _whlists = waredetials.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                        if (warehouse.IsAllowNegativeStock && _whlists.Count == 0) _whlists = waredetials.ToList();
                        foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                        {
                            InventoryAudit item_inventory_audit = new();
                            WarehouseDetail item_IssusStock = item_warehouse;
                            @Check_Stock = item_warehouse.InStock - @Qty;
                            if (@Check_Stock < 0)
                            {
                                @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                @IssusQty = @Qty - @Remain;
                                if (@Remain <= 0)
                                {
                                    @Qty = 0;
                                }
                                else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                {
                                    @IssusQty = @Qty;
                                }
                                else
                                {
                                    @Qty = @Remain;
                                }
                                if (itemMaster.Process == "FIFO")
                                {
                                    double _cost = item_IssusStock.Cost;
                                    item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)item_warehouse.Cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.FIFO,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = item_IssusStock.Cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                        item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                        item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    inventoryAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    COGSAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                                else if (itemMaster.Process == "Average")
                                {
                                    item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {

                                        var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        double cost = warehouse_summary.Cost;
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.Average,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);

                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                        item_inventory_audit.Trans_Valuse = @IssusQty * cost * -1;
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    double @AvgCost = _utility.CalAVGCost(deli.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                    inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    _utility.UpdateAvgCost(item_warehouse.ItemID, saledeli.WarehouseID, deli.GUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.UpdateBomCost(item_warehouse.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                            }
                            else
                            {
                                if (itemMaster.Process == "FIFO")
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)item_warehouse.Cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.FIFO,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = item_IssusStock.Cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) - (@IssusQty * item_IssusStock.Cost);
                                        item_inventory_audit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    inventoryAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    COGSAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                                else if (itemMaster.Process == "Average")
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    item_IssusStock.InStock = @FIFOQty;
                                    if (@IssusQty > 0)
                                    {
                                        var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        double cost = warehouse_summary.Cost;
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.Average,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);

                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                        item_inventory_audit.Trans_Valuse = @IssusQty * cost * -1;
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    double @AvgCost = _utility.CalAVGCost(deli.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                    inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    _utility.UpdateAvgCost(deli.ItemID, saledeli.WarehouseID, deli.GUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.UpdateBomCost(deli.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                                waredetials = new List<WarehouseDetail>();
                                break;
                            }
                        }
                    }
                    _context.WarehouseSummary.Update(warehouseSummary);
                    _context.ItemMasterDatas.Update(itemMaster);
                    _context.SaveChanges();
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == deli.ItemID && w.UomID == deli.UomID && w.PriceListID == saledeli.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * deli.Qty * saledeli.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * deli.Qty * saledeli.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = deli.LineID,
                        TypeItem = SaleCopyType.Delivery.ToString(),
                        WarehouseID = saledeli.WarehouseID,
                        BranchID = saledeli.BranchID,
                        UserID = saledeli.UserID,
                        ItemID = deli.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = saledeli.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = saledeli.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = deli.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - deli.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (deli.Qty * priceListDetail.Cost),
                        Trans_Valuse = deli.Qty * priceListDetail.Cost * -1,
                        LocalCurID = saledeli.LocalCurID,
                        LocalSetRate = saledeli.LocalSetRate,
                        SeriesDetailID = saledeli.SeriesDID,
                        SeriesID = saledeli.SeriesID,
                        DocumentTypeID = saledeli.DocTypeID,
                        CompanyID = saledeli.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }

                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialDelivery(
                                            inventoryAccID,
                                            COGSAccID,
                                            journalEntryDetail,
                                            accountBalance,
                                            inventoryAccAmount,
                                            COGSAccAmount,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                }
            }
            //IssuseInstoer Materia
            foreach (var item in saleDD)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = (item.Qty * orft.Factor) * (bomd.Qty * gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        int inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == saledeli.WarehouseID && i.ItemID == item_detail.ItemID);
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saledeli.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saledeli.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            inventoryAccIDAvg = inventoryAcc.ID;
                            COGSAccIDAvg = COGSAcc.ID;
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault();
                            inventoryAccIDAvg = inventoryAcc.ID;
                            COGSAccIDAvg = COGSAcc.ID;
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = saledeli.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.Delivery,
                                        FromWareDetialID = item_IssusStock.ID,
                                        OutStockFrom = saledeli.SDID,
                                        BPID = saledeli.CusID,
                                        TransID = saledeli.SDID,
                                    };
                                    _context.StockOuts.Add(stockOuts);

                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                    item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                    item_inventory_audit.BranchID = saledeli.BranchID;
                                    item_inventory_audit.UserID = saledeli.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                    item_inventory_audit.Trans_Type = docType.Code;
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = saledeli.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                    item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                    item_inventory_audit.SeriesID = saledeli.SeriesID;
                                    item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                    item_inventory_audit.CompanyID = saledeli.CompanyID;
                                }
                                inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.UomID == item_detail.UomID && w.WarehouseID == saledeli.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = saledeli.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.Delivery,
                                        FromWareDetialID = item_IssusStock.ID,
                                        OutStockFrom = saledeli.SDID,
                                        BPID = saledeli.CusID,
                                        TransID = saledeli.SDID,
                                    };
                                    _context.StockOuts.Add(stockOuts);

                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                    item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                    item_inventory_audit.BranchID = saledeli.BranchID;
                                    item_inventory_audit.UserID = saledeli.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                    item_inventory_audit.Trans_Type = docType.Code;
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = saledeli.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                    item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                    item_inventory_audit.SeriesID = saledeli.SeriesID;
                                    item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                    item_inventory_audit.CompanyID = saledeli.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item_detail.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                _utility.UpdateAvgCost(item_detail.ItemID, saledeli.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            _context.WarehouseDetails.Update(item_IssusStock);
                            _context.InventoryAudits.Add(item_inventory_audit);
                            _context.SaveChanges();
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.UomID == item_detail.UomID && w.WarehouseID == saledeli.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item_detail.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, saledeli.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) - (@IssusQty * item_IssusStock.Cost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item_detail.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, saledeli.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }

                        InsertFinancialDelivery(
                                            inventoryAccIDAvg,
                                            COGSAccIDAvg,
                                            journalEntryDetail,
                                            accountBalance,
                                            inventoryAccAmountAvg,
                                            COGSAccAmountAvg,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID);
            journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
            journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
            _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
            _context.AccountBalances.UpdateRange(accountBalance);
            _context.SaveChanges();
        }
        #region IssuseInStockSaleARBasic
        public void IssuseInStockSaleARBasic(
            int orderid, string type, List<SaleARDPINCN> ards,
            SaleGLAccountDetermination saleGlDeter,
            FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var Order = _context.SaleARs.First(w => w.SARID == orderid);
            var OrderDetails = _context.SaleARDetails.Where(w => w.SARID == orderid).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.Series.Find(Order.SeriesID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);

                if (itemMaster.Process != "Standard")
                {
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = item.Qty * item.Factor;
                    double Cost = 0;
                    var wareSum = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID);
                    var wareDetails = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item.ItemID);
                    if (wareSum != null)
                    {
                        if (Order.CopyType == SaleCopyType.Order)
                        {
                            wareSum.Committed -= (double)item.Qty;
                            itemMaster.StockCommit -= (double)item.Qty;
                        }
                        //WerehouseSummary
                        wareSum.InStock -= @Qty;
                        //Itemmasterdata
                        itemMaster.StockIn = wareSum.InStock - @Qty;
                        _context.WarehouseSummary.Update(wareSum);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _utility.UpdateItemAccounting(_itemAcc, wareSum);
                    }

                    if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                    {
                        if (serials.Count > 0)
                        {
                            List<WareForAudiView> wareForAudis = new();
                            foreach (var s in serials)
                            {
                                if (s.SerialNumberSelected != null)
                                {
                                    foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                    {
                                        var waredetial = wareDetails.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            Cost = waredetial.Cost;
                                            wareForAudis.Add(new WareForAudiView
                                            {
                                                Cost = waredetial.Cost,
                                                Qty = waredetial.InStock,
                                                ExpireDate = waredetial.ExpireDate,
                                            });
                                            waredetial.InStock -= 1;
                                            // insert to warehouse detail
                                            _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                            var stockOut = new StockOut
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (decimal)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = 1,
                                                ItemID = waredetial.ItemID,
                                                Location = waredetial.Location,
                                                LotNumber = waredetial.LotNumber,
                                                MfrDate = waredetial.MfrDate,
                                                MfrSerialNumber = waredetial.MfrSerialNumber,
                                                MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                MfrWarDateStart = waredetial.MfrWarDateStart,
                                                ProcessItem = ProcessItem.SEBA,
                                                SerialNumber = waredetial.SerialNumber,
                                                PlateNumber = waredetial.PlateNumber,
                                                Color = waredetial.Color,
                                                Brand = waredetial.Brand,
                                                Condition = waredetial.Condition,
                                                Type = waredetial.Type,
                                                Power = waredetial.Power,
                                                Year = waredetial.Year,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = _expdate,
                                                TransType = TransTypeWD.AR,
                                                FromWareDetialID = waredetial.ID,
                                                TransID = Order.SARID,
                                                Contract = itemMaster.ContractID,
                                                BPID = Order.CusID
                                            };
                                            _inventoryAccAmount = (decimal)waredetial.Cost;
                                            _COGSAccAmount = (decimal)waredetial.Cost;
                                            _context.StockOuts.Add(stockOut);
                                            _context.SaveChanges();
                                        }

                                    }
                                }
                            }

                            // Insert to Inventory Audit
                            wareForAudis = (from wa in wareForAudis
                                            group wa by wa.Cost into g
                                            let wha = g.FirstOrDefault()
                                            select new WareForAudiView
                                            {
                                                Qty = g.Sum(i => i.Qty),
                                                Cost = wha.Cost,
                                                ExpireDate = wha.ExpireDate,
                                            }).ToList();
                            if (wareForAudis.Any())
                            {
                                foreach (var i in wareForAudis)
                                {
                                    var inventory_audit = _context.InventoryAudits
                                .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var inventory = new InventoryAudit
                                    {
                                        ID = 0,
                                        LineID = item.LineID,
                                        TypeItem = SaleCopyType.AR.ToString(),
                                        WarehouseID = Order.WarehouseID,
                                        BranchID = Order.BranchID,
                                        UserID = Order.UserID,
                                        ItemID = item.ItemID,
                                        CurrencyID = Order.SaleCurrencyID,
                                        UomID = baseUOM.BaseUOM,
                                        InvoiceNo = Order.InvoiceNo,
                                        Trans_Type = docType.Code,
                                        Process = itemMaster.Process,
                                        SystemDate = DateTime.Now,
                                        PostingDate = Order.PostingDate,
                                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                        Qty = i.Qty * -1,
                                        Cost = i.Cost,
                                        Price = 0,
                                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                        Trans_Valuse = i.Qty * i.Cost * -1,
                                        ExpireDate = i.ExpireDate,
                                        LocalCurID = Order.LocalCurID,
                                        LocalSetRate = Order.LocalSetRate,
                                        CompanyID = Order.CompanyID,
                                        DocumentTypeID = docType.ID,
                                        SeriesID = Order.SeriesID,
                                        SeriesDetailID = Order.SeriesDID,
                                    };
                                    _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                    _context.InventoryAudits.Add(inventory);
                                    _context.SaveChanges();
                                }
                            }
                        }
                    }
                    else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                    {
                        if (batches.Count > 0)
                        {
                            List<WareForAudiView> wareForAudis = new();
                            foreach (var b in batches)
                            {
                                if (b.BatchNoSelected != null)
                                {
                                    foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                    {
                                        decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                        var waredetial = wareDetails.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            wareForAudis.Add(new WareForAudiView
                                            {
                                                Cost = waredetial.Cost,
                                                Qty = (double)selectedQty,
                                                ExpireDate = waredetial.ExpireDate,
                                            });
                                            Cost = waredetial.Cost;
                                            waredetial.InStock -= (double)selectedQty;

                                            // insert to waredetial
                                            var stockOut = new StockOut
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (decimal)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = selectedQty,
                                                ItemID = item.ItemID,
                                                Location = waredetial.Location,
                                                MfrDate = waredetial.MfrDate,
                                                ProcessItem = ProcessItem.SEBA,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = sb.ExpireDate,
                                                BatchAttr1 = waredetial.BatchAttr1,
                                                BatchAttr2 = waredetial.BatchAttr2,
                                                BatchNo = waredetial.BatchNo,
                                                TransType = TransTypeWD.AR,
                                                FromWareDetialID = waredetial.ID,
                                                TransID = Order.SARID,
                                                BPID = Order.CusID
                                            };
                                            _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                            _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                            _context.StockOuts.Add(stockOut);
                                            _context.SaveChanges();
                                        }

                                    }
                                }
                            }

                            // insert to inventory audit
                            wareForAudis = (from wa in wareForAudis
                                            group wa by wa.Cost into g
                                            let wha = g.FirstOrDefault()
                                            select new WareForAudiView
                                            {
                                                Qty = g.Sum(i => i.Qty),
                                                Cost = wha.Cost,
                                                ExpireDate = wha.ExpireDate
                                            }).ToList();

                            if (wareForAudis.Any())
                            {
                                foreach (var i in wareForAudis)
                                {
                                    var inventory_audit = _context.InventoryAudits
                                .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var inventory = new InventoryAudit
                                    {
                                        ID = 0,
                                        LineID = item.LineID,
                                        TypeItem = SaleCopyType.AR.ToString(),
                                        WarehouseID = Order.WarehouseID,
                                        BranchID = Order.BranchID,
                                        UserID = Order.UserID,
                                        ItemID = item.ItemID,
                                        CurrencyID = Order.SaleCurrencyID,
                                        UomID = baseUOM.BaseUOM,
                                        InvoiceNo = Order.InvoiceNo,
                                        Trans_Type = docType.Code,
                                        Process = itemMaster.Process,
                                        SystemDate = DateTime.Now,
                                        PostingDate = Order.PostingDate,
                                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                        Qty = i.Qty * -1,
                                        Cost = i.Cost,
                                        Price = 0,
                                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                        Trans_Valuse = i.Qty * i.Cost * -1,
                                        ExpireDate = i.ExpireDate,
                                        LocalCurID = Order.LocalCurID,
                                        LocalSetRate = Order.LocalSetRate,
                                        CompanyID = Order.CompanyID,
                                        DocumentTypeID = docType.ID,
                                        SeriesID = Order.SeriesID,
                                        SeriesDetailID = Order.SeriesDID,
                                    };
                                    _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                    _context.InventoryAudits.Add(inventory);
                                    _context.SaveChanges();
                                }
                            }
                        }
                    }
                    else
                    {
                        List<WarehouseDetail> _whlists = wareDetails.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                        if (warehouse.IsAllowNegativeStock && _whlists.Count == 0)
                        {
                            var wh = wareDetails.LastOrDefault();
                            _whlists.Add(wh);
                        }
                        foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                        {
                            InventoryAudit inventoryAudit = new();
                            WarehouseDetail item_IssusStock = item_warehouse;
                            @Check_Stock = item_warehouse.InStock - @Qty;
                            if (@Check_Stock < 0)
                            {
                                @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                @IssusQty = @Qty - @Remain;
                                if (@Remain <= 0)
                                {
                                    @Qty = 0;
                                }
                                else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                {
                                    @IssusQty = @Qty;
                                }
                                else
                                {
                                    @Qty = @Remain;
                                }
                                if (itemMaster.Process == "FIFO")
                                {
                                    double _cost = item_IssusStock.Cost;
                                    item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)item_warehouse.Cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = item.ItemID,
                                            ProcessItem = ProcessItem.FIFO,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = item.UomID,
                                            UserID = Order.UserID,
                                            ExpireDate = item.ExpireDate,
                                            TransType = TransTypeWD.AR,
                                            BPID = Order.CusID,
                                            OutStockFrom = Order.SARID,
                                            FromWareDetialID = item_IssusStock.ID,
                                            TransID = item_IssusStock.ID
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        inventoryAudit.ID = 0;
                                        inventoryAudit.LineID = item.LineID;
                                        inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                        inventoryAudit.WarehouseID = Order.WarehouseID;
                                        inventoryAudit.BranchID = Order.BranchID;
                                        inventoryAudit.UserID = Order.UserID;
                                        inventoryAudit.ItemID = item.ItemID;
                                        inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                        inventoryAudit.UomID = baseUOM.BaseUOM;
                                        inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                        inventoryAudit.Trans_Type = docType.Code;
                                        inventoryAudit.Process = itemMaster.Process;
                                        inventoryAudit.SystemDate = DateTime.Now;
                                        inventoryAudit.PostingDate = Order.PostingDate;
                                        inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        inventoryAudit.Qty = @IssusQty * -1;
                                        inventoryAudit.Cost = item_IssusStock.Cost;
                                        inventoryAudit.Price = 0;
                                        inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                        inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                        inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                        inventoryAudit.LocalCurID = Order.LocalCurID;
                                        inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                        inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                        inventoryAudit.SeriesID = Order.SeriesID;
                                        inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                        inventoryAudit.CompanyID = Order.CompanyID;
                                    }
                                    _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                    if (type != "Delivery")
                                    {
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(inventoryAudit);
                                        _context.SaveChanges();
                                    }
                                }
                                else if (itemMaster.Process == "Average")
                                {
                                    item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {
                                        var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        double cost = warehouse_summary.Cost;
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = item.ItemID,
                                            ProcessItem = ProcessItem.Average,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = item.UomID,
                                            UserID = Order.UserID,
                                            ExpireDate = item.ExpireDate,
                                            TransType = TransTypeWD.AR,
                                            BPID = Order.CusID,
                                            OutStockFrom = Order.SARID,
                                            FromWareDetialID = item_IssusStock.ID,
                                            TransID = item_IssusStock.ID
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        inventoryAudit.ID = 0;
                                        inventoryAudit.LineID = item.LineID;
                                        inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                        inventoryAudit.WarehouseID = Order.WarehouseID;
                                        inventoryAudit.BranchID = Order.BranchID;
                                        inventoryAudit.UserID = Order.UserID;
                                        inventoryAudit.ItemID = item.ItemID;
                                        inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                        inventoryAudit.UomID = baseUOM.BaseUOM;
                                        inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                        inventoryAudit.Trans_Type = docType.Code;
                                        inventoryAudit.Process = itemMaster.Process;
                                        inventoryAudit.SystemDate = DateTime.Now;
                                        inventoryAudit.PostingDate = Order.PostingDate;
                                        inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        inventoryAudit.Qty = @IssusQty * -1;
                                        inventoryAudit.Cost = cost;
                                        inventoryAudit.Price = 0;
                                        inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                        inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                        inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                        inventoryAudit.LocalCurID = Order.LocalCurID;
                                        inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                        inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                        inventoryAudit.SeriesID = Order.SeriesID;
                                        inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                        inventoryAudit.CompanyID = Order.CompanyID;
                                    }
                                    double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                    @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                    _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                    _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                    _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                    if (type != "Delivery")
                                    {
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(inventoryAudit);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                            else
                            {
                                if (itemMaster.Process == "FIFO")
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    item_IssusStock.InStock = @FIFOQty;
                                    if (@IssusQty > 0)
                                    {

                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)item_warehouse.Cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = item.ItemID,
                                            ProcessItem = ProcessItem.FIFO,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = item.UomID,
                                            UserID = Order.UserID,
                                            ExpireDate = item.ExpireDate,
                                            TransType = TransTypeWD.AR,
                                            BPID = Order.CusID,
                                            OutStockFrom = Order.SARID,
                                            FromWareDetialID = item_IssusStock.ID,
                                            TransID = item_IssusStock.ID
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        inventoryAudit.ID = 0;
                                        inventoryAudit.LineID = item.LineID;
                                        inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                        inventoryAudit.WarehouseID = Order.WarehouseID;
                                        inventoryAudit.BranchID = Order.BranchID;
                                        inventoryAudit.UserID = Order.UserID;
                                        inventoryAudit.ItemID = item.ItemID;
                                        inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                        inventoryAudit.UomID = baseUOM.BaseUOM;
                                        inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                        inventoryAudit.Trans_Type = docType.Code;
                                        inventoryAudit.Process = itemMaster.Process;
                                        inventoryAudit.SystemDate = DateTime.Now;
                                        inventoryAudit.PostingDate = Order.PostingDate;
                                        inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        inventoryAudit.Qty = @IssusQty * -1;
                                        inventoryAudit.Cost = item_IssusStock.Cost;
                                        inventoryAudit.Price = 0;
                                        inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                        inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                        inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                        inventoryAudit.LocalCurID = Order.LocalCurID;
                                        inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                        inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                        inventoryAudit.SeriesID = Order.SeriesID;
                                        inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                        inventoryAudit.CompanyID = Order.CompanyID;
                                    }
                                    _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                    if (type != "Delivery")
                                    {
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(inventoryAudit);
                                        _context.SaveChanges();
                                    }
                                }
                                else if (itemMaster.Process == "Average")
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    item_IssusStock.InStock = @FIFOQty;
                                    if (@IssusQty > 0)
                                    {
                                        var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        double cost = warehouse_summary.Cost;
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        cost = _utility.CheckNaNOrInfinity(cost);
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = item.ItemID,
                                            ProcessItem = ProcessItem.Average,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = item.UomID,
                                            UserID = Order.UserID,
                                            ExpireDate = item.ExpireDate,
                                            TransType = TransTypeWD.AR,
                                            BPID = Order.CusID,
                                            OutStockFrom = Order.SARID,
                                            FromWareDetialID = item_IssusStock.ID,
                                            TransID = item_IssusStock.ID
                                        };
                                        _context.StockOuts.Add(stockOuts);

                                        inventoryAudit.ID = 0;
                                        inventoryAudit.LineID = item.LineID;
                                        inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                        inventoryAudit.WarehouseID = Order.WarehouseID;
                                        inventoryAudit.BranchID = Order.BranchID;
                                        inventoryAudit.UserID = Order.UserID;
                                        inventoryAudit.ItemID = item.ItemID;
                                        inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                        inventoryAudit.UomID = baseUOM.BaseUOM;
                                        inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                        inventoryAudit.Trans_Type = docType.Code;
                                        inventoryAudit.Process = itemMaster.Process;
                                        inventoryAudit.SystemDate = DateTime.Now;
                                        inventoryAudit.PostingDate = Order.PostingDate;
                                        inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        inventoryAudit.Qty = @IssusQty * -1;
                                        inventoryAudit.Cost = cost;
                                        inventoryAudit.Price = 0;
                                        inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                        inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                        inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                        inventoryAudit.LocalCurID = Order.LocalCurID;
                                        inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                        inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                        inventoryAudit.SeriesID = Order.SeriesID;
                                        inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                        inventoryAudit.CompanyID = Order.CompanyID;
                                    }

                                    double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                    @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                    _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                    _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                    _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                    if (type != "Delivery")
                                    {
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(inventoryAudit);
                                        _context.SaveChanges();
                                    }
                                }
                                wareDetails = new List<WarehouseDetail>();
                                break;
                            }
                        }
                    }

                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == Order.PriceListID) ?? new PriceListDetail();

                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.AR.ToString(),
                        WarehouseID = Order.WarehouseID,
                        BranchID = Order.BranchID,
                        UserID = Order.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = Order.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = Order.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost * -1,
                        LocalCurID = Order.LocalCurID,
                        LocalSetRate = Order.LocalSetRate,
                        SeriesDetailID = Order.SeriesDID,
                        SeriesID = Order.SeriesID,
                        DocumentTypeID = Order.DocTypeID,
                        CompanyID = Order.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }


            }
            //IssuseInstocMaterialkSaleAR
            foreach (var item in OrderDetails)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * (double)orft.Factor) * ((double)bomd.Qty * (double)gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item_detail.ItemID);
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_detail.GUoMID);

                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "SD";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                    item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "AR";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            if (type != "Delivery")
                            {
                                _context.WarehouseDetails.Update(item_IssusStock);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);

                                            double cost = (inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost)) / (inventory_audit.Sum(q => q.Qty) - @IssusQty);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
        }
        #endregion IssuseInStockSaleARBasic



        #region IssuseInStockSaleAR
        public void IssuseInStockSaleAR(
            int orderid, string type, List<SaleARDPINCN> ards,
            SaleGLAccountDetermination saleGlDeter,
            FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var Order = _context.SaleARs.First(w => w.SARID == orderid);
            var OrderDetails = _context.SaleARDetails.Where(w => w.SARID == orderid).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.Series.Find(Order.SeriesID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.BranchID = Order.BranchID;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.TransNo = Order.InvoiceNumber;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + Order.InvoiceNumber;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                decimal accreAmount = (decimal)Order.TotalAmountSys;
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = accreAmount,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                glAcc.Balance += accreAmount;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,
                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Debit = accreAmount,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    Creator = Order.UserID,
                    BPAcctID = Order.CusID,
                    Effective = EffectiveBlance.Debit
                });
                _context.Update(glAcc);
            }
            // BP ARDown Payment //

            if (Order.DownPaymentSys > 0)
            {
                var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();
                if (dpmAcc.ID > 0)
                {
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Debit = Order.DownPaymentSys,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    dpmAcc.Balance += Order.DownPaymentSys;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = dpmAcc.Code,
                        Details = douTypeID.Name + " - " + dpmAcc.Code,
                        CumulativeBalance = dpmAcc.Balance,
                        Debit = Order.DownPaymentSys,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = dpmAcc.ID,
                        BPAcctID = Order.CusID,
                        Creator = Order.UserID,
                        Effective = EffectiveBlance.Debit
                    });
                    _context.Update(dpmAcc);
                }
                // Tax AR Down Payment //
                var _ards = ards.Where(i => i.Selected).ToList();
                if (_ards.Count > 0)
                {
                    foreach (var ard in _ards)
                    {
                        if (ard.SaleARDPINCNDetails.Any())
                        {
                            foreach (var i in ard.SaleARDPINCNDetails)
                            {
                                // Tax Account ///
                                var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                                decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                                if (taxAcc.ID > 0)
                                {
                                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                    if (taxjur.ItemID > 0)
                                    {
                                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                        taxAcc.Balance += taxValue;
                                        //journalEntryDetail
                                        taxjur.Debit += taxValue;
                                        //accountBalance
                                        accBalance.CumulativeBalance = taxAcc.Balance;
                                        accBalance.Debit += taxValue;
                                    }
                                    else
                                    {
                                        taxAcc.Balance += taxValue;
                                        journalEntryDetail.Add(new JournalEntryDetail
                                        {
                                            JEID = journalEntry.ID,
                                            Type = Type.GLAcct,
                                            ItemID = taxAcc.ID,
                                            Debit = taxValue,
                                        });
                                        //
                                        accountBalance.Add(new AccountBalance
                                        {
                                            JEID = journalEntry.ID,
                                            PostingDate = Order.PostingDate,
                                            Origin = docType.ID,
                                            OriginNo = Order.InvoiceNumber,
                                            OffsetAccount = taxAcc.Code,
                                            Details = douTypeID.Name + " - " + taxAcc.Code,
                                            CumulativeBalance = taxAcc.Balance,
                                            Debit = taxValue,
                                            LocalSetRate = ard.LocalSetRate,
                                            GLAID = taxAcc.ID,
                                            Effective = EffectiveBlance.Debit
                                        });
                                    }
                                    _context.Update(taxAcc);
                                    _context.SaveChanges();
                                }
                            }
                        }
                        var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                        __ard.Status = "used";
                        __ard.ARID = orderid;
                        _context.ARDownPayments.Update(__ard);
                        _context.SaveChanges();
                    }
                }

            }
            // Freight //
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (type != "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        inventoryAccID = inventoryAcc.ID;
                        COGSAccID = COGSAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                    if (type == "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null && inventoryAcc != null && COGSAcc != null)
                    {
                        if (type != "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            inventoryAccID = inventoryAcc.ID;
                            COGSAccID = COGSAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                        if (type == "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                    }
                }
                if (itemMaster.Process != "Standard")
                {
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = item.Qty * item.Factor;
                    double Cost = 0;
                    var wareSum = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID);
                    var wareDetails = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item.ItemID);
                    if (wareSum != null)
                    {
                        if (Order.CopyType == SaleCopyType.Order)
                        {
                            wareSum.Committed -= (double)item.Qty;
                            itemMaster.StockCommit -= (double)item.Qty;
                        }
                        //WerehouseSummary
                        wareSum.InStock -= @Qty;
                        //Itemmasterdata
                        itemMaster.StockIn = wareSum.InStock - @Qty;
                        _context.WarehouseSummary.Update(wareSum);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _utility.UpdateItemAccounting(_itemAcc, wareSum);
                    }
                    if (type != "Delivery")
                    {
                        if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                        {
                            if (serials.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var s in serials)
                                {
                                    if (s.SerialNumberSelected != null)
                                    {
                                        foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                        {
                                            var waredetial = wareDetails.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                Cost = waredetial.Cost;
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = waredetial.InStock,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                waredetial.InStock -= 1;
                                                // insert to warehouse detail
                                                _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = 1,
                                                    ItemID = waredetial.ItemID,
                                                    Location = waredetial.Location,
                                                    LotNumber = waredetial.LotNumber,
                                                    MfrDate = waredetial.MfrDate,
                                                    MfrSerialNumber = waredetial.MfrSerialNumber,
                                                    MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                    MfrWarDateStart = waredetial.MfrWarDateStart,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SerialNumber = waredetial.SerialNumber,
                                                    PlateNumber = waredetial.PlateNumber,
                                                    Color = waredetial.Color,
                                                    Brand = waredetial.Brand,
                                                    Condition = waredetial.Condition,
                                                    Type = waredetial.Type,
                                                    Power = waredetial.Power,
                                                    Year = waredetial.Year,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = _expdate,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.SARID,
                                                    Contract = itemMaster.ContractID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost;
                                                _COGSAccAmount = (decimal)waredetial.Cost;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialAR(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // Insert to Inventory Audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate,
                                                }).ToList();
                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            LineID = item.LineID,
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                        {
                            if (batches.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var b in batches)
                                {
                                    if (b.BatchNoSelected != null)
                                    {
                                        foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                        {
                                            decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                            var waredetial = wareDetails.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = (double)selectedQty,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                Cost = waredetial.Cost;
                                                waredetial.InStock -= (double)selectedQty;

                                                // insert to waredetial
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = selectedQty,
                                                    ItemID = item.ItemID,
                                                    Location = waredetial.Location,
                                                    MfrDate = waredetial.MfrDate,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = sb.ExpireDate,
                                                    BatchAttr1 = waredetial.BatchAttr1,
                                                    BatchAttr2 = waredetial.BatchAttr2,
                                                    BatchNo = waredetial.BatchNo,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.SARID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialAR(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // insert to inventory audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate
                                                }).ToList();

                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            LineID = item.LineID,
                                            TypeItem = SaleCopyType.AR.ToString(),
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else
                        {
                            List<WarehouseDetail> _whlists = wareDetails.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                            if (warehouse.IsAllowNegativeStock && _whlists.Count == 0)
                            {
                                var wh = wareDetails.LastOrDefault();
                                _whlists.Add(wh);
                            }
                            foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                            {


                                InventoryAudit inventoryAudit = new();
                                WarehouseDetail item_IssusStock = item_warehouse;
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {


                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                    {
                                        @IssusQty = @Qty;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }

                                    if (itemMaster.Process == "FIFO")
                                    {
                                        double _cost = item_IssusStock.Cost;
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            inventoryAudit.ID = 0;
                                            inventoryAudit.LineID = item.LineID;
                                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }

                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    wareDetails = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == Order.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * item.Qty * Order.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * item.Qty * Order.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.AR.ToString(),
                        WarehouseID = Order.WarehouseID,
                        BranchID = Order.BranchID,
                        UserID = Order.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = Order.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = Order.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost * -1,
                        LocalCurID = Order.LocalCurID,
                        LocalSetRate = Order.LocalSetRate,
                        SeriesDetailID = Order.SeriesDID,
                        SeriesID = Order.SeriesID,
                        DocumentTypeID = Order.DocTypeID,
                        CompanyID = Order.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }
                if (type != "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance = revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance = revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                if (type == "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance = revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,
                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                        _context.SaveChanges();
                    }
                }
                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialAR(
                        inventoryAccID, COGSAccID, journalEntryDetail,
                        accountBalance, inventoryAccAmount, COGSAccAmount,
                        journalEntry, Order, docType, douTypeID, glAcc, type
                    );
                }
            }
            //IssuseInstocMaterialkSaleAR
            foreach (var item in OrderDetails)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * (double)orft.Factor) * ((double)bomd.Qty * (double)gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item_detail.ItemID);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_detail.GUoMID);
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "SD";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                    item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.SARID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "AR";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg += (decimal)@AvgCost * (decimal)@IssusQty;
                                COGSAccAmountAvg += (decimal)@AvgCost * (decimal)@IssusQty;
                                _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            if (type != "Delivery")
                            {
                                _context.WarehouseDetails.Update(item_IssusStock);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);

                                            double cost = (inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost)) / (inventory_audit.Sum(q => q.Qty) - @IssusQty);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.SARID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.AR.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                        if (type != "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();

                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                            }
                            //inventoryAccID
                            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                            if (glAccInvenfifo.ID > 0)
                            {
                                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                                if (listInvenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    //journalEntryDetail
                                    listInvenfifo.Credit += inventoryAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                    accBalance.Credit += inventoryAccAmountAvg;
                                }
                                else
                                {
                                    glAccInvenfifo.Balance += inventoryAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = inventoryAccIDAvg,
                                        Credit = inventoryAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                        CumulativeBalance = glAccInvenfifo.Balance,
                                        Credit = inventoryAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = inventoryAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccInvenfifo);
                            }

                            // COGS
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                    glAccCOGSfifo.Balance -= COGSAccAmountAvg;
                                    //journalEntryDetail
                                    listCOGSfifo.Debit -= COGSAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Debit -= COGSAccAmountAvg;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance -= COGSAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccIDAvg,
                                        Debit = COGSAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Debit = COGSAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccIDAvg,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(glAccCOGSfifo);
                            }
                            _context.SaveChanges();
                        }
                        if (type == "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                                _context.SaveChanges();
                            }
                        }
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }
        #endregion  IssuseInStockSaleAR
        public void IssuseCancelSaleAr(SaleAR saleAr, List<SerialNumber> serials, List<BatchNo> batches, SaleGLAccountDetermination saleGlDeter)
        {
            var SysCurID = _context.Company.FirstOrDefault(w => !w.Delete).SystemCurrencyID;
            var docType = _context.DocumentTypes.Find(saleAr.DocTypeID);
            var series = _context.Series.Find(saleAr.SeriesID);
            List<GLAccount> gLAccounts = _context.GLAccounts.Where(i => i.IsActive).ToList();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID);
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = saleAr.UserID;
                journalEntry.BranchID = saleAr.BranchID;
                journalEntry.TransNo = saleAr.InvoiceNumber;
                journalEntry.PostingDate = saleAr.PostingDate;
                journalEntry.DocumentDate = saleAr.DocumentDate;
                journalEntry.DueDate = saleAr.DueDate;
                journalEntry.SSCID = saleAr.SaleCurrencyID;
                journalEntry.LLCID = saleAr.LocalCurID;
                journalEntry.CompanyID = saleAr.CompanyID;
                journalEntry.LocalSetRate = (decimal)saleAr.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + saleAr.InvoiceNumber;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            // BP ARDown Payment //
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == saleAr.CusID) ?? new BusinessPartner();
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();

            // Freight //
            if (saleAr.FreightSalesView != null)
            {
                if (saleAr.FreightSalesView.FreightSaleDetails.Any())
                {
                    var fsd = saleAr.FreightSalesView.FreightSaleDetails.Where(i => i.Amount > 0).ToList();
                    foreach (var fr in fsd)
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)saleAr.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance += _framount;
                                //journalEntryDetail
                                frgljur.Debit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Debit += _framount;
                            }
                            else
                            {
                                frgl.Balance += _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Debit = _framount,
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAr.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAr.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Debit = _framount,
                                    LocalSetRate = (decimal)saleAr.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)saleAr.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance += _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Debit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Debit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance += _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Debit = _frtaxamount,
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAr.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAr.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Debit = _frtaxamount,
                                    LocalSetRate = (decimal)saleAr.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            // BP ARDown Payment //
            decimal dp = saleAr.DownPayment * (decimal)saleAr.ExchangeRate;
            if (dpmAcc.ID > 0 && dp > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Credit = dp,
                    BPAcctID = saleAr.CusID,
                });
                //Insert 
                dpmAcc.Balance -= dp;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,
                    PostingDate = saleAr.PostingDate,
                    Origin = docType.ID,
                    OriginNo = saleAr.InvoiceNumber,
                    OffsetAccount = dpmAcc.Code,
                    Details = douTypeID.Name + " - " + dpmAcc.Code,
                    CumulativeBalance = dpmAcc.Balance,
                    Credit = dp,
                    LocalSetRate = saleAr.LocalCurID,
                    GLAID = dpmAcc.ID,
                    Creator = saleAr.UserID,
                    BPAcctID = saleAr.CusID,
                    Effective = EffectiveBlance.Credit
                });
                _context.Update(dpmAcc);
            }
            // Tax AR Down Payment //
            if (saleAr.SaleARDPINCNs.Count > 0)
            {
                foreach (var ard in saleAr.SaleARDPINCNs)
                {
                    if (ard.SaleARDPINCNDetails.Any())
                    {
                        foreach (var i in ard.SaleARDPINCNDetails)
                        {
                            // Tax Account ///
                            var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                            var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                            decimal taxValue = i.TaxDownPaymentValue * (decimal)saleAr.ExchangeRate;
                            if (taxAcc.ID > 0)
                            {
                                var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                if (taxjur.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                    taxAcc.Balance -= taxValue;
                                    //journalEntryDetail
                                    taxjur.Credit += taxValue;
                                    //accountBalance
                                    accBalance.CumulativeBalance = taxAcc.Balance;
                                    accBalance.Credit += taxValue;
                                }
                                else
                                {
                                    taxAcc.Balance -= taxValue;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = taxAcc.ID,
                                        Credit = taxValue,
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = saleAr.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = saleAr.InvoiceNumber,
                                        OffsetAccount = taxAcc.Code,
                                        Details = douTypeID.Name + " - " + taxAcc.Code,
                                        CumulativeBalance = taxAcc.Balance,
                                        Credit = taxValue,
                                        LocalSetRate = ard.LocalSetRate,
                                        GLAID = taxAcc.ID,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(taxAcc);
                                _context.SaveChanges();
                            }
                        }
                    }
                    var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                    __ard.Status = "close";
                    _context.ARDownPayments.Update(__ard);
                    _context.SaveChanges();
                }
            }
            if (glAcc.ID > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Credit = (decimal)saleAr.TotalAmountSys,
                    BPAcctID = saleAr.CusID,
                });
                //Insert 
                glAcc.Balance -= (decimal)saleAr.TotalAmountSys;
                accountBalance.Add(
                    new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAr.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAr.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAcc.Code,
                        CumulativeBalance = glAcc.Balance,
                        Credit = (decimal)saleAr.TotalAmountSys,
                        LocalSetRate = saleAr.LocalCurID,
                        GLAID = accountReceive.GLAccID,
                        Creator = saleAr.UserID,
                        BPAcctID = saleAr.CusID,
                        Effective = EffectiveBlance.Credit
                    }
                );
                //      
                _context.Update(glAcc);
            }
            //return stock memo
            foreach (var item in saleAr.SaleARDetails.ToList())
            {
                //update_warehouse_summary && itemmasterdata
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                List<ItemAccounting> itemAccs = new();
                ItemAccounting _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.ItemID == item.ItemID && i.WarehouseID == saleAr.WarehouseID);
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    itemAccs = _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID).ToList();
                    var revenueAcc = (from ia in itemAccs
                                      join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                    if (saleAr.DisRate > 0)
                    {
                        decimal disvalue = (decimal)item.TotalSys * (decimal)saleAr.DisRate / 100;
                        revenueAccAmount = (decimal)item.TotalSys - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = (decimal)item.TotalSys;
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID).ToList();
                    var revenueAcc = (from ia in itemAccs
                                      join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                    if (saleAr.DisRate > 0)
                    {
                        decimal disvalue = (decimal)item.TotalSys * (decimal)saleAr.DisRate / 100;
                        revenueAccAmount = (decimal)item.TotalSys - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = (decimal)item.TotalSys;
                    }
                }
                if (itemMaster.Process != "Standard")
                {
                    var warehouseSummary = _context.WarehouseSummary
                        .FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID);
                    double @Qty = item.Qty * item.Factor;
                    double @Cost = 0;
                    warehouseSummary.InStock += @Qty;
                    itemMaster.StockIn += @Qty;
                    _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                    if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                    {
                        if (serials.Count > 0)
                        {
                            foreach (var s in serials)
                            {
                                if (s.SerialNumberSelected != null)
                                {
                                    foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                    {
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        StockOut waredetial = _context.StockOuts
                                        .FirstOrDefault(i =>
                                        i.ItemID == item.ItemID
                                        && ss.SerialNumber == i.SerialNumber
                                        && i.InStock > 0 && i.TransType == TransTypeWD.AR);
                                        if (waredetial != null)
                                        {
                                            waredetial.InStock -= 1;
                                            @Cost = (double)waredetial.Cost;
                                            // insert to warehouse detail
                                            var ware = new WarehouseDetail
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (double)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = 1,
                                                ItemID = waredetial.ItemID,
                                                Location = waredetial.Location,
                                                LotNumber = waredetial.LotNumber,
                                                MfrDate = waredetial.MfrDate,
                                                MfrSerialNumber = waredetial.MfrSerialNumber,
                                                MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                MfrWarDateStart = waredetial.MfrWarDateStart,
                                                ProcessItem = ProcessItem.SEBA,
                                                SerialNumber = waredetial.SerialNumber,
                                                PlateNumber = waredetial.PlateNumber,
                                                Color = waredetial.Color,
                                                Brand = waredetial.Brand,
                                                Condition = waredetial.Condition,
                                                Type = waredetial.Type,
                                                Power = waredetial.Power,
                                                Year = waredetial.Year,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saleAr.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                InStockFrom = saleAr.SARID,
                                                IsDeleted = true,
                                                BPID = saleAr.CusID
                                            };
                                            _inventoryAccAmount = waredetial.Cost;
                                            _COGSAccAmount = waredetial.Cost;
                                            _context.WarehouseDetails.Add(ware);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialCancelSaleAR(
                                            revenueAccID, inventoryAccID, COGSAccID, journalEntryDetail,
                                            accountBalance, revenueAccAmount, _inventoryAccAmount, _COGSAccAmount,
                                            journalEntry, saleAr, docType, douTypeID, glAcc
                                        );
                                    }
                                }
                            }
                            // Insert to Inventory Audit
                            var inventory_audit = _context.InventoryAudits
                                .Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID);
                            var inventory = new InventoryAudit
                            {
                                ID = 0,
                                LineID = item.LineID,
                                TypeItem = SaleCopyType.AR.ToString(),
                                WarehouseID = saleAr.WarehouseID,
                                BranchID = saleAr.BranchID,
                                UserID = saleAr.UserID,
                                ItemID = item.ItemID,
                                CurrencyID = saleAr.SaleCurrencyID,
                                UomID = baseUOM.BaseUOM,
                                InvoiceNo = saleAr.InvoiceNumber,
                                Trans_Type = docType.Code,
                                Process = itemMaster.Process,
                                SystemDate = DateTime.Now,
                                PostingDate = saleAr.PostingDate,
                                TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                Qty = @Qty,
                                Cost = @Cost,
                                Price = 0,
                                CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty,
                                CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + @Qty * @Cost,
                                Trans_Valuse = @Cost * @Qty,
                                ExpireDate = item.ExpireDate,
                                LocalCurID = saleAr.LocalCurID,
                                LocalSetRate = (double)saleAr.LocalSetRate,
                                CompanyID = saleAr.CompanyID,
                                DocumentTypeID = docType.ID,
                                SeriesID = saleAr.SeriesID,
                                SeriesDetailID = saleAr.SeriesDID,
                            };
                            _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                            _context.InventoryAudits.Add(inventory);
                            _context.SaveChanges();
                        }
                    }
                    else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                    {
                        if (batches.Count > 0)
                        {
                            foreach (var b in batches)
                            {
                                if (b.BatchNoSelected != null)
                                {
                                    foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                    {
                                        var waredetial = _context.StockOuts
                                            .FirstOrDefault(i =>
                                            i.ItemID == item.ItemID
                                            && sb.BatchNo == i.BatchNo
                                            && i.TransType == TransTypeWD.AR && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                            waredetial.InStock -= selectedQty;
                                            @Cost = (double)waredetial.Cost;
                                            _context.SaveChanges();

                                            // insert to waredetial
                                            var ware = new WarehouseDetail
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (double)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = (double)selectedQty,
                                                ItemID = item.ItemID,
                                                Location = waredetial.Location,
                                                MfrDate = waredetial.MfrDate,
                                                ProcessItem = ProcessItem.SEBA,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saleAr.UserID,
                                                ExpireDate = item.ExpireDate,
                                                BatchAttr1 = waredetial.BatchAttr1,
                                                BatchAttr2 = waredetial.BatchAttr2,
                                                BatchNo = waredetial.BatchNo,
                                                TransType = TransTypeWD.AR,
                                                InStockFrom = saleAr.SARID,
                                                IsDeleted = true,
                                                BPID = saleAr.CusID
                                            };

                                            _inventoryAccAmount = waredetial.Cost * selectedQty;
                                            _COGSAccAmount = waredetial.Cost * selectedQty;
                                            _context.WarehouseDetails.Add(ware);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialCancelSaleAR(
                                            revenueAccID, inventoryAccID, COGSAccID, journalEntryDetail,
                                            accountBalance, revenueAccAmount, _inventoryAccAmount, _COGSAccAmount,
                                            journalEntry, saleAr, docType, douTypeID, glAcc
                                        );
                                    }
                                }
                            }
                            // insert to inventory audit
                            var inventory_audit = _context.InventoryAudits
                                .Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID);
                            var inventory = new InventoryAudit
                            {
                                ID = 0,
                                LineID = item.LineID,
                                TypeItem = SaleCopyType.AR.ToString(),
                                WarehouseID = saleAr.WarehouseID,
                                BranchID = saleAr.BranchID,
                                UserID = saleAr.UserID,
                                ItemID = item.ItemID,
                                CurrencyID = saleAr.SaleCurrencyID,
                                UomID = baseUOM.BaseUOM,
                                InvoiceNo = saleAr.InvoiceNumber,
                                Trans_Type = docType.Code,
                                Process = itemMaster.Process,
                                SystemDate = DateTime.Now,
                                PostingDate = saleAr.PostingDate,
                                TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                Qty = @Qty,
                                Cost = @Cost,
                                Price = 0,
                                CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty,
                                CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost),
                                Trans_Valuse = @Qty * @Cost,
                                ExpireDate = item.ExpireDate,
                                LocalCurID = saleAr.LocalCurID,
                                LocalSetRate = (double)saleAr.LocalSetRate,
                                CompanyID = saleAr.CompanyID,
                                DocumentTypeID = docType.ID,
                                SeriesID = saleAr.SeriesID,
                                SeriesDetailID = saleAr.SeriesDID,
                            };
                            _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                            _context.InventoryAudits.Add(inventory);
                            _context.SaveChanges();
                        }
                    }
                    else
                    {

                        //insert_warehousedetail
                        var inventoryAudit = new InventoryAudit();
                        var warehouseDetail = new WarehouseDetail();
                        warehouseDetail.WarehouseID = saleAr.WarehouseID;
                        warehouseDetail.UomID = item.UomID;
                        warehouseDetail.UserID = saleAr.UserID;
                        warehouseDetail.SyetemDate = saleAr.PostingDate;
                        warehouseDetail.TimeIn = DateTime.Now;
                        warehouseDetail.InStock = @Qty;
                        warehouseDetail.CurrencyID = SysCurID;
                        warehouseDetail.ItemID = item.ItemID;
                        warehouseDetail.Cost = @Cost;
                        warehouseDetail.ExpireDate = item.ExpireDate;
                        warehouseDetail.IsDeleted = true;
                        warehouseDetail.TransType = TransTypeWD.AR;
                        warehouseDetail.InStockFrom = saleAr.SARID;
                        warehouseDetail.BPID = saleAr.CusID;
                        if (itemMaster.Process == "FIFO")
                        {
                            var ware = _context.WarehouseDetails.FirstOrDefault(i => i.ItemID == item.ItemID && i.WarehouseID == saleAr.WarehouseID && i.Cost > 0) ?? new WarehouseDetail();
                            @Cost = ware.Cost;
                            warehouseDetail.Cost = ware.Cost;
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                            inventoryAudit.WarehouseID = saleAr.WarehouseID;
                            inventoryAudit.BranchID = saleAr.BranchID;
                            inventoryAudit.UserID = saleAr.UserID;
                            inventoryAudit.ItemID = item.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item.UomID;
                            inventoryAudit.InvoiceNo = saleAr.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = itemMaster.Process;
                            inventoryAudit.PostingDate = saleAr.PostingDate;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @Cost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost);
                            inventoryAudit.Trans_Valuse = @Qty * @Cost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAr.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAr.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAr.SeriesDID;
                            inventoryAudit.SeriesID = saleAr.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAr.DocTypeID;
                            inventoryAudit.CompanyID = saleAr.CompanyID;
                            inventoryAccAmount += (decimal)(inventoryAudit.Cost * @Qty);
                            COGSAccAmount += (decimal)(inventoryAudit.Cost * @Qty);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        else if (itemMaster.Process == "Average")
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID);
                            InventoryAudit avgInventory = new() { Qty = Qty, Cost = @Cost };
                            double @AvgCost = _utility.CalAVGCost(item.ItemID, saleAr.WarehouseID, avgInventory);
                            warehouseDetail.Cost = @AvgCost;
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                            inventoryAudit.WarehouseID = saleAr.WarehouseID;
                            inventoryAudit.BranchID = saleAr.BranchID;
                            inventoryAudit.UserID = saleAr.UserID;
                            inventoryAudit.ItemID = item.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item.UomID;
                            inventoryAudit.InvoiceNo = saleAr.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = itemMaster.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAr.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @AvgCost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = (inventory_audit.Sum(q => q.Qty)) + (@Qty);
                            inventoryAudit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@Qty * @AvgCost);
                            inventoryAudit.Trans_Valuse = @Qty * @AvgCost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAr.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAr.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAr.SeriesDID;
                            inventoryAudit.SeriesID = saleAr.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAr.DocTypeID;
                            inventoryAudit.CompanyID = saleAr.CompanyID;
                            double InvCost = _utility.CalAVGCost(item.ItemID, saleAr.WarehouseID, inventoryAudit);
                            inventoryAccAmount += (decimal)(InvCost * @Qty);
                            COGSAccAmount += (decimal)(InvCost * @Qty);
                            _utility.UpdateAvgCost(item.ItemID, saleAr.WarehouseID, item.GUomID, @Qty, @AvgCost);
                            _utility.UpdateBomCost(item.ItemID, @Qty, @AvgCost);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        _context.InventoryAudits.Update(inventoryAudit);
                        _context.WarehouseDetails.Update(warehouseDetail);
                    }
                    _context.WarehouseSummary.Update(warehouseSummary);
                    _context.ItemMasterDatas.Update(itemMaster);
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == saleAr.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * item.Qty * saleAr.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * item.Qty * saleAr.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAr.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.AR.ToString(),
                        WarehouseID = saleAr.WarehouseID,
                        BranchID = saleAr.BranchID,
                        UserID = saleAr.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = SysCurID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = saleAr.InvoiceNumber,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = saleAr.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) + item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost,
                        LocalCurID = saleAr.LocalCurID,
                        LocalSetRate = saleAr.LocalSetRate,
                        SeriesDetailID = saleAr.SeriesDID,
                        SeriesID = saleAr.SeriesID,
                        DocumentTypeID = saleAr.DocTypeID,
                        CompanyID = saleAr.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }

                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)saleAr.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance += taxValue;
                        //journalEntryDetail
                        taxjur.Debit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Debit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance += taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Debit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = saleAr.PostingDate,
                            Origin = docType.ID,
                            OriginNo = saleAr.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Debit = taxValue,
                            LocalSetRate = (decimal)saleAr.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(taxAcc);
                }

                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialCancelSaleAR(
                        revenueAccID, inventoryAccID, COGSAccID, journalEntryDetail, accountBalance,
                        revenueAccAmount, inventoryAccAmount, COGSAccAmount, journalEntry, saleAr,
                        docType, douTypeID, glAcc
                    );
                }
            }
            //returm_stock_memo_bom
            foreach (var item in saleAr.SaleARDetails.ToList())
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = (double)(item.Qty * orft.Factor * bomd.Qty * gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_cancel in items_material.ToList())
                    {
                        //update_warehouse_summary && itemmasterdata
                        var warehouseSummary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAr.WarehouseID);
                        var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_cancel.ItemID);
                        List<ItemAccounting> itemAccs = new();
                        ItemAccounting _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.ItemID == item.ItemID && i.WarehouseID == saleAr.WarehouseID);
                        double @Qty = item_cancel.Qty;
                        double @Cost = 0;
                        warehouseSummary.InStock += @Qty;
                        itemMaster.StockIn += @Qty;
                        _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_cancel.GUoMID);
                        if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            itemAccs = _context.ItemAccountings.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAr.WarehouseID).ToList();
                            var revenueAcc = (from ia in itemAccs
                                              join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in itemAccs
                                                join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in itemAccs
                                           join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            COGSAccIDAvg = COGSAcc.ID;
                            revenueAccIDAvg = revenueAcc.ID;
                            inventoryAccIDAvg = inventoryAcc.ID;
                        }
                        else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID).ToList();
                            var revenueAcc = (from ia in itemAccs
                                              join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in itemAccs
                                                join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in itemAccs
                                           join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            COGSAccIDAvg = COGSAcc.ID;
                            revenueAccIDAvg = revenueAcc.ID;
                            inventoryAccIDAvg = inventoryAcc.ID;
                        }
                        //insert_warehousedetail
                        var inventoryAudit = new InventoryAudit();
                        var warehouseDetail = new WarehouseDetail();
                        warehouseDetail.WarehouseID = saleAr.WarehouseID;
                        warehouseDetail.UomID = item_cancel.UomID;
                        warehouseDetail.UserID = saleAr.UserID;
                        warehouseDetail.SyetemDate = saleAr.PostingDate;
                        warehouseDetail.TimeIn = DateTime.Now;
                        warehouseDetail.InStock = @Qty;
                        warehouseDetail.CurrencyID = SysCurID;
                        warehouseDetail.ItemID = item_cancel.ItemID;
                        warehouseDetail.Cost = @Cost;
                        warehouseDetail.ExpireDate = item.ExpireDate;
                        warehouseDetail.InStockFrom = saleAr.SARID;
                        warehouseDetail.IsDeleted = true;
                        warehouseDetail.TransType = TransTypeWD.AR;
                        if (itemMaster.Process == "FIFO")
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAr.WarehouseID);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                            inventoryAudit.WarehouseID = saleAr.WarehouseID;
                            inventoryAudit.BranchID = saleAr.BranchID;
                            inventoryAudit.UserID = saleAr.UserID;
                            inventoryAudit.ItemID = item_cancel.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item_cancel.UomID;
                            inventoryAudit.InvoiceNo = saleAr.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = item_cancel.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAr.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @Cost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost);
                            inventoryAudit.Trans_Valuse = @Qty * @Cost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAr.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAr.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAr.SeriesDID;
                            inventoryAudit.SeriesID = saleAr.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAr.DocTypeID;
                            inventoryAudit.CompanyID = saleAr.CompanyID;
                            inventoryAccAmountAvg += (decimal)inventoryAudit.Cost * (decimal)@Qty;
                            COGSAccAmountAvg += (decimal)inventoryAudit.Cost * (decimal)@Qty;
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        else
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAr.WarehouseID);
                            InventoryAudit avgInventory = new() { Qty = Qty, Cost = @Cost };
                            double @AvgCost = _utility.CalAVGCost(item_cancel.ItemID, saleAr.WarehouseID, avgInventory);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.AR.ToString();
                            inventoryAudit.WarehouseID = saleAr.WarehouseID;
                            inventoryAudit.BranchID = saleAr.BranchID;
                            inventoryAudit.UserID = saleAr.UserID;
                            inventoryAudit.ItemID = item_cancel.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item_cancel.UomID;
                            inventoryAudit.InvoiceNo = saleAr.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = item_cancel.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAr.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @AvgCost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @AvgCost);
                            inventoryAudit.Trans_Valuse = @Qty * @AvgCost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAr.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAr.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAr.SeriesDID;
                            inventoryAudit.SeriesID = saleAr.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAr.DocTypeID;
                            inventoryAudit.CompanyID = saleAr.CompanyID;
                            inventoryAccAmountAvg += (decimal)inventoryAudit.Cost;
                            double InvCost = _utility.CalAVGCost(item.ItemID, saleAr.WarehouseID, inventoryAudit);
                            COGSAccAmountAvg += (decimal)InvCost * (decimal)@Qty;
                            _utility.UpdateAvgCost(item_cancel.ItemID, saleAr.WarehouseID, item.GUomID, @Qty, @AvgCost);
                            _utility.UpdateBomCost(item_cancel.ItemID, @Qty, @AvgCost);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        _context.InventoryAudits.Update(inventoryAudit);
                        _context.WarehouseSummary.Update(warehouseSummary);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _context.WarehouseDetails.Update(warehouseDetail);

                        // Account Revenue
                        var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                        if (glAccRevenfifo.ID > 0)
                        {
                            var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                            if (listRevenfifo.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                glAccRevenfifo.Balance += revenueAccAmountAvg;
                                //journalEntryDetail
                                listRevenfifo.Debit += revenueAccAmountAvg;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                accBalance.Debit += revenueAccAmountAvg;
                            }
                            else
                            {
                                glAccRevenfifo.Balance += revenueAccAmountAvg;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.BPCode,
                                    ItemID = revenueAccIDAvg,
                                    Debit = revenueAccAmountAvg,
                                    BPAcctID = saleAr.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAr.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAr.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                    CumulativeBalance = glAccRevenfifo.Balance,
                                    Debit = revenueAccAmountAvg,
                                    LocalSetRate = (decimal)saleAr.LocalSetRate,
                                    GLAID = revenueAccIDAvg,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                        }
                        //inventoryAccID
                        var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                        if (glAccInvenfifo.ID > 0)
                        {
                            var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                            if (listInvenfifo.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                glAccInvenfifo.Balance += inventoryAccAmountAvg;
                                //journalEntryDetail
                                listInvenfifo.Debit += inventoryAccAmountAvg;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                accBalance.Debit += inventoryAccAmountAvg;
                            }
                            else
                            {
                                glAccInvenfifo.Balance += inventoryAccAmountAvg;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.BPCode,
                                    ItemID = inventoryAccIDAvg,
                                    Debit = inventoryAccAmountAvg,
                                    BPAcctID = saleAr.CusID
                                });

                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAr.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAr.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                    CumulativeBalance = glAccInvenfifo.Balance,
                                    Debit = inventoryAccAmountAvg,
                                    LocalSetRate = (decimal)saleAr.LocalSetRate,
                                    GLAID = inventoryAccIDAvg,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                        }
                        // COGS
                        var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                        if (glAccCOGSfifo.ID > 0)
                        {
                            var list = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                            if (list.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                glAccCOGSfifo.Balance -= COGSAccAmountAvg;
                                //journalEntryDetail
                                list.Credit += COGSAccAmountAvg;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                accBalance.Credit += COGSAccAmountAvg;
                            }
                            else
                            {
                                glAccCOGSfifo.Balance -= COGSAccAmountAvg;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.BPCode,
                                    ItemID = COGSAccIDAvg,
                                    Credit = COGSAccAmountAvg,
                                    BPAcctID = saleAr.CusID
                                });
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAr.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAr.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                    CumulativeBalance = glAccCOGSfifo.Balance,
                                    Credit = COGSAccAmountAvg,
                                    LocalSetRate = (decimal)saleAr.LocalSetRate,
                                    GLAID = COGSAccIDAvg,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                        }
                        _context.Update(glAccRevenfifo);
                        _context.Update(glAccInvenfifo);
                        _context.Update(glAccCOGSfifo);
                        _context.SaveChanges();
                    }
                }

            }
            var journal = _context.JournalEntries.Find(journalEntry.ID);
            journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
            journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
            _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
            _context.AccountBalances.UpdateRange(accountBalance);
            _context.SaveChanges();
        }

        private void InsertFinancialCancelSaleAR(
            int revenueAccID,
            int inventoryAccID,
            int COGSAccID,
            List<JournalEntryDetail> journalEntryDetail,
            List<AccountBalance> accountBalance,
            decimal revenueAccAmount,
            decimal inventoryAccAmount,
            decimal COGSAccAmount,
            JournalEntry journalEntry,
            SaleAR saleAr,
            DocumentType docType,
            DocumentType douTypeID,
            GLAccount glAcc
            )
        {
            // Account Revenue
            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
            if (glAccRevenfifo.ID > 0)
            {
                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                if (listRevenfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                    glAccRevenfifo.Balance += revenueAccAmount;
                    //journalEntryDetail
                    listRevenfifo.Debit += revenueAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                    accBalance.Debit += revenueAccAmount;
                }
                else
                {
                    glAccRevenfifo.Balance += revenueAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = revenueAccID,
                        Debit = revenueAccAmount,
                        BPAcctID = saleAr.CusID
                    });
                    //
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAr.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAr.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                        CumulativeBalance = glAccRevenfifo.Balance,
                        Debit = revenueAccAmount,
                        LocalSetRate = (decimal)saleAr.LocalSetRate,
                        GLAID = revenueAccID,
                        Effective = EffectiveBlance.Debit
                    });
                }
            }
            //inventoryAccID
            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
            if (glAccInvenfifo.ID > 0)
            {
                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                if (listInvenfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                    glAccInvenfifo.Balance += inventoryAccAmount;
                    //journalEntryDetail
                    listInvenfifo.Debit += inventoryAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                    accBalance.Debit += inventoryAccAmount;
                }
                else
                {
                    glAccInvenfifo.Balance += inventoryAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = inventoryAccID,
                        Debit = inventoryAccAmount,
                        BPAcctID = saleAr.CusID
                    });
                    //
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAr.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAr.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                        CumulativeBalance = glAccInvenfifo.Balance,
                        Debit = inventoryAccAmount,
                        LocalSetRate = (decimal)saleAr.LocalSetRate,
                        GLAID = inventoryAccID,
                        Effective = EffectiveBlance.Debit
                    });
                }
            }
            // COGS
            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
            if (glAccCOGSfifo.ID > 0)
            {
                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                if (listCOGSfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                    glAccCOGSfifo.Balance -= COGSAccAmount;
                    //journalEntryDetail
                    listCOGSfifo.Credit += COGSAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                    accBalance.Credit += COGSAccAmount;
                }
                else
                {
                    glAccCOGSfifo.Balance -= COGSAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = COGSAccID,
                        Credit = COGSAccAmount,
                        BPAcctID = saleAr.CusID
                    });
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAr.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAr.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                        CumulativeBalance = glAccCOGSfifo.Balance,
                        Credit = COGSAccAmount,
                        LocalSetRate = (decimal)saleAr.LocalSetRate,
                        GLAID = COGSAccID,
                        Effective = EffectiveBlance.Credit
                    });
                }
            }
            _context.Update(glAccRevenfifo);
            _context.Update(glAccInvenfifo);
            _context.Update(glAccCOGSfifo);
            _context.SaveChanges();
        }

        private void InsertFinancialCancelSaleAREdit(
         int revenueAccID,
         int inventoryAccID,
         int COGSAccID,
         List<JournalEntryDetail> journalEntryDetail,
         List<AccountBalance> accountBalance,
         decimal revenueAccAmount,
         decimal inventoryAccAmount,
         decimal COGSAccAmount,
         JournalEntry journalEntry,
         SaleAREdite saleAredit,
         DocumentType docType,
         DocumentType douTypeID,
         GLAccount glAcc
         )
        {
            // Account Revenue
            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
            if (glAccRevenfifo.ID > 0)
            {
                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                if (listRevenfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                    glAccRevenfifo.Balance += revenueAccAmount;
                    //journalEntryDetail
                    listRevenfifo.Debit += revenueAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                    accBalance.Debit += revenueAccAmount;
                }
                else
                {
                    glAccRevenfifo.Balance += revenueAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = revenueAccID,
                        Debit = revenueAccAmount,
                        BPAcctID = saleAredit.CusID
                    });
                    //
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAredit.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAredit.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                        CumulativeBalance = glAccRevenfifo.Balance,
                        Debit = revenueAccAmount,
                        LocalSetRate = (decimal)saleAredit.LocalSetRate,
                        GLAID = revenueAccID,
                        Effective = EffectiveBlance.Debit
                    });
                }
            }
            //inventoryAccID
            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
            if (glAccInvenfifo.ID > 0)
            {
                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                if (listInvenfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                    glAccInvenfifo.Balance += inventoryAccAmount;
                    //journalEntryDetail
                    listInvenfifo.Debit += inventoryAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                    accBalance.Debit += inventoryAccAmount;
                }
                else
                {
                    glAccInvenfifo.Balance += inventoryAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = inventoryAccID,
                        Debit = inventoryAccAmount,
                        BPAcctID = saleAredit.CusID
                    });
                    //
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAredit.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAredit.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                        CumulativeBalance = glAccInvenfifo.Balance,
                        Debit = inventoryAccAmount,
                        LocalSetRate = (decimal)saleAredit.LocalSetRate,
                        GLAID = inventoryAccID,
                        Effective = EffectiveBlance.Debit
                    });
                }
            }
            // COGS
            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
            if (glAccCOGSfifo.ID > 0)
            {
                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                if (listCOGSfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                    glAccCOGSfifo.Balance -= COGSAccAmount;
                    //journalEntryDetail
                    listCOGSfifo.Credit += COGSAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                    accBalance.Credit += COGSAccAmount;
                }
                else
                {
                    glAccCOGSfifo.Balance -= COGSAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = COGSAccID,
                        Credit = COGSAccAmount,
                        BPAcctID = saleAredit.CusID
                    });
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAredit.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAredit.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                        CumulativeBalance = glAccCOGSfifo.Balance,
                        Credit = COGSAccAmount,
                        LocalSetRate = (decimal)saleAredit.LocalSetRate,
                        GLAID = COGSAccID,
                        Effective = EffectiveBlance.Credit
                    });
                }
            }
            _context.Update(glAccRevenfifo);
            _context.Update(glAccInvenfifo);
            _context.Update(glAccCOGSfifo);
            _context.SaveChanges();
        }
        public IEnumerable<ServiceItemSales> GetItemMaster(int PLID, int wareId, int comId)
        {
            var data = (from pld in _context.PriceListDetails.Where(i => i.PriceListID == PLID)
                        join item in _context.ItemMasterDatas.Where(i => i.Sale && !i.Delete && i.CompanyID == comId) on pld.ItemID equals item.ID
                        join uom in _context.UnitofMeasures on pld.UomID equals uom.ID
                        join cur in _context.Currency on pld.CurrencyID equals cur.ID
                        where uom.ID == item.SaleUomID
                        let ws = _context.WarehouseSummary.Where(i => i.ItemID == pld.ItemID && i.WarehouseID == wareId).ToList()
                        select new ServiceItemSales
                        {
                            ID = pld.ID,
                            Barcode = item.Barcode,
                            Code = item.Code,
                            Cost = pld.Cost,
                            Currency = cur.Description,
                            CurrencyID = cur.ID,
                            Description = item.Description,
                            EnglishName = item.EnglishName,
                            Image = item.Image,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            KhmerName = item.KhmerName,

                            PricListID = pld.PriceListID,
                            UnitPrice = pld.UnitPrice,
                            UoM = uom.Name,
                            InStock = ws.Sum(s => s.InStock),
                            UomID = uom.ID,
                            Process = item.Process,

                        }).GroupBy(i => i.ItemID).Select(i => i.FirstOrDefault()).ToList();
            _dataProp.DataProperty(data, comId, "ItemID", "AddictionProps");
            return data;
        }
        private List<TaxGroupViewModel> GetTaxGroups()
        {
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            return tgs;
        }
        public IEnumerable<SaleQuoteDetailViewModel> GetItemDetails(
            int PLID, int comId, int itemId, string barCode, int uomId
            )
        {
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var _item = new ItemMasterData();
            var _priceListDetails = new List<PriceListDetail>();
            if (uomId == 0)
                _priceListDetails = _context.PriceListDetails.Where(i => i.PriceListID == PLID).ToList();
            else
                _priceListDetails = _context.PriceListDetails.Where(i => i.PriceListID == PLID && i.UomID == uomId).ToList();
            if (itemId != 0)
            {
                _item = _context.ItemMasterDatas.Find(itemId);
            }
            if (barCode != null)
            {
                _item = _context.ItemMasterDatas.FirstOrDefault(i => i.Barcode == barCode) ?? new ItemMasterData();
            }
            var tgs = GetTaxGroups();
            tgs.Insert(0, _tg);
            var uoms = from guom in _context.ItemMasterDatas.Where(i => i.ID == _item.ID)
                       join GDU in _context.GroupDUoMs on guom.GroupUomID equals GDU.GroupUoMID
                       join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                       select new UOMSViewModel
                       {
                           BaseUoMID = GDU.BaseUOM,
                           Factor = GDU.Factor,
                           ID = UNM.ID,
                           Name = UNM.Name
                       };
            var uomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == _item.ID && i.PriceListID == PLID)
                                 select new UomPriceList
                                 {
                                     UoMID = (int)pld.UomID,
                                     UnitPrice = (decimal)pld.UnitPrice
                                 }).ToList();

            var data = (from pld in _priceListDetails
                        join item in _context.ItemMasterDatas.Where(i => i.Sale && !i.Delete && i.CompanyID == comId && i.ID == _item.ID) on pld.ItemID equals item.ID
                        join GDU in _context.GroupDUoMs on item.GroupUomID equals GDU.GroupUoMID
                        join uom in _context.UnitofMeasures on pld.UomID equals uom.ID
                        join cur in _context.Currency on pld.CurrencyID equals cur.ID
                        join ptn in _context.PrinterNames on item.PrintToID equals ptn.ID
                        where uom.ID == item.SaleUomID
                        let tg = _context.TaxGroups.FirstOrDefault(i => !i.Delete && i.Active && item.TaxGroupSaleID == i.ID) ?? new TaxGroup()
                        let ex = _context.ExchangeRates.FirstOrDefault(i => i.CurrencyID == pld.CurrencyID)
                        let tgd = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == tg.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                        let taxValue = (tgd.Rate * (decimal)pld.UnitPrice) == 0 ? 0 : tgd.Rate * (decimal)pld.UnitPrice / 100
                        select new SaleQuoteDetailViewModel
                        {
                            ID = 0,
                            LineID = DateTime.Now.Ticks.ToString(),
                            ItemCode = item.Code,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)(pld.UnitPrice * ex.Rate),
                            SQDID = 0,
                            SQID = 0,
                            CurrencyID = cur.ID,
                            DisRate = 0,
                            DisValue = 0,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = 1,
                            OpenQty = 1,
                            TypeDis = pld.TypeDis,
                            UnitPrice = (decimal)pld.UnitPrice,
                            Cost = (decimal)pld.Cost,
                            UomName = uom.Name,
                            UomID = uom.ID,
                            TaxGroupID = tg.ID,
                            TaxRate = tgd.Rate,
                            Remarks = "",
                             LoanPartnerID=0,
                            LoanPartnerName = "",
                            TaxDownPaymentValue = 0,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == tg.ID
                            }).ToList(),
                            Total = (decimal)pld.UnitPrice,
                            TaxValue = taxValue,
                            TotalWTax = (decimal)pld.UnitPrice + taxValue,
                            UoMs = uoms.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = c.Name,
                                Selected = c.ID == pld.UomID
                            }).ToList(),
                            UoMsList = uoms.ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = uomPriceLists,
                            FinDisRate = 0,
                            FinDisValue = 0,
                            TaxOfFinDisValue = 0,
                            FinTotalValue = (decimal)pld.UnitPrice + taxValue,
                            Image = item.Image
                        }).GroupBy(i => i.ItemID).Select(i => i.FirstOrDefault()).ToList();
            _dataProp.DataProperty(data, comId, "ItemID", "AddictionProps");
            return data;
        }

        public SaleCreditMemoDetailViewModel GetItemDetailsForSaleCM(int PLID, int comId, int itemId, string barCode, int uomId, int wareId, string process)
        {
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var _item = new ItemMasterData();
            var _priceListDetails = new List<PriceListDetail>();
            if (uomId == 0)
                _priceListDetails = _context.PriceListDetails.Where(i => i.PriceListID == PLID).ToList();
            else
                _priceListDetails = _context.PriceListDetails.Where(i => i.PriceListID == PLID && i.UomID == uomId).ToList();
            if (itemId != 0)
            {
                _item = _context.ItemMasterDatas.Find(itemId);
            }
            if (barCode != null)
            {
                _item = _context.ItemMasterDatas.FirstOrDefault(i => i.Barcode == barCode) ?? new ItemMasterData();
                process = _item.Process;
            }
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            var uoms = from guom in _context.ItemMasterDatas.Where(i => i.ID == _item.ID)
                       join GDU in _context.GroupDUoMs on guom.GroupUomID equals GDU.GroupUoMID
                       join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                       select new UOMSViewModel
                       {
                           BaseUoMID = GDU.BaseUOM,
                           Factor = GDU.Factor,
                           ID = UNM.ID,
                           Name = UNM.Name
                       };
            var uomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == _item.ID && i.PriceListID == PLID)
                                 select new UomPriceList
                                 {
                                     UoMID = (int)pld.UomID,
                                     UnitPrice = (decimal)pld.UnitPrice
                                 }).ToList();

            List<SaleCreditMemoDetailViewModel> items = new();
            var data = (from pld in _priceListDetails
                            //join wd in _context.WarehouseDetails on pld.ItemID equals wd.ItemID
                        join item in _context.ItemMasterDatas.Where(i => i.Sale && !i.Delete && i.CompanyID == comId && i.ID == _item.ID) on pld.ItemID equals item.ID
                        join GDU in _context.GroupDUoMs on item.GroupUomID equals GDU.GroupUoMID
                        join uom in _context.UnitofMeasures on pld.UomID equals uom.ID
                        join cur in _context.Currency on pld.CurrencyID equals cur.ID
                        join ptn in _context.PrinterNames on item.PrintToID equals ptn.ID
                        where GDU.BaseUOM == item.SaleUomID //&& wd.WarehouseID == wareId
                        let tg = _context.TaxGroups.FirstOrDefault(i => !i.Delete && i.Active && item.TaxGroupSaleID == i.ID) ?? new TaxGroup()
                        let ex = _context.ExchangeRates.FirstOrDefault(i => i.CurrencyID == pld.CurrencyID)
                        let tgd = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == tg.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                        let taxValue = (tgd.Rate * (decimal)pld.UnitPrice) == 0 ? 0 : tgd.Rate * (decimal)pld.UnitPrice / 100
                        //let ws = _context.WarehouseSummary.Where(i => i.WarehouseID == wd.WarehouseID && i.ItemID == item.ID)
                        select new SaleCreditMemoDetailViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString(),
                            SaleCopyType = SaleCopyType.None,
                            ItemCode = item.Code,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)(pld.UnitPrice * ex.Rate),
                            //Cost = (decimal)(wd.Cost * ex.SetRate),
                            //Avgcost = (decimal)(ws.FirstOrDefault().Cost * ex.SetRate),
                            CurrencyID = cur.ID,
                            DisRate = 0,
                            DisValue = 0,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = 1,
                            OpenQty = 1,
                            UnitPrice = 0,
                            UomName = uom.Name,
                            UomID = uom.ID,
                            TaxGroupID = tg.ID,
                            TaxRate = tgd.Rate,
                            Remarks = "",
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == tg.ID
                            }).ToList(),
                            Total = (decimal)pld.UnitPrice,
                            TaxValue = taxValue,
                            TotalWTax = (decimal)pld.UnitPrice + taxValue,
                            UoMs = uoms.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = c.Name,
                                Selected = c.ID == pld.UomID
                            }).ToList(),
                            UoMsList = uoms.ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = uomPriceLists,
                            FinDisRate = 0,
                            FinDisValue = 0,
                            TaxOfFinDisValue = 0,
                            FinTotalValue = (decimal)pld.UnitPrice + taxValue,
                        }).FirstOrDefault();
            List<SaleCreditMemoDetailViewModel> _data = new();
            if (data != null)
            {
                var wd = _context.WarehouseDetails.FirstOrDefault(i => i.ItemID == data.ItemID) ?? new WarehouseDetail();
                var ws = _context.WarehouseSummary.Where(i => i.WarehouseID == wd.WarehouseID && i.ItemID == data.ItemID);
                var pld = _priceListDetails.FirstOrDefault(i => i.ItemID == data.ItemID) ?? new PriceListDetail();
                var ex = _context.ExchangeRates.FirstOrDefault(i => i.CurrencyID == pld.CurrencyID) ?? new ExchangeRate();
                if (data.Process != "Standard")
                {
                    data.Cost = (decimal)(wd.Cost * ex.SetRate);
                    data.Avgcost = (decimal)(ws.FirstOrDefault().Cost * ex.SetRate);
                    data.Stock = ws.Sum(i => i.InStock);
                    if (data.Process == "Average")
                    {
                        data.UnitPrice = data.Avgcost;
                    }
                    else
                    {
                        data.UnitPrice = data.Cost;
                    }
                }
                else
                {
                    data.Cost = (decimal)(pld.Cost * ex.SetRate);
                    data.UnitPrice = data.Cost;
                }
                _data.Add(data);
            }
            _dataProp.DataProperty(_data, comId, "ItemID", "AddictionProps");
            return _data.FirstOrDefault();
        }

        public SaleQuoteUpdateViewModel FindSaleQuote(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleQ = (from sq in _context.SaleQuotes.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                         join docType in _context.DocumentTypes on sq.DocTypeID equals docType.ID
                         let sem = _context.Employees.FirstOrDefault(i => sq.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                         let fs = _context.FreightSales.Where(i => i.SaleID == sq.SQID && i.SaleType == SaleCopyType.Quotation).FirstOrDefault() ?? new FreightSale()
                         let reqBy = _context.Employees.FirstOrDefault(i => i.ID == sq.RequestedBy) ?? new HumanResourcesEmployee()
                         let shipBy = _context.Employees.FirstOrDefault(i => i.ID == sq.ShippedBy) ?? new HumanResourcesEmployee()
                         let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == sq.ReceivedBy) ?? new HumanResourcesEmployee()
                         select new SaleQuoteViewModel
                         {
                             BranchID = sq.BranchID,

                             ReceivedByID = receiveBy.ID,
                             RequestedByID = reqBy.ID,
                             ShippedByID = shipBy.ID,
                             BaseOnID = sq.BaseOnID,
                             RequestedByName = reqBy.Name,
                             ShippedByName = shipBy.Name,
                             ReceivedByName = receiveBy.Name,

                             ChangeLog = sq.ChangeLog,
                             BaseonProjCostANID = sq.BaseonProjCostANID,
                             CompanyID = sq.CompanyID,
                             CusID = sq.CusID,
                             DeliveryDate = sq.ValidUntilDate,
                             DisRate = (decimal)sq.DisRate,
                             DisValue = (decimal)sq.DisValue,
                             DocTypeID = sq.DocTypeID,
                             DocumentDate = sq.DocumentDate,
                             ExchangeRate = (decimal)sq.ExchangeRate,
                             FreightAmount = sq.FreightAmount,
                             FreightAmountSys = sq.FreightAmountSys,
                             SaleEmID = sq.SaleEmID,
                             SaleEmName = sem.Name ?? "",
                             FreightSalesView = new FreightSaleView
                             {
                                 AmountReven = fs.AmountReven,
                                 SaleID = sq.SQID,
                                 ID = fs.ID,
                                 SaleType = fs.SaleType,
                                 TaxSumValue = fs.TaxSumValue,
                                 FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                select new FreightSaleDetailViewModel
                                                                {
                                                                    ID = fsd.ID,
                                                                    FreightSaleID = fsd.FreightSaleID,
                                                                    Amount = fsd.Amount,
                                                                    AmountWithTax = fsd.AmountWithTax,
                                                                    FreightID = fsd.FreightID,
                                                                    Name = fsd.Name,
                                                                    TaxGroup = fsd.TaxGroup,
                                                                    TaxGroupID = fsd.TaxGroupID,
                                                                    TaxGroups = GetTaxGroups(),
                                                                    TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                    {
                                                                        Value = i.ID.ToString(),
                                                                        Selected = fsd.TaxGroupID == i.ID,
                                                                        Text = $"{i.Code}-{i.Name}"
                                                                    }).ToList(),
                                                                    TaxRate = fsd.TaxRate,
                                                                    TotalTaxAmount = fsd.TotalTaxAmount
                                                                }).ToList(),
                             },
                             IncludeVat = sq.IncludeVat,
                             InvoiceNo = $"{"SaleQuotation:"}{docType.Code}-{sq.InvoiceNumber}",
                             InvoiceNumber = sq.InvoiceNumber,
                             LocalCurID = sq.LocalCurID,
                             LocalSetRate = (decimal)sq.LocalSetRate,
                             PostingDate = sq.PostingDate,
                             PriceListID = sq.PriceListID,
                             RefNo = sq.RefNo,
                             Remarks = sq.Remarks,
                             SaleCurrencyID = sq.SaleCurrencyID,
                             SeriesDID = sq.SeriesDID,
                             SeriesID = sq.SeriesID,
                             SQID = sq.SQID,
                             Status = sq.Status,
                             SubTotal = (decimal)sq.SubTotal,
                             SubTotalAfterDis = sq.SubTotalAfterDis,
                             SubTotalAfterDisSys = sq.SubTotalAfterDisSys,
                             SubTotalBefDis = sq.SubTotalBefDis,
                             SubTotalBefDisSys = sq.SubTotalBefDisSys,
                             SubTotalSys = (decimal)sq.SubTotalSys,
                             TotalAmount = (decimal)sq.TotalAmount,
                             TotalAmountSys = (decimal)sq.TotalAmountSys,
                             TypeDis = sq.TypeDis,
                             UserID = sq.UserID,
                             ValidUntilDate = sq.ValidUntilDate,
                             VatRate = (decimal)sq.VatRate,
                             VatValue = (decimal)sq.VatValue,
                             WarehouseID = sq.WarehouseID
                         }).ToList();
            var doctype = new DocumentType();
            Currency _cur = new();
            if (saleQ.Count > 0)
            {
                _cur = _context.Currency.Find(saleQ.FirstOrDefault().SaleCurrencyID) ?? new Currency();
            }
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sq in saleQ
                        join sqd in _context.SaleQuoteDetails on sq.SQID equals sqd.SQID
                        join item in _context.ItemMasterDatas on sqd.ItemID equals item.ID
                        join cur in _context.Currency on sq.SaleCurrencyID equals cur.ID
                        select new SaleQuoteDetailViewModel
                        {
                            LineID = string.IsNullOrWhiteSpace(sqd.LineID) ? DateTime.Now.Ticks.ToString() : sqd.LineID,
                            SaleCopyType = sqd.SaleCopyType,
                            ItemCode = sqd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sqd.TotalSys,
                            SQDID = sqd.SQDID,
                            SQID = sq.SQID,
                            Cost = (decimal)sqd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sqd.DisRate,
                            DisValue = (decimal)sqd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sqd.Qty,
                            OpenQty = (decimal)sqd.OpenQty,
                            TypeDis = sqd.TypeDis,
                            UnitPrice = (decimal)sqd.UnitPrice,
                            UomName = sqd.UomName,
                            UomID = sqd.UomID,
                            TaxGroupID = sqd.TaxGroupID,
                            TaxRate = sqd.TaxRate,
                            Remarks = sqd.Remarks,
                            TaxDownPaymentValue = 0M,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sqd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sqd.TotalWTax,
                            TaxValue = sqd.TaxValue,
                            Total = (decimal)sqd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sqd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sq.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                            FinDisRate = sqd.FinDisRate,
                            FinDisValue = sqd.FinDisValue,
                            FinTotalValue = sqd.FinTotalValue,
                            TaxOfFinDisValue = sqd.TaxOfFinDisValue,
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new SaleQuoteUpdateViewModel
            {
                SaleQuote = saleQ.FirstOrDefault(),
                SaleQuoteDetails = _sqd,
                Currency = _cur
            };
            return data;
        }
        public SaleARDownUpdateViewModel FindSaleARDown(string number, int seriesId, int comId, bool fromCN = false)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var ardownpm = (from ard in _context.ARDownPayments.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                            join docType in _context.DocumentTypes on ard.DocTypeID equals docType.ID
                            let sem = _context.Employees.FirstOrDefault(i => ard.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                            let fs = _context.FreightSales.Where(i => i.SaleID == ard.ARDID && i.SaleType == SaleCopyType.ARDownPayment).FirstOrDefault() ?? new FreightSale()
                            let reqBy = _context.Employees.FirstOrDefault(i => i.ID == ard.RequestedBy) ?? new HumanResourcesEmployee()
                            let shipBy = _context.Employees.FirstOrDefault(i => i.ID == ard.ShippedBy) ?? new HumanResourcesEmployee()
                            let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == ard.ReceivedBy) ?? new HumanResourcesEmployee()
                            select new SaleARDownPaymentInvoiceViewModel
                            {
                                BranchID = ard.BranchID,
                                RequestedByID = reqBy.ID,
                                ShippedByID = shipBy.ID,
                                ReceivedByID = receiveBy.ID,
                                BaseOnID = ard.ARDID,
                                RequestedByName = reqBy.Name,
                                ShippedByName = shipBy.Name,
                                ReceivedByName = receiveBy.Name,
                                TotalAmount = (decimal)ard.TotalAmount,
                                ChangeLog = ard.ChangeLog,
                                BasedCopyKeys = ard.BasedCopyKeys,
                                CopyKey = ard.CopyKey,
                                CopyType = ard.CopyType,
                                DueDate = ard.DueDate,
                                DeliveryDate = ard.DueDate,
                                BalanceDue = ard.BalanceDue,
                                AppliedAmountSys = ard.AppliedAmountSys,
                                BalanceDueSys = ard.BalanceDueSys,
                                Total = (decimal)ard.Total,
                                AppliedAmount = ard.AppliedAmount,
                                CompanyID = ard.CompanyID,
                                CusID = ard.CusID,
                                DisRate = ard.DisRate,
                                DisValue = ard.DisValue,
                                DPMRate = ard.DPMRate,
                                DPMValue = ard.DPMValue,
                                DocTypeID = ard.DocTypeID,
                                DocumentDate = ard.DocumentDate,
                                ExchangeRate = ard.ExchangeRate,
                                InvoiceNo = $"{docType.Code}-{ard.InvoiceNumber}",
                                InvoiceNumber = ard.InvoiceNumber,
                                LocalCurID = ard.LocalCurID,
                                LocalSetRate = ard.LocalSetRate,
                                PostingDate = ard.PostingDate,
                                PriceListID = ard.PriceListID,
                                RefNo = ard.RefNo,
                                Remarks = ard.Remarks,
                                SaleCurrencyID = ard.SaleCurrencyID,
                                SeriesDID = ard.SeriesDID,
                                SeriesID = ard.SeriesID,
                                ARDID = ard.ARDID,

                                Status = ard.Status,
                                SubTotal = (decimal)ard.SubTotal,
                                SubTotalAfterDis = ard.SubTotalAfterDis,
                                SubTotalAfterDisSys = ard.SubTotalAfterDisSys,
                                SubTotalBefDis = ard.SubTotalBefDis,
                                SubTotalBefDisSys = ard.SubTotalBefDisSys,
                                SubTotalSys = (decimal)ard.SubTotalSys,
                                TotalAmountSys = (decimal)ard.TotalAmountSys,
                                TypeDis = ard.TypeDis,
                                UserID = ard.UserID,
                                FreightAmount = 0,
                                ValidUntilDate = ard.ValidUntilDate,
                                WarehouseID = ard.WarehouseID,
                                VatRate = ard.VatRate,
                                VatValue = ard.VatValue,
                                SaleEmID = ard.SaleEmID,
                                SaleEmName = sem.Name ?? "",
                                FreightSalesView = new FreightSaleView
                                {
                                    AmountReven = fs.AmountReven,
                                    SaleID = ard.ARDID,
                                    ID = fs.ID,
                                    SaleType = fs.SaleType,
                                    TaxSumValue = fs.TaxSumValue,
                                    FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                   select new FreightSaleDetailViewModel
                                                                   {
                                                                       ID = fsd.ID,
                                                                       FreightSaleID = fsd.FreightSaleID,
                                                                       Amount = fsd.Amount,
                                                                       AmountWithTax = fsd.AmountWithTax,
                                                                       FreightID = fsd.FreightID,
                                                                       Name = fsd.Name,
                                                                       TaxGroup = fsd.TaxGroup,
                                                                       TaxGroupID = fsd.TaxGroupID,
                                                                       TaxGroups = GetTaxGroups(),
                                                                       TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                       {
                                                                           Value = i.ID.ToString(),
                                                                           Selected = fsd.TaxGroupID == i.ID,
                                                                           Text = $"{i.Code}-{i.Name}"
                                                                       }).ToList(),
                                                                       TaxRate = fsd.TaxRate,
                                                                       TotalTaxAmount = fsd.TotalTaxAmount
                                                                   }).ToList(),
                                },
                            }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           //GLID = tg.GLID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _ardd = (from ard in ardownpm
                         join ardd in _context.ARDownPaymentDetails on ard.ARDID equals ardd.ARDID
                         join item in _context.ItemMasterDatas on ardd.ItemID equals item.ID
                         join cur in _context.Currency on ard.SaleCurrencyID equals cur.ID
                         select new SaleARDownDetailViewModel
                         {
                             LineID = DateTime.Now.Ticks.ToString(),
                             ID = ardd.ID,
                             ItemCode = ardd.ItemCode,
                             BarCode = item.Barcode,
                             Currency = cur.Description,
                             TotalSys = (decimal)ardd.TotalSys,
                             ARDID = ardd.ARDID,
                             Cost = ardd.Cost,
                             CurrencyID = cur.ID,
                             DisRate = ardd.DisRate,
                             DisValue = ardd.DisValue,
                             ItemNameEN = item.EnglishName,
                             ItemNameKH = item.KhmerName,
                             GUomID = item.GroupUomID,
                             ItemID = item.ID,
                             ItemType = item.Type,
                             Process = item.Process,
                             Qty = ardd.Qty,
                             TotalWTaxSys = ardd.TotalWTaxSys,
                             OpenQty = ardd.OpenQty,
                             UnitPrice = ardd.UnitPrice,
                             UomName = ardd.UomName,
                             UomID = ardd.UomID,
                             TaxGroupID = ardd.TaxGroupID,
                             Remarks = ardd.Remarks,
                             TaxDownPaymentValue = ardd.TaxDownPaymentValue,
                             TaxOfFinDisValue = fromCN ? ardd.TaxDownPaymentValue : ardd.TaxOfFinDisValue,
                             FinTotalValue = ardd.FinTotalValue,
                             TaxRate = ardd.TaxRate,
                             FinDisRate = ardd.FinDisRate,
                             FinDisValue = ardd.FinDisValue,
                             TaxGroupList = tgs.Select(c => new SelectListItem
                             {
                                 Value = c.ID.ToString(),
                                 Text = $"{c.Code}-{c.Name}",
                                 Selected = c.ID == ardd.TaxGroupID
                             }).ToList(),
                             TotalWTax = ardd.TotalWTax,
                             TaxValue = ardd.TaxValue,
                             Total = (decimal)ardd.Total,
                             /// select List UoM ///
                             UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                     join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                     select new UOMSViewModel
                                     {
                                         BaseUoMID = GDU.BaseUOM,
                                         Factor = GDU.Factor,
                                         ID = UNM.ID,
                                         Name = UNM.Name
                                     }).Select(c => new SelectListItem
                                     {
                                         Value = c.ID.ToString(),
                                         Text = c.Name,
                                         Selected = c.ID == ardd.UomID
                                     }).ToList(),
                             /// List UoM ///
                             UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                         join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                         select new UOMSViewModel
                                         {
                                             BaseUoMID = GDU.BaseUOM,
                                             Factor = GDU.Factor,
                                             ID = UNM.ID,
                                             Name = UNM.Name
                                         }).ToList(),
                             TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                          let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                          select new TaxGroupViewModel
                                          {
                                              ID = t.ID,
                                              //GLID = tg.GLID,
                                              Name = t.Name,
                                              Code = t.Code,
                                              Effectivefrom = tgds.EffectiveFrom,
                                              Rate = tgds.Rate,
                                              Type = (int)t.Type,
                                          }
                                          ).ToList(),
                             UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == ard.PriceListID)
                                              select new UomPriceList
                                              {
                                                  UoMID = (int)pld.UomID,
                                                  UnitPrice = (decimal)pld.UnitPrice
                                              }
                                              ).ToList(),
                         }
                        ).ToList();
            _dataProp.DataProperty(_ardd, comId, "ItemID", "AddictionProps");
            var data = new SaleARDownUpdateViewModel
            {
                ARDownPayment = ardownpm.FirstOrDefault(),
                SaleARDownDetails = _ardd,
            };
            return data;
        }
        public SaleOrderUpdateViewModel FindSaleOrder(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleO = (from so in _context.SaleOrders.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                         join docType in _context.DocumentTypes on so.DocTypeID equals docType.ID
                         let sem = _context.Employees.FirstOrDefault(i => so.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                         let fs = _context.FreightSales.Where(i => i.SaleID == so.SOID && i.SaleType == SaleCopyType.Order).FirstOrDefault() ?? new FreightSale()
                         let reqBy = _context.Employees.FirstOrDefault(i => i.ID == so.RequestedBy) ?? new HumanResourcesEmployee()
                         let shipBy = _context.Employees.FirstOrDefault(i => i.ID == so.ShippedBy) ?? new HumanResourcesEmployee()
                         let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == so.ReceivedBy) ?? new HumanResourcesEmployee()

                         select new SaleOrderViewModel
                         {
                             BasedCopyKeys = so.BasedCopyKeys,
                             RequestedByID = reqBy.ID,
                             ShippedByID = shipBy.ID,
                             ReceivedByID = receiveBy.ID,
                             BaseOnID = so.BaseOnID,
                             RequestedByName = reqBy.Name,
                             ShippedByName = shipBy.Name,
                             ReceivedByName = receiveBy.Name,
                             CopyKey = so.CopyKey,
                             CopyType = so.CopyType,
                             BranchID = so.BranchID,
                             ChangeLog = so.ChangeLog,
                             CompanyID = so.CompanyID,
                             CusID = so.CusID,
                             DeliveryDate = so.DeliveryDate,
                             DisRate = (decimal)so.DisRate,
                             DisValue = (decimal)so.DisValue,
                             DocTypeID = so.DocTypeID,
                             DocumentDate = so.DocumentDate,
                             ExchangeRate = (decimal)so.ExchangeRate,
                             FreightAmount = so.FreightAmount,
                             FreightAmountSys = so.FreightAmountSys,
                             SaleEmID = sem.ID,
                             SaleEmName = sem.Name ?? "",
                             FreightSalesView = new FreightSaleView
                             {
                                 AmountReven = fs.AmountReven,
                                 SaleID = so.SOID,
                                 ID = fs.ID,
                                 SaleType = fs.SaleType,
                                 TaxSumValue = fs.TaxSumValue,
                                 FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                select new FreightSaleDetailViewModel
                                                                {
                                                                    ID = fsd.ID,
                                                                    FreightSaleID = fsd.FreightSaleID,
                                                                    Amount = fsd.Amount,
                                                                    AmountWithTax = fsd.AmountWithTax,
                                                                    FreightID = fsd.FreightID,
                                                                    Name = fsd.Name,
                                                                    TaxGroup = fsd.TaxGroup,
                                                                    TaxGroupID = fsd.TaxGroupID,
                                                                    TaxGroups = GetTaxGroups(),
                                                                    TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                    {
                                                                        Value = i.ID.ToString(),
                                                                        Selected = fsd.TaxGroupID == i.ID,
                                                                        Text = $"{i.Code}-{i.Name}"
                                                                    }).ToList(),
                                                                    TaxRate = fsd.TaxRate,
                                                                    TotalTaxAmount = fsd.TotalTaxAmount
                                                                }).ToList(),
                             },
                             IncludeVat = so.IncludeVat,
                             InvoiceNo = $"{so.CopyKey}{"/SaleOrder:"}{docType.Code}-{so.InvoiceNumber}",
                             InvoiceNumber = so.InvoiceNumber,
                             LocalCurID = so.LocalCurID,
                             LocalSetRate = (decimal)so.LocalSetRate,
                             PostingDate = so.PostingDate,
                             PriceListID = so.PriceListID,
                             RefNo = so.RefNo,
                             Remarks = so.Remarks,
                             SaleCurrencyID = so.SaleCurrencyID,
                             SeriesDID = so.SeriesDID,
                             SeriesID = so.SeriesID,
                             SOID = so.SOID,
                             Status = so.Status,
                             SubTotal = (decimal)so.SubTotal,
                             SubTotalAfterDis = so.SubTotalAfterDis,
                             SubTotalAfterDisSys = so.SubTotalAfterDisSys,
                             SubTotalBefDis = so.SubTotalBefDis,
                             SubTotalBefDisSys = so.SubTotalBefDisSys,
                             SubTotalSys = (decimal)so.SubTotalSys,
                             TotalAmount = (decimal)so.TotalAmount,
                             TotalAmountSys = (decimal)so.TotalAmountSys,
                             TypeDis = so.TypeDis,
                             UserID = so.UserID,
                             VatRate = (decimal)so.VatRate,
                             VatValue = (decimal)so.VatValue,
                             WarehouseID = so.WarehouseID
                         }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           //GLID = tg.GLID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from so in saleO
                        join sod in _context.SaleOrderDetails on so.SOID equals sod.SOID
                        join item in _context.ItemMasterDatas on sod.ItemID equals item.ID
                        join cur in _context.Currency on so.SaleCurrencyID equals cur.ID
                        select new SaleOrderdetailViewModel
                        {
                            LineID = sod.LineID,
                            ItemCode = sod.ItemCode,
                            SaleCopyType = sod.SaleCopyType,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sod.TotalSys,
                            SQDID = sod.SQDID,
                            SOID = so.SOID,
                            SODID = sod.SODID,
                            Cost = (decimal)sod.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sod.DisRate,
                            DisValue = (decimal)sod.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sod.Qty,
                            OpenQty = (decimal)sod.OpenQty,
                            TypeDis = sod.TypeDis,
                            UnitPrice = (decimal)sod.UnitPrice,
                            UomName = sod.UomName,
                            UomID = sod.UomID,
                            TaxGroupID = sod.TaxGroupID,
                            TaxRate = sod.TaxRate,
                            TotalWTaxSys = (decimal)sod.TotalWTaxSys,
                            Remarks = sod.Remarks,
                            TaxDownPaymentValue = 0M,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sod.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sod.TotalWTax,
                            TaxValue = sod.TaxValue,
                            Total = (decimal)sod.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sod.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == so.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                            FinDisRate = sod.FinDisRate,
                            FinDisValue = sod.FinDisValue,
                            FinTotalValue = sod.FinTotalValue,
                            TaxOfFinDisValue = sod.TaxOfFinDisValue,
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new SaleOrderUpdateViewModel
            {
                SaleOrder = saleO.FirstOrDefault(),
                SaleOrderDetails = _sqd,
            };
            return data;
        }
        public SaleARUpdateViewModel FindItemMasterData(string number, int seriesId, int comId)
        {
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleAR = (from so in _context.SaleOrders.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on so.DocTypeID equals docType.ID
                          let fs = _context.FreightSales.Where(i => i.SaleID == so.SOID && i.SaleType == SaleCopyType.Order).FirstOrDefault() ?? new FreightSale()
                          select new SaleARViewModel
                          {
                              SARID = 0,
                              BasedCopyKeys = so.BasedCopyKeys,
                              CopyKey = so.CopyKey,
                              CopyType = so.CopyType,
                              BranchID = so.BranchID,
                              ChangeLog = so.ChangeLog,
                              CompanyID = so.CompanyID,
                              CusID = so.CusID,
                              DeliveryDate = so.DeliveryDate,
                              DisRate = (decimal)so.DisRate,
                              DisValue = (decimal)so.DisValue,
                              DocTypeID = so.DocTypeID,
                              DocumentDate = so.DocumentDate,
                              ExchangeRate = (decimal)so.ExchangeRate,
                              FreightAmount = so.FreightAmount,
                              FreightAmountSys = so.FreightAmountSys,
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven,
                                  SaleID = so.SOID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = so.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{so.InvoiceNumber}",
                              InvoiceNumber = so.InvoiceNumber,
                              LocalCurID = so.LocalCurID,
                              LocalSetRate = (decimal)so.LocalSetRate,
                              PostingDate = so.PostingDate,
                              PriceListID = so.PriceListID,
                              RefNo = so.RefNo,
                              Remarks = so.Remarks,
                              SaleCurrencyID = so.SaleCurrencyID,
                              SeriesDID = so.SeriesDID,
                              SeriesID = so.SeriesID,
                              Status = so.Status,
                              SubTotal = (decimal)so.SubTotal,
                              SubTotalAfterDis = so.SubTotalAfterDis,
                              SubTotalAfterDisSys = so.SubTotalAfterDisSys,
                              SubTotalBefDis = so.SubTotalBefDis,
                              SubTotalBefDisSys = so.SubTotalBefDisSys,
                              SubTotalSys = (decimal)so.SubTotalSys,
                              TotalAmount = (decimal)so.TotalAmount,
                              TotalAmountSys = (decimal)so.TotalAmountSys,
                              TypeDis = so.TypeDis,
                              UserID = so.UserID,
                              VatRate = (decimal)so.VatRate,
                              VatValue = (decimal)so.VatValue,
                              WarehouseID = so.WarehouseID
                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           //GLID = tg.GLID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            var _sard = (from so in saleAR
                         join sod in _context.SaleOrderDetails on so.SARID equals sod.SOID
                         join item in _context.ItemMasterDatas on sod.ItemID equals item.ID
                         join cur in _context.Currency on so.SaleCurrencyID equals cur.ID
                         select new SaleARDetailViewModel
                         {
                             LineID = DateTime.Now.Ticks.ToString(),
                             ItemCode = sod.ItemCode,
                             BarCode = item.Barcode,
                             Currency = cur.Description,
                             TotalSys = (decimal)sod.UnitPrice * so.ExchangeRate,
                             SQDID = sod.SQDID,
                             SODID = sod.SODID,
                             Cost = (decimal)sod.Cost,
                             CurrencyID = cur.ID,
                             DisRate = (decimal)sod.DisRate,
                             DisValue = (decimal)sod.DisValue,
                             ItemNameEN = item.EnglishName,
                             ItemNameKH = item.KhmerName,
                             GUomID = item.GroupUomID,
                             ItemID = item.ID,
                             ItemType = item.Type,
                             Process = item.Process,
                             Qty = (decimal)sod.Qty,
                             OpenQty = (decimal)sod.OpenQty,
                             UnitPrice = (decimal)sod.UnitPrice,
                             UomName = sod.UomName,
                             UomID = sod.UomID,
                             TaxGroupID = sod.TaxGroupID,
                             TaxRate = sod.TaxRate,
                             Remarks = sod.Remarks,
                             TaxGroupList = tgs.Select(c => new SelectListItem
                             {
                                 Value = c.ID.ToString(),
                                 Text = $"{c.Code}-{c.Name}",
                                 Selected = c.ID == sod.TaxGroupID
                             }).ToList(),
                             TotalWTax = (decimal)sod.TotalWTax,
                             TaxValue = sod.TaxValue,
                             Total = (decimal)sod.Total,
                             /// select List UoM ///
                             UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                     join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                     select new UOMSViewModel
                                     {
                                         BaseUoMID = GDU.BaseUOM,
                                         Factor = GDU.Factor,
                                         ID = UNM.ID,
                                         Name = UNM.Name
                                     }).Select(c => new SelectListItem
                                     {
                                         Value = c.ID.ToString(),
                                         Text = c.Name,
                                         Selected = c.ID == sod.UomID
                                     }).ToList(),
                             /// List UoM ///
                             UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                         join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                         select new UOMSViewModel
                                         {
                                             BaseUoMID = GDU.BaseUOM,
                                             Factor = GDU.Factor,
                                             ID = UNM.ID,
                                             Name = UNM.Name
                                         }).ToList(),
                             TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                          let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                          select new TaxGroupViewModel
                                          {
                                              ID = t.ID,
                                              //GLID = tg.GLID,
                                              Name = t.Name,
                                              Code = t.Code,
                                              Effectivefrom = tgds.EffectiveFrom,
                                              Rate = tgds.Rate,
                                              Type = (int)t.Type,
                                          }
                                          ).ToList(),
                             UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == so.PriceListID)
                                              select new UomPriceList
                                              {
                                                  UoMID = (int)pld.UomID,
                                                  UnitPrice = (decimal)pld.UnitPrice
                                              }
                                              ).ToList(),
                             FinDisRate = sod.FinDisRate,
                             FinDisValue = sod.FinDisValue,
                             FinTotalValue = sod.FinTotalValue,
                             TaxOfFinDisValue = sod.TaxOfFinDisValue,
                         }).ToList();
            var data = new SaleARUpdateViewModel
            {
                SaleAR = saleAR.FirstOrDefault(),
                SaleARDetails = _sard,
            };
            return data;
        }
        //===========item master data============
        public SaleDeliveryUpdateViewModel FindSaleDelivery(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleD = (from sd in _context.SaleDeliveries.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                         join docType in _context.DocumentTypes on sd.DocTypeID equals docType.ID
                         let sem = _context.Employees.FirstOrDefault(i => sd.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                         let fs = _context.FreightSales.Where(i => i.SaleID == sd.SDID && i.SaleType == SaleCopyType.Delivery).FirstOrDefault() ?? new FreightSale()
                         let reqBy = _context.Employees.FirstOrDefault(i => i.ID == sd.RequestedBy) ?? new HumanResourcesEmployee()
                         let shipBy = _context.Employees.FirstOrDefault(i => i.ID == sd.ShippedBy) ?? new HumanResourcesEmployee()
                         let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == sd.ReceivedBy) ?? new HumanResourcesEmployee()
                         select new SaleDeliveryViewModel
                         {
                             BasedCopyKeys = sd.BasedCopyKeys,
                             RequestedByID = reqBy.ID,
                             ShippedByID = shipBy.ID,
                             ReceivedByID = receiveBy.ID,
                             RequestedByName = reqBy.Name,
                             ShippedByName = shipBy.Name,
                             ReceivedByName = receiveBy.Name,
                             BaseOnID = sd.BaseOnID,
                             CopyKey = sd.CopyKey,
                             CopyType = sd.CopyType,
                             BranchID = sd.BranchID,
                             ChangeLog = sd.ChangeLog,
                             CompanyID = sd.CompanyID,
                             CusID = sd.CusID,
                             BasedOn = sd.SDID,
                             DeliveryDate = sd.DueDate,
                             DueDate = sd.DueDate,
                             DisRate = (decimal)sd.DisRate,
                             DisValue = (decimal)sd.DisValue,
                             DocTypeID = sd.DocTypeID,
                             DocumentDate = sd.DocumentDate,
                             ExchangeRate = (decimal)sd.ExchangeRate,
                             FreightAmount = sd.FreightAmount,
                             FreightAmountSys = sd.FreightAmountSys,
                             SaleEmID = sem.ID,
                             SaleEmName = sem.Name ?? "",
                             FreightSalesView = new FreightSaleView
                             {
                                 AmountReven = fs.AmountReven,
                                 SaleID = sd.SDID,
                                 ID = fs.ID,
                                 SaleType = fs.SaleType,
                                 TaxSumValue = fs.TaxSumValue,
                                 FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                select new FreightSaleDetailViewModel
                                                                {
                                                                    ID = fsd.ID,
                                                                    FreightSaleID = fsd.FreightSaleID,
                                                                    Amount = fsd.Amount,
                                                                    AmountWithTax = fsd.AmountWithTax,
                                                                    FreightID = fsd.FreightID,
                                                                    Name = fsd.Name,
                                                                    TaxGroup = fsd.TaxGroup,
                                                                    TaxGroupID = fsd.TaxGroupID,
                                                                    TaxGroups = GetTaxGroups(),
                                                                    TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                    {
                                                                        Value = i.ID.ToString(),
                                                                        Selected = fsd.TaxGroupID == i.ID,
                                                                        Text = $"{i.Code}-{i.Name}"
                                                                    }).ToList(),
                                                                    TaxRate = fsd.TaxRate,
                                                                    TotalTaxAmount = fsd.TotalTaxAmount
                                                                }).ToList(),
                             },
                             IncludeVat = sd.IncludeVat,
                             InvoiceNo = $"{sd.CopyKey}{"/Delivery :"}{docType.Code}-{sd.InvoiceNumber}",
                             InvoiceNumber = sd.InvoiceNumber,
                             LocalCurID = sd.LocalCurID,
                             LocalSetRate = (decimal)sd.LocalSetRate,
                             PostingDate = sd.PostingDate,
                             PriceListID = sd.PriceListID,
                             RefNo = sd.RefNo,
                             Remarks = sd.Remarks,
                             SaleCurrencyID = sd.SaleCurrencyID,
                             SeriesDID = sd.SeriesDID,
                             SeriesID = sd.SeriesID,
                             SDID = sd.SDID,
                             Status = sd.Status,
                             SubTotal = (decimal)sd.SubTotal,
                             SubTotalAfterDis = sd.SubTotalAfterDis,
                             SubTotalAfterDisSys = sd.SubTotalAfterDisSys,
                             SubTotalBefDis = sd.SubTotalBefDis,
                             SubTotalBefDisSys = sd.SubTotalBefDisSys,
                             SubTotalSys = (decimal)sd.SubTotalSys,
                             TotalAmount = (decimal)sd.TotalAmount,
                             TotalAmountSys = (decimal)sd.TotalAmountSys,
                             TypeDis = sd.TypeDis,
                             UserID = sd.UserID,
                             VatRate = (decimal)sd.VatRate,
                             VatValue = (decimal)sd.VatValue,
                             WarehouseID = sd.WarehouseID
                         }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           //GLID = tg.GLID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sd in saleD
                        join sdd in _context.SaleDeliveryDetails on sd.SDID equals sdd.SDID
                        join item in _context.ItemMasterDatas on sdd.ItemID equals item.ID
                        join cur in _context.Currency on sd.SaleCurrencyID equals cur.ID
                        select new SaleDeliveryDetailViewModel
                        {
                            LineID = string.IsNullOrWhiteSpace(sdd.LineID) ? DateTime.Now.Ticks.ToString() : sdd.LineID,
                            SaleCopyType = sdd.SaleCopyType,
                            TaxOfFinDisValue = sdd.TaxOfFinDisValue,
                            FinTotalValue = sdd.FinTotalValue,
                            FinDisValue = sdd.FinDisValue,
                            FinDisRate = sdd.FinDisRate,
                            ItemCode = sdd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sdd.TotalSys,
                            SQDID = sdd.SQDID,
                            SODID = sdd.SODID,
                            SDDID = sdd.SDDID,
                            SDID = sd.SDID,
                            Cost = (decimal)sdd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sdd.DisRate,
                            DisValue = (decimal)sdd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)(sdd.Qty > sdd.OpenQty ? sdd.OpenQty : sdd.Qty),
                            OpenQty = (decimal)sdd.OpenQty,
                            UnitPrice = (decimal)sdd.UnitPrice,
                            UomName = sdd.UomName,
                            UomID = sdd.UomID,
                            TaxGroupID = sdd.TaxGroupID,
                            TaxRate = sdd.TaxRate,
                            Remarks = sdd.Remarks,
                            TaxDownPaymentValue = 0M,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sdd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sdd.TotalWTax,
                            TotalWTaxSys = (decimal)sdd.TotalWTaxSys,
                            TaxValue = sdd.TaxValue,
                            Total = (decimal)sdd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sdd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sd.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }
                        ).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new SaleDeliveryUpdateViewModel
            {
                SaleDelivery = saleD.FirstOrDefault(),
                SaleDeliveryDetails = _sqd,
            };
            return data;
        }
        public ReturnDeliveryUpdateViewModel FindReturnDelivery(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var RD = (from rd in _context.ReturnDeliverys.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                      join docType in _context.DocumentTypes on rd.DocTypeID equals docType.ID
                      let sem = _context.Employees.FirstOrDefault(i => rd.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                      let fs = _context.FreightSales.Where(i => i.SaleID == rd.ID && i.SaleType == SaleCopyType.ReturnDelivery).FirstOrDefault() ?? new FreightSale()
                      let reqBy = _context.Employees.FirstOrDefault(i => i.ID == rd.RequestedBy) ?? new HumanResourcesEmployee()
                      let shipBy = _context.Employees.FirstOrDefault(i => i.ID == rd.ShippedBy) ?? new HumanResourcesEmployee()
                      let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == rd.ReceivedBy) ?? new HumanResourcesEmployee()
                      select new ReturnDeliveryViewModel
                      {
                          BasedCopyKeys = rd.BasedCopyKeys,
                          RequestedByID = reqBy.ID,
                          ShippedByID = shipBy.ID,
                          ReceivedByID = receiveBy.ID,

                          RequestedByName = reqBy.Name,
                          ShippedByName = shipBy.Name,
                          ReceivedByName = receiveBy.Name,
                          CopyKey = rd.CopyKey,
                          CopyType = rd.CopyType,
                          BranchID = rd.BranchID,
                          ChangeLog = rd.ChangeLog,
                          CompanyID = rd.CompanyID,
                          CusID = rd.CusID,
                          DeliveryDate = rd.DueDate,
                          DueDate = rd.DueDate,
                          DisRate = rd.DisRate,
                          DisValue = rd.DisValue,
                          DocTypeID = rd.DocTypeID,
                          DocumentDate = rd.DocumentDate,
                          ExchangeRate = (decimal)rd.ExchangeRate,
                          FreightAmount = rd.FreightAmount,
                          FreightAmountSys = rd.FreightAmountSys,
                          SaleEmID = rd.SaleEmID,
                          SaleEmName = sem.Name ?? "",
                          FreightSalesView = new FreightSaleView
                          {
                              AmountReven = fs.AmountReven,
                              SaleID = rd.ID,
                              ID = fs.ID,
                              SaleType = fs.SaleType,
                              TaxSumValue = fs.TaxSumValue,
                              FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                             select new FreightSaleDetailViewModel
                                                             {
                                                                 ID = fsd.ID,
                                                                 FreightSaleID = fsd.FreightSaleID,
                                                                 Amount = fsd.Amount,
                                                                 AmountWithTax = fsd.AmountWithTax,
                                                                 FreightID = fsd.FreightID,
                                                                 Name = fsd.Name,
                                                                 TaxGroup = fsd.TaxGroup,
                                                                 TaxGroupID = fsd.TaxGroupID,
                                                                 TaxGroups = GetTaxGroups(),
                                                                 TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                 {
                                                                     Value = i.ID.ToString(),
                                                                     Selected = fsd.TaxGroupID == i.ID,
                                                                     Text = $"{i.Code}-{i.Name}"
                                                                 }).ToList(),
                                                                 TaxRate = fsd.TaxRate,
                                                                 TotalTaxAmount = fsd.TotalTaxAmount
                                                             }).ToList(),
                          },
                          InvoiceNo = $"{docType.Code}-{rd.InvoiceNumber}",
                          InvoiceNumber = rd.InvoiceNumber,
                          LocalCurID = rd.LocalCurID,
                          LocalSetRate = rd.LocalSetRate,
                          PostingDate = rd.PostingDate,
                          PriceListID = rd.PriceListID,
                          RefNo = rd.RefNo,
                          Remarks = rd.Remarks,
                          SaleCurrencyID = rd.SaleCurrencyID,
                          SeriesDID = rd.SeriesDID,
                          SeriesID = rd.SeriesID,
                          ID = rd.ID,
                          Status = rd.Status,
                          SubTotal = (decimal)rd.SubTotal,
                          SubTotalAfterDis = rd.SubTotalAfterDis,
                          SubTotalAfterDisSys = rd.SubTotalAfterDisSys,
                          SubTotalBefDis = rd.SubTotalBefDis,
                          SubTotalBefDisSys = rd.SubTotalBefDisSys,
                          SubTotalSys = (decimal)rd.SubTotalSys,
                          TotalAmount = (decimal)rd.TotalAmount,
                          TotalAmountSys = (decimal)rd.TotalAmountSys,
                          TypeDis = rd.TypeDis,
                          UserID = rd.UserID,
                          VatRate = (decimal)rd.VatRate,
                          VatValue = (decimal)rd.VatValue,
                          WarehouseID = rd.WarehouseID
                      }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                //GLID = tg.GLID,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           //GLID = tg.GLID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _rdd = (from rd in RD
                        join rdd in _context.ReturnDeliveryDetails on rd.ID equals rdd.ReturnDeliveryID
                        join item in _context.ItemMasterDatas on rdd.ItemID equals item.ID
                        join cur in _context.Currency on rd.SaleCurrencyID equals cur.ID
                        select new ReturnDeliveryDetailViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString(),
                            TaxOfFinDisValue = rdd.TaxOfFinDisValue,
                            FinTotalValue = rdd.FinTotalValue,
                            FinDisValue = rdd.FinDisValue,
                            FinDisRate = rdd.FinDisRate,
                            ItemCode = rdd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)rdd.TotalSys,
                            SDDID = rdd.SDDID,
                            ID = rdd.ID,
                            ReturnDeliveryID = rd.ID,
                            Cost = (decimal)rdd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)rdd.DisRate,
                            DisValue = (decimal)rdd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)rdd.Qty,
                            OpenQty = (decimal)rdd.OpenQty,
                            UnitPrice = (decimal)rdd.UnitPrice,
                            UomName = rdd.UomName,
                            UomID = rdd.UomID,
                            TaxGroupID = rdd.TaxGroupID,
                            TaxRate = rdd.TaxRate,
                            Remarks = rdd.Remarks,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == rdd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)rdd.TotalWTax,
                            TaxValue = rdd.TaxValue,
                            Total = (decimal)rdd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == rdd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == rd.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }
                        ).ToList();
            _dataProp.DataProperty(_rdd, comId, "ItemID", "AddictionProps");
            var data = new ReturnDeliveryUpdateViewModel
            {
                ReturnDelivery = RD.FirstOrDefault(),
                ReturnDeliveryDetails = _rdd,
            };
            return data;
        }
        #region Copy Sale ar
        public SaleARUpdateViewModel FindSaleARCopy(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleAR = (from ar in _context.SaleARs.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                          let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                          let fs = _context.FreightSales.Where(i => i.SaleID == ar.SARID && i.SaleType == SaleCopyType.AR).FirstOrDefault() ?? new FreightSale()
                          let reqBy = _context.Employees.FirstOrDefault(i => i.ID == ar.RequestedBy) ?? new HumanResourcesEmployee()
                          let shipBy = _context.Employees.FirstOrDefault(i => i.ID == ar.ShippedBy) ?? new HumanResourcesEmployee()
                          let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == ar.ReceivedBy) ?? new HumanResourcesEmployee()
                          select new SaleARViewModel
                          {
                              BasedCopyKeys = ar.BasedCopyKeys,
                              RequestedByName = reqBy.Name,
                              ShippedByName = shipBy.Name,
                              ReceivedByName = receiveBy.Name,
                              RequestedByID = reqBy.ID,
                              ShippedByID = shipBy.ID,
                              ReceivedByID = receiveBy.ID,
                              BaseOnID = ar.BaseOnID,
                              BasedOn = ar.SARID,
                              CopyKey = ar.CopyKey,
                              CopyType = ar.CopyType,
                              BranchID = ar.BranchID,
                              ChangeLog = ar.ChangeLog,
                              CompanyID = ar.CompanyID,
                              CusID = ar.CusID,
                              DeliveryDate = ar.DueDate,
                              DueDate = ar.DueDate,
                              DisRate = (decimal)ar.DisRate,
                              DisValue = (decimal)ar.DisValue,
                              DocTypeID = ar.DocTypeID,
                              DocumentDate = ar.DocumentDate,
                              ExchangeRate = (decimal)ar.ExchangeRate,
                              FreightAmount = ar.FreightAmount,
                              FreightAmountSys = ar.FreightAmountSys,
                              DownPayment = ar.DownPayment,
                              DownPaymentSys = ar.DownPaymentSys,
                              SaleEmID = ar.SaleEmID,
                              SaleEmName = sem.Name ?? "",
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                  SaleID = ar.SARID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = ar.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                              InvoiceNumber = ar.InvoiceNumber,
                              LocalCurID = ar.LocalCurID,
                              LocalSetRate = (decimal)ar.LocalSetRate,
                              PostingDate = ar.PostingDate,
                              PriceListID = ar.PriceListID,
                              RefNo = ar.RefNo,
                              Remarks = ar.Remarks,
                              SaleCurrencyID = ar.SaleCurrencyID,
                              SeriesDID = ar.SeriesDID,
                              SeriesID = ar.SeriesID,
                              SARID = ar.SARID,
                              Status = ar.Status,
                              SubTotal = (decimal)ar.SubTotal,
                              SubTotalAfterDis = ar.SubTotalAfterDis,
                              SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                              SubTotalBefDis = ar.SubTotalBefDis,
                              SubTotalBefDisSys = ar.SubTotalBefDisSys,
                              SubTotalSys = (decimal)ar.SubTotalSys,
                              TotalAmount = (decimal)ar.TotalAmount,
                              TotalAmountSys = (decimal)ar.TotalAmountSys,
                              TypeDis = ar.TypeDis,
                              UserID = ar.UserID,
                              VatRate = (decimal)ar.VatRate,
                              VatValue = (decimal)ar.VatValue,
                              WarehouseID = ar.WarehouseID,
                              AppliedAmount = (decimal)ar.AppliedAmount,
                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sAr in saleAR
                        join sArd in _context.SaleARDetails on sAr.SARID equals sArd.SARID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        select new SaleARDetailViewModel
                        {
                            LineID = sArd.LineID,
                            SaleCopyType = sArd.SaleCopyType,
                            FinDisRate = sArd.FinDisRate,
                            FinDisValue = sArd.FinDisValue,
                            FinTotalValue = sArd.FinTotalValue,
                            TaxOfFinDisValue = sArd.TaxOfFinDisValue,
                            ItemCode = sArd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sArd.TotalSys,
                            SQDID = sArd.SQDID,
                            SODID = sArd.SODID,
                            SDDID = sArd.SDDID,
                            SARDID = sArd.SARDID,
                            SARID = sAr.SARID,
                            Cost = (decimal)sArd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sArd.DisRate,
                            DisValue = (decimal)sArd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sArd.OpenQty,
                            Factor = (decimal)sArd.Factor,
                            OpenQty = (decimal)sArd.OpenQty,
                            UnitPrice = (decimal)sArd.UnitPrice,
                            UomName = sArd.UomName,
                            UomID = sArd.UomID,
                            TaxGroupID = sArd.TaxGroupID,
                            TaxRate = sArd.TaxRate,
                            Remarks = sArd.Remarks,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sArd.TaxGroupID
                            }).ToList(),
                            TotalWTaxSys = (decimal)sArd.TotalWTaxSys,
                            TotalWTax = (decimal)sArd.TotalWTax,
                            TaxValue = (decimal)sArd.TaxValue,
                            Total = (decimal)sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new SaleARUpdateViewModel
            {
                SaleAR = saleAR.FirstOrDefault(),
                SaleARDetails = _sqd,
            };
            data.SaleARDetails.ForEach(i =>
            {
                i.Qty = i.OpenQty;
                i.DisValue = (i.DisRate / 100) * (i.OpenQty * i.UnitPrice);
                i.Total = (i.OpenQty * i.UnitPrice) - i.DisValue;
                i.TotalSys = i.Total * data.SaleAR.ExchangeRate;
                i.TaxValue = i.Total * (i.TaxRate / 100);
                i.TotalWTax = i.Total + i.TaxValue;
                i.TotalWTaxSys = (i.TotalWTax * data.SaleAR.ExchangeRate);
                i.FinDisValue = (i.FinDisRate / 100) * i.Total;
                i.FinTotalValue = i.Total - i.FinDisValue;
                i.TaxOfFinDisValue = i.FinTotalValue * (i.TaxRate / 100);
            });

            data.SaleAR.SubTotal = data.SaleARDetails.Sum(s => s.Total);
            data.SaleAR.SubTotalSys = data.SaleAR.ExchangeRate;
            data.SaleAR.SubTotalBefDis = data.SaleAR.SubTotal;
            data.SaleAR.SubTotalBefDisSys = data.SaleAR.SubTotalSys;
            data.SaleAR.DisValue = (data.SaleAR.DisRate / 100) * data.SaleAR.SubTotal;
            data.SaleAR.SubTotalAfterDis = data.SaleAR.SubTotal - data.SaleAR.DisValue;
            data.SaleAR.SubTotalAfterDisSys = data.SaleAR.SubTotalAfterDis * data.SaleAR.ExchangeRate;
            data.SaleAR.VatValue = data.SaleARDetails.Sum(s => s.TaxOfFinDisValue) + data.SaleAR.FreightSalesView.FreightSaleDetailViewModels.Sum(s => s.TotalTaxAmount);
            data.SaleAR.VatRate = (data.SaleAR.VatValue / (data.SaleAR.SubTotalAfterDis + data.SaleAR.FreightAmount)) * 100;
            data.SaleAR.TotalAmount = data.SaleAR.VatValue + data.SaleAR.SubTotalAfterDis;


            data.SaleARDetails.ForEach(i =>
              {
                  if (i.OpenQty < i.Qty)
                  {
                      data.SaleAR.VatValue = data.SaleARDetails.Sum(s => s.TaxOfFinDisValue);
                      data.SaleAR.VatRate = (data.SaleAR.VatValue / (data.SaleAR.SubTotalAfterDis)) * 100;
                      data.SaleAR.FreightSalesView.ID = 0;
                      data.SaleAR.FreightSalesView.SaleID = 0;
                      data.SaleAR.FreightSalesView.AmountReven = 0;
                      data.SaleAR.FreightSalesView.OpenAmountReven = 0;
                      data.SaleAR.FreightSalesView.TaxSumValue = 0;
                      data.SaleAR.FreightAmount = 0;
                      data.SaleAR.FreightAmountSys = 0;
                      data.SaleAR.FreightAmount = 0;
                      data.SaleAR.FreightAmountSys = 0;

                      data.SaleAR.FreightSalesView.FreightSaleDetailViewModels.ToList().ForEach(j =>
                      {
                          j.ID = 0;
                          j.TaxGroupID = 0;
                          j.FreightSaleID = 0;
                          j.TaxRate = 0;
                          j.Amount = 0;
                          j.AmountWithTax = 0;
                          j.TotalTaxAmount = 0;
                          j.TaxGroupSelect.ForEach(k =>
                          {
                              k.Selected = false;
                          });
                      });
                  }

              });


            return data;
        }

        #endregion Copy Sale ar
        #region FindSaleAR
        public SaleARUpdateViewModel FindSaleAR(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleAR = (from ar in _context.SaleARs.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                          let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                          let fs = _context.FreightSales.Where(i => i.SaleID == ar.SARID && i.SaleType == SaleCopyType.AR).FirstOrDefault() ?? new FreightSale()
                          let reqBy = _context.Employees.FirstOrDefault(i => i.ID == ar.RequestedBy) ?? new HumanResourcesEmployee()
                          let shipBy = _context.Employees.FirstOrDefault(i => i.ID == ar.ShippedBy) ?? new HumanResourcesEmployee()
                          let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == ar.ReceivedBy) ?? new HumanResourcesEmployee()
                          select new SaleARViewModel
                          {
                              BasedCopyKeys = ar.BasedCopyKeys,
                              RequestedByName = reqBy.Name,
                              ShippedByName = shipBy.Name,
                              ReceivedByName = receiveBy.Name,
                              RequestedByID = reqBy.ID,
                              ShippedByID = shipBy.ID,
                              ReceivedByID = receiveBy.ID,

                              BasedOn = ar.SARID,
                              CopyKey = ar.CopyKey,
                              CopyType = ar.CopyType,
                              BranchID = ar.BranchID,
                              ChangeLog = ar.ChangeLog,
                              CompanyID = ar.CompanyID,
                              CusID = ar.CusID,
                              DeliveryDate = ar.DueDate,
                              DueDate = ar.DueDate,
                              DisRate = (decimal)ar.DisRate,
                              DisValue = (decimal)ar.DisValue,
                              DocTypeID = ar.DocTypeID,
                              DocumentDate = ar.DocumentDate,
                              ExchangeRate = (decimal)ar.ExchangeRate,
                              FreightAmount = ar.FreightAmount,
                              FreightAmountSys = ar.FreightAmountSys,
                              DownPayment = ar.DownPayment,
                              DownPaymentSys = ar.DownPaymentSys,
                              SaleEmID = ar.SaleEmID,
                              SaleEmName = sem.Name ?? "",
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                  SaleID = ar.SARID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = ar.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                              InvoiceNumber = ar.InvoiceNumber,
                              LocalCurID = ar.LocalCurID,
                              LocalSetRate = (decimal)ar.LocalSetRate,
                              PostingDate = ar.PostingDate,
                              PriceListID = ar.PriceListID,
                              RefNo = ar.RefNo,
                              Remarks = ar.Remarks,
                              SaleCurrencyID = ar.SaleCurrencyID,
                              SeriesDID = ar.SeriesDID,
                              SeriesID = ar.SeriesID,
                              SARID = ar.SARID,
                              Status = ar.Status,
                              SubTotal = (decimal)ar.SubTotal,
                              SubTotalAfterDis = ar.SubTotalAfterDis,
                              SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                              SubTotalBefDis = ar.SubTotalBefDis,
                              SubTotalBefDisSys = ar.SubTotalBefDisSys,
                              SubTotalSys = (decimal)ar.SubTotalSys,
                              TotalAmount = (decimal)ar.TotalAmount,
                              TotalAmountSys = (decimal)ar.TotalAmountSys,
                              TypeDis = ar.TypeDis,
                              UserID = ar.UserID,
                              VatRate = (decimal)ar.VatRate,
                              VatValue = (decimal)ar.VatValue,
                              WarehouseID = ar.WarehouseID,
                              AppliedAmount = (decimal)ar.AppliedAmount,
                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sAr in saleAR
                        join sArd in _context.SaleARDetails on sAr.SARID equals sArd.SARID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        let loanpartner = _context.LoanPartners.FirstOrDefault(s=> s.ID==sArd.LoanPartnerID)?? new LoanPartner()
                        // group new { sAr, sArd, item, cur } by new { sArd.ItemID, sArd.UnitPrice } into g
                        // let gdata = g.FirstOrDefault()

                        select new SaleARDetailViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString() + sArd.SARDID,
                            FinDisRate = sArd.FinDisRate,
                            FinDisValue = sArd.FinDisValue,
                            FinTotalValue = sArd.FinTotalValue,
                            TaxOfFinDisValue = sArd.TaxOfFinDisValue,
                            ItemCode = sArd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sArd.TotalSys,
                            SQDID = sArd.SQDID,
                            SODID = sArd.SODID,
                            SDDID = sArd.SDDID,
                            SARDID = sArd.SARDID,
                            SARID = sAr.SARID,
                            Cost = (decimal)sArd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sArd.DisRate,
                            DisValue = (decimal)sArd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sArd.Qty,//g.Sum(x => x.sArd.Qty),
                            Factor = (decimal)sArd.Factor,//gdata.sArd.Factor,
                            OpenQty = (decimal)sArd.OpenQty,//g.Sum(x => x.sArd.Qty),
                            UnitPrice = (decimal)sArd.UnitPrice,
                            UomName = sArd.UomName,
                            UomID = sArd.UomID,
                            TaxGroupID = sArd.TaxGroupID,
                            TaxRate = sArd.TaxRate,
                            Remarks = sArd.Remarks,
                             LoanPartnerID = sArd.LoanPartnerID,
                            LoanPartnerName = loanpartner.Name1,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sArd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sArd.TotalWTax,
                            TaxValue = sArd.TaxValue,
                            Total = (decimal)sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new SaleARUpdateViewModel
            {
                SaleAR = saleAR.FirstOrDefault(),
                SaleARDetails = _sqd,
            };
            return data;
        }
        #endregion FindSaleAR


        public SaleCreditMemoUpdateViewModel FindSaleCreditMemo(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleCM = (from cm in _context.SaleCreditMemos.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on cm.DocTypeID equals docType.ID
                          let sem = _context.Employees.FirstOrDefault(i => cm.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                          let fs = _context.FreightSales.Where(i => i.SaleID == cm.SCMOID && i.SaleType == SaleCopyType.CreditMemo).FirstOrDefault() ?? new FreightSale()
                          let reqBy = _context.Employees.FirstOrDefault(i => i.ID == cm.RequestedBy) ?? new HumanResourcesEmployee()
                          let shipBy = _context.Employees.FirstOrDefault(i => i.ID == cm.ShippedBy) ?? new HumanResourcesEmployee()
                          let receiveBy = _context.Employees.FirstOrDefault(i => i.ID == cm.ReceivedBy) ?? new HumanResourcesEmployee()
                          select new SaleCreditMemoViewModel
                          {
                              BasedCopyKeys = cm.BasedCopyKeys,
                              RequestedByName = reqBy.Name,
                              ShippedByName = shipBy.Name,
                              ReceivedByName = receiveBy.Name,
                              RequestedBy = reqBy.ID,
                              ShippedBy = shipBy.ID,
                              ReceivedBy = receiveBy.ID,

                              CopyKey = cm.CopyKey,
                              CopyType = cm.CopyType,
                              BranchID = cm.BranchID,
                              ChangeLog = cm.ChangeLog,
                              CompanyID = cm.CompanyID,
                              CusID = cm.CusID,
                              DeliveryDate = cm.DueDate,
                              DueDate = cm.DueDate,
                              DisRate = (decimal)cm.DisRate,
                              DisValue = (decimal)cm.DisValue,
                              DocTypeID = cm.DocTypeID,
                              DocumentDate = cm.DocumentDate,
                              ExchangeRate = (decimal)cm.ExchangeRate,
                              FreightAmount = cm.FreightAmount,
                              FreightAmountSys = cm.FreightAmountSys,
                              SaleEmID = cm.SaleEmID,
                              SaleEmName = sem.Name ?? "",
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven,
                                  SaleID = cm.SCMOID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = cm.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{cm.InvoiceNumber}",
                              InvoiceNumber = cm.InvoiceNumber,
                              LocalCurID = cm.LocalCurID,
                              LocalSetRate = (decimal)cm.LocalSetRate,
                              PostingDate = cm.PostingDate,
                              PriceListID = cm.PriceListID,
                              RefNo = cm.RefNo,
                              Remarks = cm.Remarks,
                              SaleCurrencyID = cm.SaleCurrencyID,
                              SeriesDID = cm.SeriesDID,
                              SeriesID = cm.SeriesID,
                              SCMOID = cm.SCMOID,
                              Status = cm.Status,
                              SubTotal = (decimal)cm.SubTotal,
                              SubTotalAfterDis = cm.SubTotalAfterDis,
                              SubTotalAfterDisSys = cm.SubTotalAfterDisSys,
                              SubTotalBefDis = cm.SubTotalBefDis,
                              SubTotalBefDisSys = cm.SubTotalBefDisSys,
                              SubTotalSys = (decimal)cm.SubTotalSys,
                              TotalAmount = (decimal)cm.TotalAmount,
                              TotalAmountSys = (decimal)cm.TotalAmountSys,
                              TypeDis = cm.TypeDis,
                              UserID = cm.UserID,
                              VatRate = (decimal)cm.VatRate,
                              VatValue = (decimal)cm.VatValue,
                              WarehouseID = cm.WarehouseID,
                              AppliedAmount = (decimal)cm.AppliedAmount,
                              BasedOn = cm.BasedOn,
                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _cmd = (from cm in saleCM
                        join cmd in _context.SaleCreditMemoDetails on cm.SCMOID equals cmd.SCMOID
                        join item in _context.ItemMasterDatas on cmd.ItemID equals item.ID
                        join cur in _context.Currency on cm.SaleCurrencyID equals cur.ID
                        select new SaleCreditMemoDetailViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString(),
                            ItemCode = cmd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)cmd.TotalSys,
                            SARDID = cmd.SARDID,
                            SCMODID = cmd.SCMODID,
                            SCMOID = cm.SCMOID,
                            Cost = (decimal)cmd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)cmd.DisRate,
                            DisValue = (decimal)cmd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)cmd.Qty,
                            OpenQty = (decimal)cmd.OpenQty,
                            UnitPrice = (decimal)cmd.UnitPrice,
                            UomName = cmd.UomName,
                            UomID = cmd.UomID,
                            TaxGroupID = cmd.TaxGroupID,
                            TaxRate = cmd.TaxRate,
                            Remarks = cmd.Remarks,
                            FinDisRate = cmd.FinDisRate,
                            FinDisValue = cmd.FinDisValue,
                            FinTotalValue = cmd.FinTotalValue,
                            TaxOfFinDisValue = cmd.TaxOfFinDisValue,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == cmd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)cmd.TotalWTax,
                            TaxValue = cmd.TaxValue,
                            Total = (decimal)cmd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == cmd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == cm.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }
                        ).ToList();
            _dataProp.DataProperty(_cmd, comId, "ItemID", "AddictionProps");
            var data = new SaleCreditMemoUpdateViewModel
            {
                SaleCreditMemo = saleCM.FirstOrDefault(),
                SaleCreditMemoDetail = _cmd,
            };
            return data;
        }
        public IEnumerable<dynamic> GetSaleQuotesCopy(int cusId)
        {
            var allItems = (from SQ in _context.SaleQuotes.Where(i => i.Status == "open" && i.CusID == cusId)
                            join docType in _context.DocumentTypes on SQ.DocTypeID equals docType.ID
                            let sem = _context.Employees.FirstOrDefault(i => SQ.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                            let cur = _context.Currency.FirstOrDefault(i => i.ID == SQ.SaleCurrencyID)
                            select new
                            {
                                SQ.SQID,
                                SQ.CusID,
                                SQ.BranchID,
                                SQ.WarehouseID,
                                SQ.UserID,
                                SQ.SaleCurrencyID,
                                SQ.CompanyID,
                                SQ.DocTypeID,
                                SQ.SeriesID,
                                SQ.SeriesDID,
                                InvoiceNo = SQ.InvoiceNumber,
                                InvoiceNumber = $"{docType.Code}-{SQ.InvoiceNumber}",
                                SQ.RefNo,
                                SQ.ExchangeRate,
                                SQ.PostingDate,
                                Currency = cur.Description,
                                SQ.SubTotal,
                                SQ.TotalAmount,
                                SQ.TypeDis,
                                DeliveryDate = SQ.ValidUntilDate,
                                SQ.ValidUntilDate,
                                SQ.DocumentDate,
                                SQ.IncludeVat,
                                SQ.Status,
                                SQ.Remarks,
                                SQ.SubTotalSys,
                                SQ.DisRate,
                                SQ.DisValue,
                                SQ.VatRate,
                                SQ.VatValue,
                                SQ.TotalAmountSys,
                                SQ.ChangeLog,
                                SQ.PriceListID,
                                SQ.LocalCurID,
                                SQ.LocalSetRate,
                                SQ.SaleEmID,
                                SaleEmName = sem.Name ?? "",
                            }).ToList();
            return allItems;
        }
        public IEnumerable<dynamic> GetSaleOrdersCopy(int cusId)
        {
            var data = (from SO in _context.SaleOrders.Where(i => i.Status == "open" && i.CusID == cusId)
                        join docType in _context.DocumentTypes on SO.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => SO.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let SOD = _context.SaleOrderDetails.Where(i => i.SOID == SO.SOID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == SO.SaleCurrencyID)
                        select new
                        {
                            SO.SOID,
                            SO.CusID,
                            SO.BranchID,
                            SO.WarehouseID,
                            SO.UserID,
                            SO.SaleCurrencyID,
                            SO.CompanyID,
                            SO.DocTypeID,
                            SO.SeriesID,
                            SO.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{SO.InvoiceNumber}",
                            SO.RefNo,
                            InvoiceNo = SO.InvoiceNumber,
                            SO.ExchangeRate,
                            SO.PostingDate,
                            SO.DeliveryDate,
                            SO.DocumentDate,
                            SO.IncludeVat,
                            SO.Status,
                            Currency = cur.Description,
                            SO.SubTotal,
                            SO.TotalAmount,
                            SO.SubTotalSys,
                            SO.DisRate,
                            SO.DisValue,
                            SO.TypeDis,
                            SO.Remarks,
                            SO.VatRate,
                            SO.VatValue,
                            SO.FeeNote,
                            SO.FeeAmount,
                            SO.TotalAmountSys,
                            SO.CopyType,
                            SO.CopyKey,
                            SO.BasedCopyKeys,
                            SO.ChangeLog,
                            SO.PriceListID,
                            SO.LocalCurID,
                            SO.LocalSetRate,
                            SOD,
                            SO.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public IEnumerable<dynamic> GetSaleDeliverysCopy(int cusId)
        {
            var data = (from sd in _context.SaleDeliveries.Where(i => i.Status == "open" && i.CusID == cusId)
                        join docType in _context.DocumentTypes on sd.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => sd.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let sdd = _context.SaleDeliveryDetails.Where(i => i.SDID == sd.SDID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == sd.SaleCurrencyID)
                        select new
                        {
                            sd.SDID,
                            sd.CusID,
                            sd.BranchID,
                            sd.WarehouseID,
                            sd.UserID,
                            sd.SaleCurrencyID,
                            sd.CompanyID,
                            sd.DocTypeID,
                            sd.SeriesID,
                            sd.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{sd.InvoiceNumber}",
                            sd.RefNo,
                            InvoiceNo = sd.InvoiceNumber,
                            sd.ExchangeRate,
                            sd.PostingDate,
                            sd.DeliveryDate,
                            sd.DocumentDate,
                            sd.IncludeVat,
                            sd.Status,
                            Currency = cur.Description,
                            sd.SubTotal,
                            sd.TotalAmount,
                            sd.SubTotalSys,
                            sd.DisRate,
                            sd.DisValue,
                            sd.TypeDis,
                            sd.Remarks,
                            sd.VatRate,
                            sd.VatValue,
                            sd.FeeNote,
                            sd.FeeAmount,
                            sd.TotalAmountSys,
                            sd.CopyType,
                            sd.CopyKey,
                            sd.BasedCopyKeys,
                            sd.ChangeLog,
                            sd.PriceListID,
                            sd.LocalCurID,
                            sd.LocalSetRate,
                            SaleOrderDetails = sdd,
                            sd.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public IEnumerable<dynamic> GetSaleARDownPMCopy(int cusId)
        {
            var data = (from sd in _context.ARDownPayments.Where(i => i.Status == "open" && i.CusID == cusId)
                        join docType in _context.DocumentTypes on sd.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => sd.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let sdd = _context.ARDownPaymentDetails.Where(i => i.ARDID == sd.ARDID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == sd.SaleCurrencyID)
                        select new
                        {
                            sd.ARDID,
                            sd.CusID,
                            sd.BranchID,
                            sd.WarehouseID,
                            sd.UserID,
                            sd.SaleCurrencyID,
                            sd.CompanyID,
                            sd.DocTypeID,
                            sd.SeriesID,
                            sd.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{sd.InvoiceNumber}",
                            sd.RefNo,
                            InvoiceNo = sd.InvoiceNumber,
                            sd.ExchangeRate,
                            sd.PostingDate,
                            sd.DocumentDate,
                            sd.Status,
                            Currency = cur.Description,
                            sd.SubTotal,
                            sd.TotalAmount,
                            sd.SubTotalSys,
                            sd.DPMRate,
                            sd.DPMValue,
                            sd.DisRate,
                            sd.DisValue,
                            sd.TypeDis,
                            sd.Remarks,
                            sd.TotalAmountSys,
                            sd.CopyType,
                            sd.CopyKey,
                            sd.BasedCopyKeys,
                            sd.ChangeLog,
                            sd.PriceListID,
                            sd.LocalCurID,
                            sd.LocalSetRate,
                            sd.AppliedAmount,
                            sd.AppliedAmountSys,
                            SaleOrderDetails = sdd,
                            sd.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public IEnumerable<dynamic> GetSaleARsCopy(int cusId)
        {
            var data = (from sd in _context.SaleARs.Where(i => i.Status == "open" && i.CusID == cusId)
                        join docType in _context.DocumentTypes on sd.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => sd.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let sdd = _context.SaleARDetails.Where(i => i.SARID == sd.SARID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == sd.SaleCurrencyID)
                        select new
                        {
                            sd.SARID,
                            sd.CusID,
                            BasedOn = sd.SARID,
                            sd.BranchID,
                            sd.WarehouseID,
                            sd.UserID,
                            sd.SaleCurrencyID,
                            sd.CompanyID,
                            sd.DocTypeID,
                            sd.SeriesID,
                            sd.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{sd.InvoiceNumber}",
                            sd.RefNo,
                            InvoiceNo = sd.InvoiceNumber,
                            sd.ExchangeRate,
                            sd.PostingDate,
                            sd.DeliveryDate,
                            sd.DocumentDate,
                            sd.IncludeVat,
                            sd.Status,
                            Currency = cur.Description,
                            sd.SubTotal,
                            sd.TotalAmount,
                            sd.SubTotalSys,
                            sd.DisRate,
                            sd.DisValue,
                            sd.TypeDis,
                            sd.Remarks,
                            sd.VatRate,
                            sd.VatValue,
                            sd.FeeNote,
                            sd.FeeAmount,
                            sd.TotalAmountSys,
                            sd.CopyType,
                            sd.CopyKey,
                            sd.BasedCopyKeys,
                            sd.ChangeLog,
                            sd.PriceListID,
                            sd.LocalCurID,
                            sd.LocalSetRate,
                            SaleOrderDetails = sdd,
                            sd.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public SaleQuoteUpdateViewModel GetSaleQuoteDetailCopy(string number, int seriesId, int comId)
        {
            int count1, count2 = 0;
            bool copied;
            var data = FindSaleQuote(number, seriesId, comId);
            var master = data.SaleQuote;
            count1 = data.SaleQuoteDetails.Count;
            var detail = data.SaleQuoteDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = detail.Count;
            copied = count1 != count2 ? true : false;
            var datanew = new SaleQuoteUpdateViewModel
            {
                SaleQuote = data.SaleQuote,
                SaleQuoteDetails = detail
            };

            checkCopy(detail, master, copied, false);
            datanew.SaleQuoteDetails.ForEach(i =>
            {
                i.LineID = i.SQDID.ToString();
                i.SaleCopyType = SaleCopyType.Quotation;
            });
            datanew.SaleQuote.BaseOnID = datanew.SaleQuote.SQID;
            return datanew;
        }
        public SaleOrderUpdateViewModel GetSaleOrderDetailCopy(string number, int seriesId, int comId)
        {
            bool copied;
            int count1, count2 = 0;
            var data = FindSaleOrder(number, seriesId, comId);
            count1 = data.SaleOrderDetails.Count;
            var master = data.SaleOrder;
            var detail = data.SaleOrderDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = detail.Count;
            copied = count1 != count2 ? true : false;
            var datanew = new SaleOrderUpdateViewModel
            {
                SaleOrder = data.SaleOrder,
                SaleOrderDetails = detail,
            };

            checkCopy(detail, master, copied, true);
            datanew.SaleOrderDetails.ForEach(i =>
            {
                i.LineID = i.SODID.ToString();
                i.SaleCopyType = SaleCopyType.Order;
            });
            datanew.SaleOrder.BaseOnID = datanew.SaleOrder.SOID;
            return datanew;
        }
        public SaleARUpdateViewModel GetItemMasterDataDetailCopy(string number, int seriesId, int comId)
        {
            var data = FindItemMasterData(number, seriesId, comId);
            return data;
        }
        public SaleDeliveryUpdateViewModel GetSaleDeliveryDetailCopy(string number, int seriesId, int comId)
        {
            bool copied;
            int count1, count2 = 0;
            var data = FindSaleDelivery(number, seriesId, comId);
            var master = data.SaleDelivery;
            count1 = data.SaleDeliveryDetails.Count;
            var detail = data.SaleDeliveryDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = detail.Count;
            copied = count1 != count2 ? true : false;
            var datanew = new SaleDeliveryUpdateViewModel
            {
                SaleDelivery = data.SaleDelivery,
                SaleDeliveryDetails = detail,
            };

            checkCopy(detail, master, copied);
            datanew.SaleDeliveryDetails.ForEach(i =>
            {

                i.SaleCopyType = SaleCopyType.Delivery;
            });
            datanew.SaleDelivery.BaseOnID = datanew.SaleDelivery.SDID;
            return datanew;
        }
        public SaleARDownUpdateViewModel GetSaleARDownPMDetailCopy(string number, int seriesId, int comId, bool fromCN = false)
        {

            bool copied;
            int count1, count2 = 0;
            var datas = FindSaleARDown(number, seriesId, comId, fromCN);
            var master = datas.ARDownPayment;
            count1 = datas.SaleARDownDetails.Count;
            var detail = datas.SaleARDownDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = detail.Count;
            copied = count1 != count2 ? true : false;
            var data = new SaleARDownUpdateViewModel
            {
                ARDownPayment = master,
                SaleARDownDetails = detail,
            };

            checkCopy(detail, master, copied);
            data.SaleARDownDetails.ForEach(i =>
            {
                i.LineID = i.ID.ToString();
                i.SaleCopyType = SaleCopyType.ARDownPayment;
            });
            data.ARDownPayment.BaseOnID = data.ARDownPayment.ARDID;
            return data;
        }
        public SaleARUpdateViewModel GetSaleARsDetailCopy(string number, int seriesId, int comId)
        {

            bool copied=true;
           // int count1, count2 = 0;
            var datas = FindSaleARCopy(number, seriesId, comId);
            var master = datas.SaleAR;
          //  count1 = datas.SaleARDetails.Count;
            var detail = datas.SaleARDetails.Where(s => s.OpenQty > 0).ToList();
           // count2 = detail.Count;
          //  copied = count1 != count2 ? true : false;
            var data = new SaleARUpdateViewModel
            {
                SaleAR = master,
                SaleARDetails = detail,
            };
            checkCopy(detail, master, copied);
            data.SaleARDetails.ForEach(i =>
            {
                i.LineID = i.LineID;
                i.SaleCopyType = SaleCopyType.AR;
            });
            data.SaleAR.BaseOnID = data.SaleAR.SARID;

            return data;
        }
        public ARReserveInvoiceUpdateViewModel GetARReserveInvoiceDetailDetailCopy(string number, int seriesId, int comId)
        {
            bool copied;
            int count1, count2 = 0;
            var data = FindARReserveInvoice(number, seriesId, comId);
            var master = data.ARReserveInvoice;
            count1 = data.ARReserveInvoiceDetails.Count;
            var detail = data.ARReserveInvoiceDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = detail.Count;
            copied = count1 != count2 ? true : false;
            var datanew = new ARReserveInvoiceUpdateViewModel
            {
                ARReserveInvoice = data.ARReserveInvoice,
                ARReserveInvoiceDetails = detail,
            };

            checkCopy(detail, master, copied);
            datanew.ARReserveInvoiceDetails.ForEach(i =>
            {
                i.LineID = i.ID.ToString();
                i.SaleCopyType = SaleCopyType.ARReserveInvoice;
            });
            datanew.ARReserveInvoice.BaseOnID = datanew.ARReserveInvoice.ID;
            return datanew;
        }
        private void checkCopy(IEnumerable<dynamic> dataDetail, dynamic data, bool copied, bool decimaltype = true)
        {

            dataDetail = dataDetail.Where(s => s.OpenQty > 0).ToList();
            data.FreightSalesView.ID = 0;
            data.FreightSalesView.SaleID = 0;
            foreach (var i in data.FreightSalesView.FreightSaleDetailViewModels)
            {
                i.ID = 0;
                i.FreightSaleID = 0;
            }
            foreach (var i in dataDetail)
            {
                if (i.OpenQty != i.Qty)
                {
                    copied = true;
                }
                i.Qty = i.OpenQty;
                i.DisValue = i.DisRate == 0 ? 0 : (i.DisRate / 100) * (i.OpenQty * i.UnitPrice);
                i.Total = (i.OpenQty * i.UnitPrice) - i.DisValue;
                i.TotalSys = i.Total * data.ExchangeRate;
                i.TaxValue = i.TaxRate == 0 ? 0 : i.Total * (i.TaxRate / 100);
                i.FinDisValue = i.FinDisRate == 0 ? 0 : (i.FinDisRate / 100) * i.Total;
                i.FinTotalValue = i.Total - i.FinDisValue;
                i.TaxOfFinDisValue = i.FinDisRate == 0 ? 0 : i.FinTotalValue * (i.TaxRate / 100);
                i.TotalWTax = i.Total + i.TaxValue;

                if (decimaltype == true)
                {
                    i.TotalWTaxSys = (i.TotalWTax * data.ExchangeRate);
                }
                else
                {
                    i.TotalWTaxSys = (double)i.TotalWTax * (double)data.ExchangeRate;
                }

                // Total += i.Total;
                // TaxDis += i.TaxOfFinDisValue;
            }
            if (copied)
            {


                data.FreightSalesView.AmountReven = 0;
                data.FreightSalesView.OpenAmountReven = 0;
                data.FreightSalesView.TaxSumValue = 0;
                data.FreightAmount = 0;
                data.FreightAmountSys = 0;
                data.FreightAmount = 0;
                data.FreightAmountSys = 0;

                var freight = data.FreightSalesView.FreightSaleDetailViewModels;
                foreach (var checkFreight in freight)
                {
                    checkFreight.ID = 0;
                    checkFreight.TaxGroupID = 0;
                    checkFreight.FreightSaleID = 0;
                    checkFreight.TaxRate = 0;
                    checkFreight.Amount = 0;
                    checkFreight.AmountWithTax = 0;
                    checkFreight.TotalTaxAmount = 0;
                    var taxgroup = checkFreight.TaxGroupSelect;
                    foreach (var checkSelect in taxgroup)
                    {
                        checkSelect.Selected = false;
                    }
                }

            }


            // decimal Freights = 0;
            // var master = data;
            // var totalFreight = data.FreightSalesView.FreightSaleDetailViewModels;
            // foreach (var f in totalFreight)
            // {
            //     Freights += f.TotalTaxAmount;
            // }

            data.SubTotal = dataDetail.Sum(s => (decimal)s.Total);
            data.SubTotalSys = data.SubTotal * data.ExchangeRate;
            data.SubTotalBefDis = data.SubTotal;
            data.SubTotalBefDisSys = data.SubTotalSys;
            data.DisValue = data.DisRate == 0 ? 0 : (data.DisRate / 100) * data.SubTotal;
            data.SubTotalAfterDis = data.SubTotal - data.DisValue;
            data.SubTotalAfterDisSys = data.SubTotalAfterDis * data.ExchangeRate;
            data.VatValue = dataDetail.Sum(s => (decimal)s.TaxOfFinDisValue) + ((List<FreightSaleDetailViewModel>)data.FreightSalesView.FreightSaleDetailViewModels).Sum(x => x.TotalTaxAmount);
            data.VatRate = data.VatValue == 0 ? 0 : (data.VatValue / (data.SubTotalAfterDis + data.FreightAmount)) * 100;
            data.TotalAmount = data.VatValue + data.SubTotalAfterDis + data.FreightAmount;
        }

        public void ReturnDeliveryStock(int id, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var SysCurID = _context.Company.FirstOrDefault(w => !w.Delete).SystemCurrencyID;
            var re = _context.ReturnDeliverys.First(r => r.ID == id);
            var red = _context.ReturnDeliveryDetails.Where(d => d.ReturnDeliveryID == id).ToList();
            var docType = _context.DocumentTypes.Find(re.DocTypeID);
            var series = _context.Series.Find(re.SeriesID);
            List<GLAccount> gLAccounts = _context.GLAccounts.Where(i => i.IsActive).ToList();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID);
            // update series
            string Sno = defaultJE.NextNo;
            long No = long.Parse(Sno);
            defaultJE.NextNo = Convert.ToString(No + 1);
            // update series details
            seriesDetail.SeriesID = defaultJE.ID;
            seriesDetail.Number = Sno;
            _context.Update(defaultJE);
            _context.Update(seriesDetail);
            _context.SaveChanges();
            // Insert Journal Entry
            journalEntry.SeriesID = defaultJE.ID;
            journalEntry.Number = re.InvoiceNumber;
            journalEntry.DouTypeID = defaultJE.DocuTypeID;
            journalEntry.Creator = re.UserID;
             journalEntry.BranchID= re.BranchID;
            journalEntry.TransNo = Sno;
            journalEntry.PostingDate = re.PostingDate;
            journalEntry.DocumentDate = re.DocumentDate;
            journalEntry.DueDate = re.DueDate;
            journalEntry.SSCID = re.SaleCurrencyID;
            journalEntry.LLCID = re.LocalCurID;
            journalEntry.CompanyID = re.CompanyID;
            journalEntry.LocalSetRate = re.LocalSetRate;
            journalEntry.SeriesDID = seriesDetail.ID;
            journalEntry.Remarks = series.Name + " " + re.InvoiceNumber;
            _context.Update(journalEntry);
            _context.SaveChanges();

            //return stock memo
            foreach (var item in red)
            {
                //update_warehouse_summary && itemmasterdata
                int inventoryAccID = 0, COGSAccID = 0;
                decimal inventoryAccAmount = 0, COGSAccAmount = 0;
                List<ItemAccounting> itemAccs = new();
                var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == re.WarehouseID && i.ItemID == item.ItemID);
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    itemAccs = _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID).ToList();
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID).ToList();
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                }
                //Get Cost form Inventoryaudit
                var delivery = _context.SaleDeliveries.FirstOrDefault(w => w.SDID == re.BasedOn) ?? new SaleDelivery();
                var invaudit = _context.InventoryAudits.FirstOrDefault(w => w.SeriesDetailID == delivery.SeriesDID && w.ItemID == item.ItemID && w.LineID == item.LineID) ?? new InventoryAudit();
                double @Cost = 0;
                if (itemMaster.Process != "Standard")
                {
                    var warehouseSummary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID);
                    double @Qty = item.Qty * item.Factor;

                    warehouseSummary.InStock += @Qty;
                    itemMaster.StockIn += @Qty;
                    inventoryAccAmount += (decimal)invaudit.Cost * (decimal)item.Qty;
                    COGSAccAmount += (decimal)invaudit.Cost * (decimal)item.Qty;
                    _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                    UpdateAndCheckStockReturnDelivery(
                        itemMaster, serials, batches, item, re, baseUOM,
                        docType, _itemAcc, @Qty, SysCurID, @Cost, inventoryAccAmount,
                        COGSAccAmount, warehouseSummary, inventoryAccID, COGSAccID,
                        journalEntryDetail, accountBalance, journalEntry, douTypeID, TransTypeWD.Delivery
                        );
                }
                else
                {
                    inventoryAccAmount += (decimal)invaudit.Cost * (decimal)item.Qty;
                    COGSAccAmount += (decimal)invaudit.Cost * (decimal)item.Qty;
                    // var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == re.PriceListID) ?? new PriceListDetail();
                    // inventoryAccAmount += (decimal)(priceListDetail.Cost * item.Qty * re.ExchangeRate);
                    //  COGSAccAmount += (decimal)(priceListDetail.Cost * item.Qty * re.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.ReturnDelivery.ToString(),
                        WarehouseID = re.WarehouseID,
                        BranchID = re.BranchID,
                        UserID = re.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = SysCurID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = re.InvoiceNumber,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = re.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty,
                        Cost = @Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) + item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (item.Qty * @Cost),
                        Trans_Valuse = item.Qty * @Cost,
                        LocalSetRate = (double)re.LocalSetRate,
                        SeriesDetailID = re.SeriesDID,
                        SeriesID = re.SeriesID,
                        DocumentTypeID = re.DocTypeID,
                        CompanyID = re.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }
                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialReturnDelivery(
                    inventoryAccID,
                    COGSAccID,
                    journalEntryDetail,
                    accountBalance,
                    inventoryAccAmount,
                    COGSAccAmount,
                    journalEntry,
                    re,
                    docType,
                    douTypeID
                    );
                }
            }
            //returm_stock_memo_bom
            foreach (var item in red)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * orft.Factor) * ((double)bomd.Qty * gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_cancel in items_material.ToList())
                    {
                        //update_warehouse_summary && itemmasterdata
                        var warehouseSummary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == re.WarehouseID);
                        var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_cancel.ItemID);
                        List<ItemAccounting> itemAccs = new();
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == re.WarehouseID && i.ItemID == item_cancel.ItemID);
                        var delivery = _context.SaleDeliveries.FirstOrDefault(w => w.SDID == re.BasedOn) ?? new SaleDelivery();
                        var invaudit = _context.InventoryAudits.FirstOrDefault(w => w.SeriesDetailID == delivery.SeriesDID && w.ItemID == item.ItemID && w.LineID == item.LineID) ?? new InventoryAudit();
                        double @Qty = item_cancel.Qty;
                        double @Cost = invaudit.Cost;
                        warehouseSummary.InStock += @Qty;
                        itemMaster.StockIn += @Qty;
                        _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                        int inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_cancel.GUoMID);
                        if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            itemAccs = _context.ItemAccountings.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == re.WarehouseID).ToList();
                            var inventoryAcc = (from ia in itemAccs
                                                join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in itemAccs
                                           join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            COGSAccIDAvg = COGSAcc.ID;
                            inventoryAccIDAvg = inventoryAcc.ID;
                        }
                        else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID).ToList();

                            var inventoryAcc = (from ia in itemAccs
                                                join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in itemAccs
                                           join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            COGSAccIDAvg = COGSAcc.ID;
                            inventoryAccIDAvg = inventoryAcc.ID;
                        }
                        //insert_warehousedetail
                        var inventoryAudit = new InventoryAudit();
                        var warehouseDetail = new WarehouseDetail();
                        warehouseDetail.WarehouseID = re.WarehouseID;
                        warehouseDetail.UomID = item_cancel.UomID;
                        warehouseDetail.UserID = re.UserID;
                        warehouseDetail.SyetemDate = re.PostingDate;
                        warehouseDetail.TimeIn = DateTime.Now;
                        warehouseDetail.InStock = @Qty;
                        warehouseDetail.CurrencyID = SysCurID;
                        warehouseDetail.ItemID = item_cancel.ItemID;
                        warehouseDetail.Cost = @Cost;
                        warehouseDetail.ExpireDate = item.ExpireDate;
                        if (itemMaster.Process == "FIFO")
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == re.WarehouseID);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.ReturnDelivery.ToString();
                            inventoryAudit.WarehouseID = re.WarehouseID;
                            inventoryAudit.BranchID = re.BranchID;
                            inventoryAudit.UserID = re.UserID;
                            inventoryAudit.ItemID = item_cancel.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item_cancel.UomID;
                            inventoryAudit.InvoiceNo = re.InvoiceNumber;
                            inventoryAudit.Trans_Type = "RE";
                            inventoryAudit.Process = item_cancel.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = re.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @Cost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost);
                            inventoryAudit.Trans_Valuse = @Qty * @Cost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = re.LocalCurID;
                            inventoryAudit.LocalSetRate = (double)re.LocalSetRate;
                            inventoryAudit.SeriesDetailID = re.SeriesDID;
                            inventoryAudit.SeriesID = re.SeriesID;
                            inventoryAudit.DocumentTypeID = re.DocTypeID;
                            inventoryAudit.CompanyID = re.CompanyID;
                            inventoryAccAmountAvg += (decimal)inventoryAudit.Cost * (decimal)@Qty;
                            COGSAccAmountAvg += (decimal)inventoryAudit.Cost * (decimal)@Qty;
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        else
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == re.WarehouseID);
                            double @AvgCost = (inventory_audit.Sum(s => s.Trans_Valuse) + @Cost) / (inventory_audit.Sum(s => s.Qty) + Qty);
                            @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.ReturnDelivery.ToString();
                            inventoryAudit.WarehouseID = re.WarehouseID;
                            inventoryAudit.BranchID = re.BranchID;
                            inventoryAudit.UserID = re.UserID;
                            inventoryAudit.ItemID = item_cancel.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item_cancel.UomID;
                            inventoryAudit.InvoiceNo = re.InvoiceNumber;
                            inventoryAudit.Trans_Type = "RE";
                            inventoryAudit.Process = item_cancel.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = re.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @AvgCost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = (inventory_audit.Sum(q => q.Qty)) + (@Qty);
                            inventoryAudit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@Qty * @AvgCost);
                            inventoryAudit.Trans_Valuse = @Qty * @AvgCost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = re.LocalCurID;
                            inventoryAudit.LocalSetRate = (double)re.LocalSetRate;
                            inventoryAudit.SeriesDetailID = re.SeriesDID;
                            inventoryAudit.SeriesID = re.SeriesID;
                            inventoryAudit.DocumentTypeID = re.DocTypeID;
                            inventoryAudit.CompanyID = re.CompanyID;
                            inventoryAccAmountAvg += (decimal)inventoryAudit.Cost;
                            //
                            var inventoryAcct = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID);
                            double InvCost = ((inventoryAcct.Sum(s => s.Trans_Valuse) + inventoryAudit.Cost) / (inventoryAcct.Sum(q => q.Qty) + inventoryAudit.Qty));
                            COGSAccAmountAvg += (decimal)InvCost * (decimal)@Qty;
                            _utility.UpdateAvgCost(item_cancel.ItemID, re.WarehouseID, item.GUomID, @Qty, @AvgCost);
                            _utility.UpdateBomCost(item_cancel.ItemID, @Qty, @AvgCost);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        _context.InventoryAudits.Update(inventoryAudit);
                        _context.WarehouseSummary.Update(warehouseSummary);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _context.WarehouseDetails.Update(warehouseDetail);
                        _context.SaveChanges();
                        InsertFinancialReturnDelivery(
                            inventoryAccIDAvg,
                            COGSAccIDAvg,
                            journalEntryDetail,
                            accountBalance,
                            inventoryAccAmountAvg,
                            COGSAccAmountAvg,
                            journalEntry,
                            re,
                            docType,
                            douTypeID
                        );
                    }

                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID);
            journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
            journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
            _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
            _context.AccountBalances.UpdateRange(accountBalance);
            _context.SaveChanges();
        }

        private void UpdateAndCheckStockReturnDelivery(
            ItemMasterData itemMaster, List<SerialNumber> serials,
            List<BatchNo> batches, ReturnDeliveryDetail item, ReturnDelivery re, GroupDUoM baseUOM,
            DocumentType docType, ItemAccounting _itemAcc, double @Qty, int SysCurID, double @Cost,
            decimal inventoryAccAmount, decimal COGSAccAmount, WarehouseSummary warehouseSummary,
            int inventoryAccID, int COGSAccID, List<JournalEntryDetail> journalEntryDetail,
            List<AccountBalance> accountBalance, JournalEntry journalEntry, DocumentType douTypeID, TransTypeWD transType
            )
        {
            if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
            {
                if (serials.Count > 0)
                {
                    List<WareForAudiView> wareForAudis = new();
                    foreach (var s in serials)
                    {
                        if (s.SerialNumberSelected != null)
                        {
                            foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                            {
                                decimal _inventoryAccAmount = 0M;
                                decimal _COGSAccAmount = 0M;
                                StockOut waredetial = _context.StockOuts
                                .FirstOrDefault(i =>
                                i.ItemID == item.ItemID
                                && ss.SerialNumber == i.SerialNumber
                                && i.InStock > 0 && i.TransType == transType);
                                if (waredetial != null)
                                {
                                    @Cost = (double)waredetial.Cost;
                                    waredetial.InStock -= 1;
                                    // insert to warehouse detail
                                    _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                    var ware = new WarehouseDetail
                                    {
                                        AdmissionDate = waredetial.AdmissionDate,
                                        Cost = (double)waredetial.Cost,
                                        CurrencyID = waredetial.CurrencyID,
                                        Details = waredetial.Details,
                                        ID = 0,
                                        InStock = 1,
                                        ItemID = waredetial.ItemID,
                                        Location = waredetial.Location,
                                        LotNumber = waredetial.LotNumber,
                                        MfrDate = waredetial.MfrDate,
                                        MfrSerialNumber = waredetial.MfrSerialNumber,
                                        MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                        MfrWarDateStart = waredetial.MfrWarDateStart,
                                        ProcessItem = ProcessItem.SEBA,
                                        SerialNumber = waredetial.SerialNumber,
                                        PlateNumber = waredetial.PlateNumber,
                                        Color = waredetial.Color,
                                        Brand = waredetial.Brand,
                                        Condition = waredetial.Condition,
                                        Type = waredetial.Type,
                                        Power = waredetial.Power,
                                        Year = waredetial.Year,
                                        SyetemDate = DateTime.Now,
                                        SysNum = 0,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = waredetial.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = re.UserID,
                                        ExpireDate = _expdate,
                                        TransType = TransTypeWD.ReturnDelivery,
                                        InStockFrom = re.ID,
                                        IsDeleted = true,
                                        BPID = re.CusID,
                                    };
                                    wareForAudis.Add(new WareForAudiView
                                    {
                                        Cost = ware.Cost,
                                        Qty = ware.InStock,
                                        ExpireDate = ware.ExpireDate,
                                    });
                                    _inventoryAccAmount = waredetial.Cost;
                                    _COGSAccAmount = waredetial.Cost;
                                    _context.WarehouseDetails.Add(ware);
                                    _context.SaveChanges();
                                }
                                InsertFinancialReturnDelivery(
                                    inventoryAccID,
                                    COGSAccID,
                                    journalEntryDetail,
                                    accountBalance,
                                    _inventoryAccAmount,
                                    _COGSAccAmount,
                                    journalEntry,
                                    re,
                                    docType,
                                    douTypeID
                                );
                            }
                        }
                    }

                    // Insert to Inventory Audit
                    wareForAudis = (from wa in wareForAudis
                                    group wa by wa.Cost into g
                                    let wha = g.FirstOrDefault()
                                    select new WareForAudiView
                                    {
                                        Qty = g.Sum(i => i.Qty),
                                        Cost = wha.Cost,
                                        ExpireDate = wha.ExpireDate,
                                    }).ToList();
                    if (wareForAudis.Any())
                    {
                        foreach (var i in wareForAudis)
                        {
                            var inventory_audit = _context.InventoryAudits
                        .Where(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID);
                            var inventory = new InventoryAudit
                            {
                                ID = 0,
                                WarehouseID = re.WarehouseID,
                                BranchID = re.BranchID,
                                UserID = re.UserID,
                                ItemID = item.ItemID,
                                CurrencyID = re.SaleCurrencyID,
                                UomID = baseUOM.BaseUOM,
                                InvoiceNo = re.InvoiceNumber,
                                Trans_Type = docType.Code,
                                Process = itemMaster.Process,
                                SystemDate = DateTime.Now,
                                TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                Qty = i.Qty,
                                Cost = i.Cost,
                                Price = 0,
                                CumulativeQty = inventory_audit.Sum(q => q.Qty) + i.Qty,
                                CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + i.Qty * i.Cost,
                                Trans_Valuse = i.Cost * i.Qty,
                                ExpireDate = i.ExpireDate,
                                LocalCurID = re.LocalCurID,
                                LocalSetRate = (double)re.LocalSetRate,
                                CompanyID = re.CompanyID,
                                DocumentTypeID = docType.ID,
                                SeriesID = re.SeriesID,
                                SeriesDetailID = re.SeriesDID,
                            };
                            _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                            _context.InventoryAudits.Add(inventory);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            else if (itemMaster.ManItemBy == ManageItemBy.Batches)
            {
                if (batches.Count > 0)
                {
                    List<WareForAudiView> wareForAudis = new();
                    foreach (var b in batches)
                    {
                        if (b.BatchNoSelected != null)
                        {
                            foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                            {
                                decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                var waredetial = _context.StockOuts
                                    .FirstOrDefault(i =>
                                    i.ItemID == item.ItemID
                                    && sb.BatchNo == i.BatchNo
                                    && i.TransType == transType && i.InStock > 0);
                                decimal _inventoryAccAmount = 0M;
                                decimal _COGSAccAmount = 0M;
                                if (waredetial != null)
                                {
                                    @Cost = (double)waredetial.Cost;
                                    waredetial.InStock -= selectedQty;
                                    _context.SaveChanges();

                                    // insert to waredetial
                                    var ware = new WarehouseDetail
                                    {
                                        AdmissionDate = waredetial.AdmissionDate,
                                        Cost = (double)waredetial.Cost,
                                        CurrencyID = waredetial.CurrencyID,
                                        Details = waredetial.Details,
                                        ID = 0,
                                        InStock = (double)selectedQty,
                                        ItemID = item.ItemID,
                                        Location = waredetial.Location,
                                        MfrDate = waredetial.MfrDate,
                                        ProcessItem = ProcessItem.SEBA,
                                        SyetemDate = DateTime.Now,
                                        SysNum = 0,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = waredetial.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = re.UserID,
                                        ExpireDate = sb.ExpireDate,
                                        BatchAttr1 = waredetial.BatchAttr1,
                                        BatchAttr2 = waredetial.BatchAttr2,
                                        BatchNo = waredetial.BatchNo,
                                        TransType = TransTypeWD.ReturnDelivery,
                                        IsDeleted = true,
                                        InStockFrom = re.ID,
                                        BPID = re.CusID,
                                    };
                                    wareForAudis.Add(new WareForAudiView
                                    {
                                        Cost = ware.Cost,
                                        Qty = (double)selectedQty,
                                        ExpireDate = ware.ExpireDate,
                                    });
                                    _inventoryAccAmount = waredetial.Cost * selectedQty;
                                    _COGSAccAmount = waredetial.Cost * selectedQty;
                                    _context.WarehouseDetails.Add(ware);
                                    _context.SaveChanges();
                                }
                                InsertFinancialReturnDelivery(
                                    inventoryAccID,
                                    COGSAccID,
                                    journalEntryDetail,
                                    accountBalance,
                                    _inventoryAccAmount,
                                    _COGSAccAmount,
                                    journalEntry,
                                    re,
                                    docType,
                                    douTypeID
                                );
                            }
                        }
                    }
                    // insert to inventory audit
                    wareForAudis = (from wa in wareForAudis
                                    group wa by wa.Cost into g
                                    let wha = g.FirstOrDefault()
                                    select new WareForAudiView
                                    {
                                        Qty = g.Sum(i => i.Qty),
                                        Cost = wha.Cost,
                                        ExpireDate = wha.ExpireDate
                                    }).ToList();

                    if (wareForAudis.Any())
                    {
                        foreach (var i in wareForAudis)
                        {
                            var inventory_audit = _context.InventoryAudits
                        .Where(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID);
                            var inventory = new InventoryAudit
                            {
                                ID = 0,
                                WarehouseID = re.WarehouseID,
                                BranchID = re.BranchID,
                                UserID = re.UserID,
                                ItemID = item.ItemID,
                                CurrencyID = re.SaleCurrencyID,
                                UomID = baseUOM.BaseUOM,
                                InvoiceNo = re.InvoiceNumber,
                                Trans_Type = docType.Code,
                                Process = itemMaster.Process,
                                SystemDate = DateTime.Now,
                                TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                Qty = i.Qty,
                                Cost = i.Cost,
                                Price = 0,
                                CumulativeQty = inventory_audit.Sum(q => q.Qty) + i.Qty,
                                CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (i.Qty * i.Cost),
                                Trans_Valuse = i.Qty * i.Cost,
                                ExpireDate = i.ExpireDate,
                                LocalCurID = re.LocalCurID,
                                LocalSetRate = (double)re.LocalSetRate,
                                CompanyID = re.CompanyID,
                                DocumentTypeID = docType.ID,
                                SeriesID = re.SeriesID,
                                SeriesDetailID = re.SeriesDID,
                            };
                            _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                            _context.InventoryAudits.Add(inventory);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            else
            {
                //insert_warehousedetail
                var inventoryAudit = new InventoryAudit();
                var warehouseDetail = new WarehouseDetail();
                warehouseDetail.WarehouseID = re.WarehouseID;
                warehouseDetail.UomID = item.UomID;
                warehouseDetail.UserID = re.UserID;
                warehouseDetail.SyetemDate = re.PostingDate;
                warehouseDetail.TimeIn = DateTime.Now;
                warehouseDetail.InStock = @Qty;
                warehouseDetail.CurrencyID = SysCurID;
                warehouseDetail.ItemID = item.ItemID;
                warehouseDetail.Cost = @Cost;
                warehouseDetail.ExpireDate = item.ExpireDate;
                warehouseDetail.InStockFrom = re.ID;
                warehouseDetail.TransType = TransTypeWD.ReturnDelivery;
                warehouseDetail.BPID = re.CusID;
                warehouseDetail.IsDeleted = true;
                if (itemMaster.Process == "FIFO")
                {
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID);
                    inventoryAudit.ID = 0;
                    inventoryAudit.WarehouseID = re.WarehouseID;
                    inventoryAudit.BranchID = re.BranchID;
                    inventoryAudit.UserID = re.UserID;
                    inventoryAudit.ItemID = item.ItemID;
                    inventoryAudit.CurrencyID = SysCurID;
                    inventoryAudit.UomID = item.UomID;
                    inventoryAudit.InvoiceNo = re.InvoiceNumber;
                    inventoryAudit.Trans_Type = "RE";
                    inventoryAudit.Process = itemMaster.Process;
                    inventoryAudit.SystemDate = DateTime.Now;
                    inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                    inventoryAudit.Qty = @Qty;
                    inventoryAudit.Cost = @Cost;
                    inventoryAudit.Price = 0;
                    inventoryAudit.CumulativeQty = (inventory_audit.Sum(q => q.Qty)) + (@Qty);
                    inventoryAudit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@Qty * @Cost);
                    inventoryAudit.Trans_Valuse = @Qty * @Cost;
                    inventoryAudit.ExpireDate = item.ExpireDate;
                    inventoryAudit.LocalCurID = re.LocalCurID;
                    inventoryAudit.LocalSetRate = (double)re.LocalSetRate;
                    inventoryAudit.SeriesDetailID = re.SeriesDID;
                    inventoryAudit.SeriesID = re.SeriesID;
                    inventoryAudit.DocumentTypeID = re.DocTypeID;
                    inventoryAudit.CompanyID = re.CompanyID;
                    inventoryAccAmount += (decimal)(inventoryAudit.Cost * @Qty);
                    COGSAccAmount += (decimal)(inventoryAudit.Cost * @Qty);
                    _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                }
                else
                {
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == re.WarehouseID);
                    InventoryAudit avgInventory = new() { Cost = @Cost, Qty = Qty };
                    double @AvgCost = _utility.CalAVGCost(item.ItemID, re.WarehouseID, avgInventory);
                    inventoryAudit.ID = 0;
                    inventoryAudit.WarehouseID = re.WarehouseID;
                    inventoryAudit.BranchID = re.BranchID;
                    inventoryAudit.UserID = re.UserID;
                    inventoryAudit.ItemID = item.ItemID;
                    inventoryAudit.CurrencyID = SysCurID;
                    inventoryAudit.UomID = item.UomID;
                    inventoryAudit.InvoiceNo = re.InvoiceNumber;
                    inventoryAudit.Trans_Type = "RE";
                    inventoryAudit.Process = itemMaster.Process;
                    inventoryAudit.SystemDate = DateTime.Now;
                    inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                    inventoryAudit.Qty = @Qty;
                    inventoryAudit.Cost = @AvgCost;
                    inventoryAudit.Price = 0;
                    inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                    inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @AvgCost);
                    inventoryAudit.Trans_Valuse = @Qty * @AvgCost;
                    inventoryAudit.ExpireDate = item.ExpireDate;
                    inventoryAudit.LocalCurID = re.LocalCurID;
                    inventoryAudit.LocalSetRate = (double)re.LocalSetRate;
                    inventoryAudit.SeriesDetailID = re.SeriesDID;
                    inventoryAudit.SeriesID = re.SeriesID;
                    inventoryAudit.DocumentTypeID = re.DocTypeID;
                    inventoryAudit.CompanyID = re.CompanyID;
                    double InvCost = _utility.CalAVGCost(item.ItemID, re.WarehouseID, inventoryAudit);
                    inventoryAccAmount += (decimal)(InvCost * @Qty);
                    COGSAccAmount += (decimal)(InvCost * @Qty);
                    _utility.UpdateAvgCost(item.ItemID, re.WarehouseID, item.GUomID, @Qty, @AvgCost);
                    _utility.UpdateBomCost(item.ItemID, @Qty, @AvgCost);
                    _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                }
                _context.InventoryAudits.Update(inventoryAudit);
                _context.WarehouseDetails.Update(warehouseDetail);
            }
            _context.WarehouseSummary.Update(warehouseSummary);
            _context.ItemMasterDatas.Update(itemMaster);
        }
        private void InsertFinancialReturnDelivery(
            int inventoryAccID,
            int COGSAccID,
            List<JournalEntryDetail> journalEntryDetail,
            List<AccountBalance> accountBalance,
            decimal inventoryAccAmount,
            decimal COGSAccAmount,
            JournalEntry journalEntry,
            ReturnDelivery re,
            DocumentType docType,
            DocumentType douTypeID
            )
        {
            //inventoryAccID
            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
            if (glAccInvenfifo.ID > 0)
            {
                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                if (listInvenfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                    glAccInvenfifo.Balance += inventoryAccAmount;
                    //journalEntryDetail
                    listInvenfifo.Debit += inventoryAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                    accBalance.Debit += inventoryAccAmount;
                }
                else
                {
                    glAccInvenfifo.Balance += inventoryAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.GLAcct,
                        ItemID = inventoryAccID,
                        Credit = inventoryAccAmount,
                    });
                    //
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,

                        PostingDate = re.PostingDate,
                        Origin = docType.ID,
                        OriginNo = re.InvoiceNumber,
                        OffsetAccount = glAccInvenfifo.Code,
                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                        CumulativeBalance = glAccInvenfifo.Balance,
                        Debit = inventoryAccAmount,
                        LocalSetRate = re.LocalSetRate,
                        GLAID = inventoryAccID,
                        Effective = EffectiveBlance.Debit
                    });
                }
                _context.Update(glAccInvenfifo);
            }
            // COGS
            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
            if (glAccCOGSfifo.ID > 0)
            {
                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                if (listCOGSfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                    glAccCOGSfifo.Balance -= COGSAccAmount;
                    //journalEntryDetail
                    listCOGSfifo.Credit += COGSAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                    accBalance.Credit += COGSAccAmount;
                }
                else
                {
                    glAccCOGSfifo.Balance -= COGSAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.GLAcct,
                        ItemID = COGSAccID,
                        Debit = COGSAccAmount,
                    });
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = re.PostingDate,
                        Origin = docType.ID,
                        OriginNo = re.InvoiceNumber,
                        OffsetAccount = glAccCOGSfifo.Code,
                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                        CumulativeBalance = glAccCOGSfifo.Balance,
                        Credit = COGSAccAmount,
                        LocalSetRate = re.LocalSetRate,
                        GLAID = COGSAccID,
                        Effective = EffectiveBlance.Credit
                    });
                }
                _context.Update(glAccCOGSfifo);
            }
            _context.SaveChanges();
        }

        private void InsertFinancialDelivery(
            int inventoryAccID,
            int COGSAccID,
            List<JournalEntryDetail> journalEntryDetail,
            List<AccountBalance> accountBalance,
            decimal inventoryAccAmount,
            decimal COGSAccAmount,
            JournalEntry journalEntry,
            SaleDelivery saledeli,
            DocumentType docType,
            DocumentType douTypeID)
        {
            //inventoryAccID
            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
            if (glAccInvenfifo.ID > 0)
            {
                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                if (listInvenfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                    glAccInvenfifo.Balance -= inventoryAccAmount;
                    //journalEntryDetail
                    listInvenfifo.Credit += inventoryAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                    accBalance.Credit += inventoryAccAmount;
                }
                else
                {
                    glAccInvenfifo.Balance -= inventoryAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.GLAcct,
                        ItemID = inventoryAccID,
                        Credit = inventoryAccAmount,
                    });
                    //
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,

                        PostingDate = saledeli.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saledeli.InvoiceNumber,
                        OffsetAccount = glAccInvenfifo.Code,
                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                        CumulativeBalance = glAccInvenfifo.Balance,
                        Credit = inventoryAccAmount,
                        LocalSetRate = (decimal)saledeli.LocalSetRate,
                        GLAID = inventoryAccID,
                        Effective = EffectiveBlance.Credit
                    });
                }
                _context.Update(glAccInvenfifo);
            }
            // COGS
            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
            if (glAccCOGSfifo.ID > 0)
            {
                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                if (listCOGSfifo.ItemID > 0)
                {
                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                    glAccCOGSfifo.Balance += COGSAccAmount;
                    //journalEntryDetail
                    listCOGSfifo.Debit += COGSAccAmount;
                    //accountBalance
                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                    accBalance.Debit += COGSAccAmount;
                }
                else
                {
                    glAccCOGSfifo.Balance += COGSAccAmount;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.GLAcct,
                        ItemID = COGSAccID,
                        Debit = COGSAccAmount,
                    });
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,

                        PostingDate = saledeli.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saledeli.InvoiceNumber,
                        OffsetAccount = glAccCOGSfifo.Code,
                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                        CumulativeBalance = glAccCOGSfifo.Balance,
                        Debit = COGSAccAmount,
                        LocalSetRate = (decimal)saledeli.LocalSetRate,
                        GLAID = COGSAccID,
                        Effective = EffectiveBlance.Debit
                    });
                }
                _context.Update(glAccCOGSfifo);
            }
            _context.SaveChanges();
        }
        private void InsertFinancialAR(
            int inventoryAccID,
            int COGSAccID,
            List<JournalEntryDetail> journalEntryDetail,
            List<AccountBalance> accountBalance,
            decimal inventoryAccAmount,
            decimal COGSAccAmount,
            JournalEntry journalEntry,
            SaleAR Order,
            DocumentType docType,
            DocumentType douTypeID,
            GLAccount glAcc,
            string type)
        {
            if (type != "Delivery")
            {

                //inventoryAccID
                var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
                if (glAccInvenfifo.ID > 0)
                {
                    var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                    if (listInvenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        //journalEntryDetail
                        listInvenfifo.Credit += inventoryAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                        accBalance.Credit += inventoryAccAmount;
                    }
                    else
                    {
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = inventoryAccID,
                            Credit = inventoryAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                            CumulativeBalance = glAccInvenfifo.Balance,
                            Credit = inventoryAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = inventoryAccID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(glAccInvenfifo);
                }
                // COGS
                var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                if (glAccCOGSfifo.ID > 0)
                {
                    var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                    if (listCOGSfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        //journalEntryDetail
                        listCOGSfifo.Debit += COGSAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                        accBalance.Debit += COGSAccAmount;
                    }
                    else
                    {
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = COGSAccID,
                            Debit = COGSAccAmount,
                            BPAcctID = Order.CusID
                        });
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                            CumulativeBalance = glAccCOGSfifo.Balance,
                            Debit = COGSAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = COGSAccID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(glAccCOGSfifo);
                }
                _context.SaveChanges();


                //============account aplied amount==========
                if (Order.AppliedAmount > 0)
                {
                    var incomAccReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
                    var glAccD = _context.GLAccounts.FirstOrDefault(w => w.ID == Order.GLAccID);
                    ////BPacc
                    glAccD.Balance -= (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate;
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = incomAccReceive.GLAccID,
                        Credit = (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate,
                        BPAcctID = Order.CusID,
                    });
                    glAccD.Balance -= (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNo,
                        OffsetAccount = glAccD.Code,
                        Details = douTypeID.Name + " - " + glAccD.Code,
                        CumulativeBalance = glAccD.Balance,
                        Credit = (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate,
                        LocalSetRate = (decimal)Order.LocalSetRate,
                        GLAID = incomAccReceive.GLAccID,
                        BPAcctID = Order.CusID,
                        Creator = Order.UserID,
                        Effective = EffectiveBlance.Credit
                    });

                    //============account aplied amount==========
                    var glAccC = _context.GLAccounts.FirstOrDefault(w => w.ID == Order.GLAccID) ?? new GLAccount();
                    if (glAccC.ID > 0)
                    {
                        glAccC.Balance += (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.BPCode,
                            ItemID = glAccC.ID,
                            Debit = (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate
                        });
                        glAccC.Balance += (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate;
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNo,
                            OffsetAccount = glAccC.Code,
                            Details = douTypeID.Name + " - " + glAccC.Code,
                            CumulativeBalance = glAccC.Balance,
                            Debit = (decimal)Order.AppliedAmount * (decimal)Order.ExchangeRate,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = glAccC.ID,
                            Creator = Order.UserID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                }


            }
        }
        //==============InsertFinacialAR Reserve Invoice =====
        private void InsertFinancialARReserveInvoice(
        int inventoryAccID,
        int COGSAccID,
        List<JournalEntryDetail> journalEntryDetail,
        List<AccountBalance> accountBalance,
        decimal inventoryAccAmount,
        decimal COGSAccAmount,
        JournalEntry journalEntry,
        ARReserveInvoice Order,
        DocumentType docType,
        DocumentType douTypeID,
        GLAccount glAcc,
        string type)
        {
            if (type != "Delivery")
            {
                //inventoryAccID
                var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
                if (glAccInvenfifo.ID > 0)
                {
                    var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                    if (listInvenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        //journalEntryDetail
                        listInvenfifo.Credit += inventoryAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                        accBalance.Credit += inventoryAccAmount;
                    }
                    else
                    {
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = inventoryAccID,
                            Credit = inventoryAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                            CumulativeBalance = glAccInvenfifo.Balance,
                            Credit = inventoryAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = inventoryAccID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(glAccInvenfifo);
                }
                // COGS
                var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                if (glAccCOGSfifo.ID > 0)
                {
                    var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                    if (listCOGSfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        //journalEntryDetail
                        listCOGSfifo.Debit += COGSAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                        accBalance.Debit += COGSAccAmount;
                    }
                    else
                    {
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = COGSAccID,
                            Debit = COGSAccAmount,
                            BPAcctID = Order.CusID
                        });
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                            CumulativeBalance = glAccCOGSfifo.Balance,
                            Debit = COGSAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = COGSAccID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(glAccCOGSfifo);
                }
                _context.SaveChanges();
            }
        }

        public void IssueARDownPayment(ARDownPayment ard, SaleGLAccountDetermination saleGlDeter)
        {
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == ard.CompanyID);
            var docType = _context.DocumentTypes.Find(ard.DocTypeID);
            var series = _context.Series.Find(ard.SeriesID);
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = ard.UserID;
                 journalEntry.BranchID = ard.BranchID;
                journalEntry.TransNo = ard.InvoiceNumber;
                journalEntry.PostingDate = ard.PostingDate;
                journalEntry.DocumentDate = ard.DocumentDate;
                journalEntry.DueDate = ard.DueDate;
                journalEntry.SSCID = ard.SaleCurrencyID;
                journalEntry.LLCID = ard.LocalCurID;
                journalEntry.CompanyID = ard.CompanyID;
                journalEntry.LocalSetRate = ard.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + ard.InvoiceNumber;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();

            foreach (var i in ard.ARDownPaymentDetails)
            {
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = i.TaxDownPaymentValue * ard.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = ard.PostingDate,
                            Origin = docType.ID,
                            OriginNo = ard.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = ard.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }
            }

            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == ard.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = (decimal)ard.TotalAmountSys,
                    BPAcctID = ard.CusID,
                });
                //Insert 
                glAcc.Balance += (decimal)ard.TotalAmountSys;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,

                    PostingDate = ard.PostingDate,
                    Origin = docType.ID,
                    OriginNo = ard.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Debit = (decimal)ard.TotalAmountSys,
                    LocalSetRate = ard.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    BPAcctID = ard.CusID,
                    Creator = ard.UserID,
                    Effective = EffectiveBlance.Debit
                });
                _context.Update(glAcc);
            }
            var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();
            if (dpmAcc.ID > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Credit = ard.DPMValue * ard.ExchangeRate,
                    BPAcctID = ard.CusID,
                });
                //Insert 
                dpmAcc.Balance -= ard.DPMValue * ard.ExchangeRate;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,

                    PostingDate = ard.PostingDate,
                    Origin = docType.ID,
                    OriginNo = ard.InvoiceNumber,
                    OffsetAccount = dpmAcc.Code,
                    Details = douTypeID.Name + " - " + dpmAcc.Code,
                    CumulativeBalance = dpmAcc.Balance,
                    Credit = ard.DPMValue * ard.ExchangeRate,
                    LocalSetRate = ard.LocalCurID,
                    GLAID = dpmAcc.ID,
                    Creator = ard.UserID,
                    BPAcctID = ard.CusID,
                    Effective = EffectiveBlance.Credit
                });
                _context.Update(dpmAcc);
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }

        public void CreateIncomingPaymentCustomerByARDownPayment(ARDownPayment ard, SystemCurrency syscur)
        {
            string currencyName = _context.Currency.Find(ard.SaleCurrencyID).Description;
            var payment = _context.IncomingPaymentCustomers.FirstOrDefault(p => p.InvoiceNumber == ard.InvoiceNumber && p.SeriesID == ard.SeriesID);
            var docType = _context.DocumentTypes.Find(ard.DocTypeID);
            var em = _context.Employees.FirstOrDefault(i => i.ID == ard.SaleEmID) ?? new CKBS.Models.Services.HumanResources.Employee();
            var user = _userModule.CurrentUser;
            IncomingPaymentCustomer ipcustomer = new()
            {
                IncomingPaymentCustomerID = 0,
                EmID = em.ID,
                EmName = em.Name,
                CreatorID = user.ID,
                CreatorName = user.Username,
                CustomerID = ard.CusID,
                BranchID = ard.BranchID,
                WarehouseID = ard.WarehouseID,
                DocTypeID = ard.DocTypeID,
                SeriesID = ard.SeriesID,
                SeriesDID = ard.SeriesDID,
                CompanyID = ard.CompanyID,
                InvoiceNumber = ard.InvoiceNumber,
                CurrencyID = ard.SaleCurrencyID,
                Types = SaleCopyType.ARDownPayment.ToString(),
                //DocumentNo = ard.InvoiceNo,
                //DocumentType = GetTransactType(ard.InvoiceNo, ard.IncludeVat),
                Applied_Amount = (double)ard.AppliedAmount,
                CurrencyName = currencyName,
                ExchangeRate = (double)ard.ExchangeRate,
                TotalPayment = /*ard.DPMRate == 0 || ard.DPMValue == 0 ? (double)ard.SubTotalAfterDis :*/ ard.TotalAmount - (double)ard.AppliedAmount,
                CashDiscount = 0,
                Total = ard.TotalAmount - (double)ard.AppliedAmount,//ard.TotalAmount,
                TotalDiscount = 0,
                BalanceDue = ard.TotalAmount - (double)ard.AppliedAmount,
                Status = ard.Status,
                Date = ard.DueDate,
                PostingDate = ard.PostingDate,
                SysCurrency = syscur.ID,
                SysName = syscur.Description,
                LocalCurID = ard.LocalCurID,
                LocalSetRate = (double)ard.LocalSetRate,
                ItemInvoice = $"{docType.Code}-{ard.InvoiceNumber}"
            };

            if ((decimal)ard.TotalAmount <= ard.AppliedAmount)
            {
                ard.Status = "close";
            }

            if (payment != null)
            {
                payment.Applied_Amount = (double)ard.AppliedAmount;
                payment.BalanceDue = ard.TotalAmount - (double)ard.AppliedAmount;
                //payment.TotalPayment -= ard.AppliedAmount;
                payment.TotalPayment = ard.TotalAmount - (double)ard.AppliedAmount;
                payment.Status = ard.Status;
                var paymentDetails = _context.IncomingPaymentDetails.Where(ipd => ipd.DocumentNo == payment.DocumentNo);
                foreach (var pd in paymentDetails)
                {
                    pd.Delete = true;
                }
                _context.IncomingPaymentCustomers.Update(payment);
            }
            else
            {
                _context.IncomingPaymentCustomers.Add(ipcustomer);
            }

            _context.SaveChanges();
        }

        public IEnumerable<SaleARDPINCN> ARDownPaymentINCN(int curId, string status, int arid = 0)
        {
            var data = (from ard in _context.ARDownPayments.Where(i => i.Status == status && i.CusID == curId)
                        join docType in _context.DocumentTypes on ard.DocTypeID equals docType.ID
                        join cur in _context.Currency on ard.SaleCurrencyID equals cur.ID
                        select new SaleARDPINCN
                        {
                            ARID = ard.ARID,
                            Currency = cur.Description,
                            CurrencyID = cur.ID,
                            LocalSetRate = ard.LocalSetRate,
                            LocalCurID = ard.LocalCurID,
                            ARDID = ard.ARDID,
                            Amount = ard.DPMValue,
                            DocDate = ard.DocumentDate.ToShortDateString(),
                            Docnumber = ard.InvoiceNumber,
                            DocType = docType.Code,
                            Remarks = ard.Remarks ?? "",
                            Selected = false,
                            SaleARDPINCNDetails = (from ardd in _context.ARDownPaymentDetails.Where(i => i.ARDID == ard.ARDID)
                                                   join item in _context.ItemMasterDatas on ardd.ItemID equals item.ID
                                                   let taxGroup = _context.TaxGroups.FirstOrDefault(i => i.ID == ardd.TaxGroupID) ?? new TaxGroup()
                                                   select new SaleARDPINCNDetail
                                                   {
                                                       ID = ardd.ID,
                                                       ARDID = ardd.ARDID,
                                                       Barcode = item.Barcode ?? "",
                                                       ItemCode = ardd.ItemCode,
                                                       DisRate = ardd.DisRate,
                                                       DisValue = ardd.DisValue,
                                                       FinDisRate = ardd.FinDisRate,
                                                       FinDisValue = ardd.FinDisValue,
                                                       FinTotalValue = ardd.FinTotalValue,
                                                       ItemName = item.KhmerName,
                                                       Quantity = ardd.Qty,
                                                       Remarks = ardd.Remarks,
                                                       TaxDownPaymentValue = ardd.TaxDownPaymentValue,
                                                       TaxOfFinDisValue = ardd.TaxOfFinDisValue,
                                                       TaxRate = ardd.TaxRate,
                                                       TaxValue = ardd.TaxValue,
                                                       Total = (decimal)ardd.Total,
                                                       TotalWTax = ardd.TotalWTax,
                                                       UnitPrice = ardd.UnitPrice,
                                                       UoMName = ardd.UomName,
                                                       Currency = cur.Description,
                                                       TaxCode = taxGroup.Code,
                                                       TaxGroupID = ardd.TaxGroupID,
                                                   }).ToList(),
                        }).ToList();
            if (arid > 0)
            {
                var _data = data.Where(i => i.ARID == arid).ToList();
                _data.ForEach(i => i.Selected = true);
                return _data;
            }
            else
            {
                return data;
            }
        }
        //------------------------------------Start project Cost Analysis--------------------
        public async Task<List<ProjeccostStory>> GetStoryProjcostAsyce()
        {
            var list = (from projc in _context.ProjectCostAnalyses.OrderBy(s => s.Name)
                        select new ProjeccostStory
                        {
                            ID = projc.ID,
                            Name = projc.Name,
                            SeriesID = projc.SeriesID,
                            InvoiceNumber = projc.InvoiceNumber,
                            CompanyID = projc.CompanyID,
                            PostingDate = projc.PostingDate.ToString("dd/MM/yyyy"),
                            ValidUntilDate = projc.ValidUntilDate.ToString("dd/MM/yyyy"),
                            DocumentDate = projc.DocumentDate.ToString("dd/MM/yyyy"),
                        }).ToList();
            return await Task.FromResult(list);
        }

        public SaleQuoteUpdateViewModel FindProjectCostAnalysis(string number, int seriesId, int comId)
        {
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleQ = (from sq in _context.ProjectCostAnalyses.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                         join saleem in _context.Employees on sq.SaleEMID equals saleem.ID
                         join docType in _context.DocumentTypes on sq.DocTypeID equals docType.ID
                         let fs = _context.FreightProjectCosts.Where(i => i.ProjCAID == sq.ID && i.SaleType == SaleCopyType.ProjectCostAnalysisDetail).FirstOrDefault() ?? new FreightProjectCost()
                         select new SaleQuoteViewModel
                         {
                             BranchID = sq.BranchID,
                             BaseonProjCostANID = sq.ID,
                             ChangeLog = sq.ChangeLog,
                             CompanyID = sq.CompanyID,
                             CusID = sq.CusID,
                             DeliveryDate = sq.ValidUntilDate,
                             DisRate = (decimal)sq.DisRate,
                             DisValue = (decimal)sq.DisValue,
                             IvoiceDisvalue = sq.DisValue.ToString(),
                             DocTypeID = sq.DocTypeID,
                             DocumentDate = DateTime.Now,//sq.DocumentDate,
                             ExchangeRate = Convert.ToDecimal(sq.ExchangeRate),
                             ExchangeRate2 = sq.ExchangeRate.ToString(),
                             FreightAmount = Convert.ToDecimal(sq.FreightAmount),
                             FreightAmountSys = Convert.ToDecimal(sq.FreightAmountSys),
                             FreightAmountSys2 = sq.FreightAmountSys.ToString(),
                             FreightSalesView = new FreightSaleView
                             {
                                 AmountReven = fs.AmountReven,
                                 SaleID = sq.ID,
                                 ID = 0,
                                 SaleType = fs.SaleType,
                                 TaxSumValue = fs.TaxSumValue,
                                 FreightSaleDetailViewModels = (from fsd in _context.FreightProjCostDetails.Where(i => i.FreightProjectCostID == fs.ID)
                                                                select new FreightSaleDetailViewModel
                                                                {
                                                                    ID = 0,
                                                                    FreightSaleID = fsd.FreightProjectCostID,
                                                                    Amount = fsd.Amount,
                                                                    AmountWithTax = fsd.AmountWithTax,
                                                                    FreightID = fsd.FreightID,
                                                                    Name = fsd.Name,
                                                                    TaxGroup = fsd.TaxGroup,
                                                                    TaxGroupID = fsd.TaxGroupID,
                                                                    TaxGroups = GetTaxGroups(),
                                                                    TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                    {
                                                                        Value = i.ID.ToString(),
                                                                        Selected = fsd.TaxGroupID == i.ID,
                                                                        Text = $"{i.Code}-{i.Name}"
                                                                    }).ToList(),
                                                                    TaxRate = fsd.TaxRate,
                                                                    TotalTaxAmount = fsd.TotalTaxAmount
                                                                }).ToList(),
                             },
                             IncludeVat = sq.IncludeVat,
                             InvoiceNo = $"{docType.Code}-{sq.InvoiceNumber}",
                             //InvoiceNumber = sq.InvoiceNumber,
                             LocalCurID = sq.LocalCurID,
                             LocalSetRate = (decimal)sq.LocalSetRate,
                             PostingDate = DateTime.Now,//sq.PostingDate,
                             PriceListID = sq.PriceListID,
                             RefNo = sq.RefNo,
                             Remarks = sq.Remarks,
                             SaleCurrencyID = sq.SaleCurrencyID,
                             //SeriesDID = sq.SeriesDID,
                             //SeriesID = sq.SeriesID,
                             SaleEmID = sq.SaleEMID,
                             SaleEmName = saleem.Name,
                             SQID = sq.ID,
                             Status = "open",//sq.Status.ToString(),
                             SubTotal = (decimal)sq.SubTotal,
                             SubTotalAfterDis = (decimal)sq.SubTotalAfterDis,
                             SubTotalAfterDisSys = (decimal)sq.SubTotalAfterDisSys,
                             SubTotalAfterDisSys2 = sq.SubTotalAfterDisSys.ToString(),
                             SubTotalBefDis = (decimal)sq.SubTotalBefDis,

                             SubTotalBefDisSys = (decimal)sq.SubTotalBefDisSys,
                             SubTotalBefDisSys2 = sq.SubTotalBefDisSys.ToString(),
                             SubTotalSys = (decimal)sq.SubTotalSys,
                             SubTotalSys2 = sq.SubTotalSys.ToString(),
                             TotalAmount = (decimal)sq.TotalAmount,
                             TotalAmountSys = (decimal)sq.TotalAmountSys,
                             TotalAmountSys2 = sq.TotalAmountSys.ToString(),
                             TypeDis = sq.TypeDis,
                             UserID = sq.UserID,
                             ValidUntilDate = DateTime.Now, //sq.ValidUntilDate,
                             VatRate = (decimal)sq.VatRate,
                             VatValue = (decimal)sq.VatValue,
                             WarehouseID = sq.WarehouseID
                         }).ToList();
            var doctype = new DocumentType();
            Currency _cur = new();
            if (saleQ.Count > 0)
            {
                _cur = _context.Currency.Find(saleQ.FirstOrDefault().SaleCurrencyID) ?? new Currency();
            }
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            var _sqd = (from sq in saleQ
                        join sqd in _context.ProjCostAnalysisDetails on sq.SQID equals sqd.ProjectCostAnalysisID
                        join item in _context.ItemMasterDatas on sqd.ItemID equals item.ID
                        join cur in _context.Currency on sq.SaleCurrencyID equals cur.ID
                        select new SaleQuoteDetailViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString(),
                            ItemCode = sqd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sqd.TotalSys,//sqd.UnitPrice * sq.ExchangeRate,
                            TotalSy2 = sqd.TotalSys.ToString(),
                            SQDID = 0,//sqd.ID,
                            SQID = 0,//sq.SQID,
                            Cost = (decimal)sqd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sqd.DisRate,
                            DisValue = (decimal)sqd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sqd.Qty,
                            OpenQty = (decimal)sqd.OpenQty,
                            TypeDis = sqd.TypeDis,
                            UnitPrice = (decimal)sqd.UnitPrice,
                            UomName = sqd.UomName,
                            UomID = sqd.UomID,
                            TaxGroupID = sqd.TaxGroupID,
                            TaxRate = sqd.TaxRate,
                            Remarks = sqd.Remarks,
                            TaxDownPaymentValue = 0M,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sqd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sqd.TotalWTax,
                            TotalWTaxSys = sqd.TotalWTaxSys,
                            TaxValue = sqd.TaxValue,
                            Total = (decimal)sqd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sqd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sq.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }).ToList(),
                            FinDisRate = sqd.FinDisRate,
                            FinDisValue = sqd.FinDisValue,
                            FinTotalValue = sqd.FinTotalValue,
                            TaxOfFinDisValue = sqd.TaxOfFinDisValue,
                        }).ToList();
            var data = new SaleQuoteUpdateViewModel
            {
                SaleQuote = saleQ.FirstOrDefault(),
                SaleQuoteDetails = _sqd,
                Currency = _cur
            };
            return data;
        }

        public List<AttchmentFile> CreateDefaultRowAttachmet(int num, int number = 0)
        {
            List<AttchmentFile> lstatm = new();
            for (var i = 0; i < num - number; i++)
            {
                string lineId = DateTime.Now.Ticks.ToString();
                AttchmentFile objatm = new()
                {
                    LineID = lineId,
                    TargetPath = "",
                    FileName = "",
                    AttachmentDate = "",

                };
                lstatm.Add(objatm);
            }
            return lstatm;
        }

        public List<AttachmentFileOfContractTemplate> CreateDefaultRowAttachmetDetailOfContractTemplate(int num, int number = 0)
        {
            List<AttachmentFileOfContractTemplate> lstatm = new();
            for (var i = 0; i < num - number; i++)
            {
                string lineId = DateTime.Now.Ticks.ToString();
                AttachmentFileOfContractTemplate objatm = new()
                {
                    LineID = lineId,
                    TargetPath = "",
                    FileName = "",
                    AttachmentDate = "",

                };
                lstatm.Add(objatm);
            }
            return lstatm;
        }
        public IEnumerable<dynamic> GetARReserveInvoiceCopy(int cusId)
        {
            var data = (from SO in _context.ARReserveInvoices.Where(i => i.Status == "open" && i.CusID == cusId)
                        join docType in _context.DocumentTypes on SO.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => SO.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let SOD = _context.ARReserveInvoiceDetails.Where(i => i.ARReserveInvoiceID == SO.ID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == SO.SaleCurrencyID)
                        select new
                        {
                            SO.ID,
                            SO.CusID,
                            SO.BranchID,
                            SO.WarehouseID,
                            SO.UserID,
                            SO.SaleCurrencyID,
                            SO.CompanyID,
                            SO.DocTypeID,
                            SO.SeriesID,
                            SO.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{SO.InvoiceNumber}",
                            SO.RefNo,
                            InvoiceNo = SO.InvoiceNumber,
                            SO.ExchangeRate,
                            SO.PostingDate,
                            SO.DeliveryDate,
                            SO.DocumentDate,
                            SO.IncludeVat,
                            SO.Status,
                            Currency = cur.Description,
                            SO.SubTotal,
                            SO.TotalAmount,
                            SO.SubTotalSys,
                            SO.DisRate,
                            SO.DisValue,
                            SO.TypeDis,
                            SO.Remarks,
                            SO.VatRate,
                            SO.VatValue,
                            SO.FeeNote,
                            SO.FeeAmount,
                            SO.TotalAmountSys,
                            SO.CopyType,
                            SO.CopyKey,
                            SO.BasedCopyKeys,
                            SO.ChangeLog,
                            SO.PriceListID,
                            SO.LocalCurID,
                            SO.LocalSetRate,
                            SOD,
                            SO.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public ARReserveInvoiceUpdateViewModel FindARReserveInvoice(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var saleAR = (from ar in _context.ARReserveInvoices.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                          let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                          let fs = _context.FreightSales.Where(i => i.SaleID == ar.ID && i.SaleType == SaleCopyType.AR).FirstOrDefault() ?? new FreightSale()
                          let empreq = _context.Employees.FirstOrDefault(x => x.ID == ar.RequestedBy) ?? new HumanResourcesEmployee()
                          let emprec = _context.Employees.FirstOrDefault(x => x.ID == ar.ReceivedBy) ?? new HumanResourcesEmployee()
                          let empshi = _context.Employees.FirstOrDefault(x => x.ID == ar.ShippedBy) ?? new HumanResourcesEmployee()
                          select new ARReserveInvoiceViewModel
                          {
                              BasedCopyKeys = ar.BasedCopyKeys,

                              ReceivedByID = emprec.ID,
                              RequestedByID = empreq.ID,
                              ShippedByID = emprec.ID,
                              BaseOnID = ar.BaseOnID,
                              ReceivedByName = emprec.Name,
                              RequestedByName = empreq.Name,
                              ShippedByName = empshi.Name,
                              BasedOn = ar.ID,
                              CopyKey = ar.CopyKey,
                              CopyType = ar.CopyType,
                              BranchID = ar.BranchID,
                              ChangeLog = ar.ChangeLog,
                              CompanyID = ar.CompanyID,
                              CusID = ar.CusID,
                              DeliveryDate = ar.DueDate,
                              DueDate = ar.DueDate,
                              DisRate = (decimal)ar.DisRate,
                              DisValue = (decimal)ar.DisValue,
                              DocTypeID = ar.DocTypeID,
                              DocumentDate = ar.DocumentDate,
                              ExchangeRate = (decimal)ar.ExchangeRate,
                              FreightAmount = ar.FreightAmount,
                              FreightAmountSys = ar.FreightAmountSys,
                              DownPayment = ar.DownPayment,
                              DownPaymentSys = ar.DownPaymentSys,
                              SaleEmID = ar.SaleEmID,
                              SaleEmName = sem.Name ?? "",
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                  SaleID = ar.ID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = ar.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                              InvoiceNumber = ar.InvoiceNumber,
                              LocalCurID = ar.LocalCurID,
                              LocalSetRate = (decimal)ar.LocalSetRate,
                              PostingDate = ar.PostingDate,
                              PriceListID = ar.PriceListID,
                              RefNo = ar.RefNo,
                              Remarks = ar.Remarks,
                              SaleCurrencyID = ar.SaleCurrencyID,
                              SeriesDID = ar.SeriesDID,
                              SeriesID = ar.SeriesID,
                              ID = ar.ID,
                              Status = ar.Status,
                              SubTotal = (decimal)ar.SubTotal,
                              SubTotalAfterDis = ar.SubTotalAfterDis,
                              SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                              SubTotalBefDis = ar.SubTotalBefDis,
                              SubTotalBefDisSys = ar.SubTotalBefDisSys,
                              SubTotalSys = (decimal)ar.SubTotalSys,
                              TotalAmount = (decimal)ar.TotalAmount,
                              TotalAmountSys = (decimal)ar.TotalAmountSys,
                              TypeDis = ar.TypeDis,
                              UserID = ar.UserID,
                              VatRate = (decimal)ar.VatRate,
                              VatValue = (decimal)ar.VatValue,
                              WarehouseID = ar.WarehouseID,
                              AppliedAmount = (decimal)ar.AppliedAmount,
                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sAr in saleAR
                        join sArd in _context.ARReserveInvoiceDetails on sAr.ID equals sArd.ARReserveInvoiceID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        select new ARReserveInvoiceDetialViewModel
                        {
                            LineID = string.IsNullOrWhiteSpace(sArd.LineID) ? DateTime.Now.Ticks.ToString() : sArd.LineID,
                            SaleCopyType = sArd.SaleCopyType,
                            FinDisRate = sArd.FinDisRate,
                            FinDisValue = sArd.FinDisValue,
                            FinTotalValue = sArd.FinTotalValue,
                            TaxOfFinDisValue = sArd.TaxOfFinDisValue,
                            ItemCode = sArd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sArd.TotalSys,
                            ARReserveDID = sArd.ID,
                            SQDID = sArd.SQDID,
                            SODID = sArd.SODID,
                            SDDID = sArd.SDDID,
                            ID = sArd.ID,
                            ARReserveInvoiceID = sAr.ID,
                            Cost = (decimal)sArd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sArd.DisRate,
                            DisValue = (decimal)sArd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sArd.Qty,
                            Factor = (decimal)sArd.Factor,
                            OpenQty = (decimal)sArd.OpenQty,
                            UnitPrice = (decimal)sArd.UnitPrice,
                            UomName = sArd.UomName,
                            UomID = sArd.UomID,
                            TaxGroupID = sArd.TaxGroupID,
                            TaxRate = sArd.TaxRate,
                            Remarks = sArd.Remarks,
                            TotalWTaxSys = (decimal)sArd.TotalWTaxSys,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sArd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sArd.TotalWTax,
                            TaxValue = sArd.TaxValue,
                            Total = (decimal)sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new ARReserveInvoiceUpdateViewModel
            {
                ARReserveInvoice = saleAR.FirstOrDefault(),
                ARReserveInvoiceDetails = _sqd,
            };
            return data;
        }
        private void InsertFinancialServiceContractAR(
         int inventoryAccID,
         int COGSAccID,
         List<JournalEntryDetail> journalEntryDetail,
         List<AccountBalance> accountBalance,
         decimal inventoryAccAmount,
         decimal COGSAccAmount,
         JournalEntry journalEntry,
         ServiceContract Order,
         DocumentType docType,
         DocumentType douTypeID,
         GLAccount glAcc,
         string type)
        {
            if (type != "Delivery")
            {
                //inventoryAccID
                var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccID) ?? new GLAccount();
                if (glAccInvenfifo.ID > 0)
                {
                    var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                    if (listInvenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccID);
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        //journalEntryDetail
                        listInvenfifo.Credit += inventoryAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                        accBalance.Credit += inventoryAccAmount;
                    }
                    else
                    {
                        glAccInvenfifo.Balance -= inventoryAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = inventoryAccID,
                            Credit = inventoryAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                            CumulativeBalance = glAccInvenfifo.Balance,
                            Credit = inventoryAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = inventoryAccID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(glAccInvenfifo);
                }
                // COGS
                var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccID) ?? new GLAccount();
                if (glAccCOGSfifo.ID > 0)
                {
                    var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                    if (listCOGSfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccID);
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        //journalEntryDetail
                        listCOGSfifo.Debit += COGSAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                        accBalance.Debit += COGSAccAmount;
                    }
                    else
                    {
                        glAccCOGSfifo.Balance += COGSAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = COGSAccID,
                            Debit = COGSAccAmount,
                            BPAcctID = Order.CusID
                        });
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                            CumulativeBalance = glAccCOGSfifo.Balance,
                            Debit = COGSAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = COGSAccID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(glAccCOGSfifo);
                }
                _context.SaveChanges();
            }
        }

        // find draft FinddraftServiceContract

        public async Task<ServiceContractUpdateViewModel> FinddraftServiceContract(int draftid, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var serviceContract = (from ar in _context.DraftServiceContracts.Where(x => x.ID == draftid)
                                   join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                                   let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                                   let fs = _context.FreightSales.Where(i => i.SaleID == ar.ID && i.SaleType == SaleCopyType.DraftServiceContract).FirstOrDefault() ?? new FreightSale()
                                   let con = _context.Contracts.FirstOrDefault(x => x.ID == ar.ContractTemplateID) ?? new ContractTemplate()
                                   select new ServiceContractViewModel
                                   {
                                       Name = ar.Name,
                                       BasedCopyKeys = ar.BasedCopyKeys,
                                       BasedOn = ar.BaseOnID,
                                       ContractName = con.Name,
                                       ContractStartDate = ar.ContractStartDate,
                                       ContractRenewalDate = ar.ContractRenewalDate,
                                       ContractENDate = ar.ContractENDate,
                                       ContractType = ar.ContractType,
                                       CopyKey = ar.CopyKey,
                                       CopyType = ar.CopyType,
                                       BranchID = ar.BranchID,
                                       ChangeLog = ar.ChangeLog,
                                       CompanyID = ar.CompanyID,
                                       CusID = ar.CusID,
                                       Remark = ar.Remark,
                                       ContractTemplateID = ar.ContractTemplateID,
                                       AdditionalContractNo = ar.AdditionalContractNo,
                                       AttchmentFiles = (from at in _context.DraftAttchmentFiles.Where(x => x.DraftServiceContractID == ar.ID)
                                                         select new AttchmentFile
                                                         {

                                                             LineID = DateTime.Now.Ticks.ToString() + at.ID,
                                                             ID = at.ID,
                                                             TargetPath = at.TargetPath,
                                                             FileName = at.FileName,
                                                             AttachmentDate = at.AttachmentDate
                                                         }
                                                       ).ToList() ?? new List<AttchmentFile>(),
                                       DeliveryDate = ar.DueDate,
                                       DueDate = ar.DueDate,
                                       DisRate = (decimal)ar.DisRate,
                                       DisValue = (decimal)ar.DisValue,
                                       DocTypeID = ar.DocTypeID,
                                       DocumentDate = ar.DocumentDate,
                                       ExchangeRate = (decimal)ar.ExchangeRate,
                                       FreightAmount = ar.FreightAmount,
                                       FreightAmountSys = ar.FreightAmountSys,
                                       DownPayment = ar.DownPayment,
                                       DownPaymentSys = ar.DownPaymentSys,
                                       SaleEmID = ar.SaleEmID,
                                       SaleEmName = sem.Name ?? "",
                                       FreightSalesView = new FreightSaleView
                                       {
                                           StorID = fs.ID,
                                           ID = fs.ID,
                                           OpenAmountReven = fs.OpenAmountReven,
                                           AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                           SaleID = ar.ID,

                                           SaleType = fs.SaleType,
                                           TaxSumValue = fs.TaxSumValue,
                                           FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                          select new FreightSaleDetailViewModel
                                                                          {
                                                                              StorDID = fsd.ID,
                                                                              ID = fsd.ID,
                                                                              LineID = DateTime.Now.Ticks.ToString() + fsd.ID,

                                                                              FreightSaleID = fsd.FreightSaleID,
                                                                              Amount = fsd.Amount,
                                                                              AmountWithTax = fsd.AmountWithTax,
                                                                              FreightID = fsd.FreightID,
                                                                              Name = fsd.Name,
                                                                              TaxGroup = fsd.TaxGroup,
                                                                              TaxGroupID = fsd.TaxGroupID,
                                                                              TaxGroups = GetTaxGroups(),
                                                                              TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                              {
                                                                                  Value = i.ID.ToString(),
                                                                                  Selected = fsd.TaxGroupID == i.ID,
                                                                                  Text = $"{i.Code}-{i.Name}"
                                                                              }).ToList(),
                                                                              TaxRate = fsd.TaxRate,
                                                                              TotalTaxAmount = fsd.TotalTaxAmount
                                                                          }).ToList(),
                                       },
                                       IncludeVat = ar.IncludeVat,
                                       InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                                       InvoiceNumber = ar.InvoiceNumber,
                                       LocalCurID = ar.LocalCurID,
                                       LocalSetRate = (decimal)ar.LocalSetRate,
                                       PostingDate = ar.PostingDate,
                                       PriceListID = ar.PriceListID,
                                       RefNo = ar.RefNo,
                                       Remarks = ar.Remarks,
                                       SaleCurrencyID = ar.SaleCurrencyID,
                                       SeriesDID = ar.SeriesDID,
                                       SeriesID = ar.SeriesID,
                                       ID = ar.ID,
                                       Status = ar.Status,
                                       SubTotal = (decimal)ar.SubTotal,
                                       SubTotalAfterDis = ar.SubTotalAfterDis,
                                       SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                                       SubTotalBefDis = ar.SubTotalBefDis,
                                       SubTotalBefDisSys = ar.SubTotalBefDisSys,
                                       SubTotalSys = (decimal)ar.SubTotalSys,
                                       TotalAmount = (decimal)ar.TotalAmount,
                                       TotalAmountSys = (decimal)ar.TotalAmountSys,
                                       TypeDis = ar.TypeDis,
                                       UserID = ar.UserID,
                                       VatRate = (decimal)ar.VatRate,
                                       VatValue = (decimal)ar.VatValue,
                                       WarehouseID = ar.WarehouseID,
                                       AppliedAmount = (decimal)ar.AppliedAmount,
                                   }).ToList();
            CreateDefaultRowAttachmet(5).ForEach(i =>
            {
                serviceContract[0].AttchmentFiles.Add(i);
            });
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sAr in serviceContract
                        join sArd in _context.DraftServiceContractDetails on sAr.ID equals sArd.DraftServiceContractID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        select new ServiceContractDetialViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString(),
                            FinDisRate = sArd.FinDisRate,
                            FinDisValue = sArd.FinDisValue,
                            FinTotalValue = sArd.FinTotalValue,
                            TaxOfFinDisValue = sArd.TaxOfFinDisValue,
                            ItemCode = sArd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sArd.TotalSys,
                            SQDID = sArd.SQDID,
                            SODID = sArd.SODID,
                            SDDID = sArd.SDDID,
                            ServiceContractIDD = sArd.ID,
                            ID = sArd.ID,
                            Cost = (decimal)sArd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sArd.DisRate,
                            DisValue = (decimal)sArd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sArd.Qty,
                            Factor = (decimal)sArd.Factor,
                            OpenQty = (decimal)sArd.OpenQty,
                            UnitPrice = (decimal)sArd.UnitPrice,
                            UomName = sArd.UomName,
                            UomID = sArd.UomID,
                            TaxGroupID = sArd.TaxGroupID,
                            TaxRate = sArd.TaxRate,
                            Remarks = sArd.Remarks,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sArd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sArd.TotalWTax,
                            TaxValue = sArd.TaxValue,
                            Total = (decimal)sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new ServiceContractUpdateViewModel
            {
                ServiceContract = serviceContract.FirstOrDefault(),
                //AttchmentFileDetail = _att,
                ServiceContractDetail = _sqd,
            };
            return await Task.FromResult(data);
        }


        public ServiceContractUpdateViewModel FindServiceContract(DateTime contract_edate, DateTime contract_sdate, int cus_id, string contract_no, DateTime renewal_date, DateTime post_date, string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });
            var serviceContract = (from ar in _context.ServiceContracts.Where(x => x.InvoiceNumber == number || x.PostingDate == post_date || x.ContractRenewalDate == renewal_date || x.AdditionalContractNo == contract_no || x.CusID == cus_id || x.ContractStartDate == contract_sdate || x.ContractENDate == contract_edate && x.SeriesID == seriesId && x.CompanyID == comId)
                                   join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                                   let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                                   let fs = _context.FreightSales.Where(i => i.SaleID == ar.ID && i.SaleType == SaleCopyType.AR).FirstOrDefault() ?? new FreightSale()
                                   let con = _context.Contracts.FirstOrDefault(x => x.ID == ar.ContractTemplateID) ?? new ContractTemplate()
                                   select new ServiceContractViewModel
                                   {
                                       BasedCopyKeys = ar.BasedCopyKeys,
                                       BasedOn = ar.ID,
                                       ContractName = con.Name,
                                       ContractStartDate = ar.ContractStartDate,
                                       ContractRenewalDate = ar.ContractRenewalDate,
                                       ContractENDate = ar.ContractENDate,
                                       ContractType = ar.ContractType,
                                       CopyKey = ar.CopyKey,
                                       CopyType = ar.CopyType,
                                       BranchID = ar.BranchID,
                                       ChangeLog = ar.ChangeLog,
                                       CompanyID = ar.CompanyID,
                                       CusID = ar.CusID,
                                       Remark = ar.Remark,
                                       ContractTemplateID = ar.ContractTemplateID,
                                       AdditionalContractNo = ar.AdditionalContractNo,
                                       AttchmentFiles = (from at in _context.AttchmentFiles.Where(x => x.ServiceContractID == ar.ID)
                                                         select new AttchmentFile
                                                         {

                                                             LineID = DateTime.Now.Ticks.ToString() + at.ID,
                                                             ID = at.ID,
                                                             TargetPath = at.TargetPath,
                                                             FileName = at.FileName,
                                                             AttachmentDate = at.AttachmentDate
                                                         }
                                                       ).ToList() ?? new List<AttchmentFile>(),
                                       DeliveryDate = ar.DueDate,
                                       DueDate = ar.DueDate,
                                       DisRate = (decimal)ar.DisRate,
                                       DisValue = (decimal)ar.DisValue,
                                       DocTypeID = ar.DocTypeID,
                                       DocumentDate = ar.DocumentDate,
                                       ExchangeRate = (decimal)ar.ExchangeRate,
                                       FreightAmount = ar.FreightAmount,
                                       FreightAmountSys = ar.FreightAmountSys,
                                       DownPayment = ar.DownPayment,
                                       DownPaymentSys = ar.DownPaymentSys,
                                       SaleEmID = ar.SaleEmID,
                                       SaleEmName = sem.Name ?? "",
                                       FreightSalesView = new FreightSaleView
                                       {
                                           AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                           SaleID = ar.ID,
                                           ID = fs.ID,
                                           SaleType = fs.SaleType,
                                           TaxSumValue = fs.TaxSumValue,
                                           FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                          select new FreightSaleDetailViewModel
                                                                          {
                                                                              ID = fsd.ID,
                                                                              FreightSaleID = fsd.FreightSaleID,
                                                                              Amount = fsd.Amount,
                                                                              AmountWithTax = fsd.AmountWithTax,
                                                                              FreightID = fsd.FreightID,
                                                                              Name = fsd.Name,
                                                                              TaxGroup = fsd.TaxGroup,
                                                                              TaxGroupID = fsd.TaxGroupID,
                                                                              TaxGroups = GetTaxGroups(),
                                                                              TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                              {
                                                                                  Value = i.ID.ToString(),
                                                                                  Selected = fsd.TaxGroupID == i.ID,
                                                                                  Text = $"{i.Code}-{i.Name}"
                                                                              }).ToList(),
                                                                              TaxRate = fsd.TaxRate,
                                                                              TotalTaxAmount = fsd.TotalTaxAmount
                                                                          }).ToList(),
                                       },
                                       IncludeVat = ar.IncludeVat,
                                       InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                                       InvoiceNumber = ar.InvoiceNumber,
                                       LocalCurID = ar.LocalCurID,
                                       LocalSetRate = (decimal)ar.LocalSetRate,
                                       PostingDate = ar.PostingDate,
                                       PriceListID = ar.PriceListID,
                                       RefNo = ar.RefNo,
                                       Remarks = ar.Remarks,
                                       SaleCurrencyID = ar.SaleCurrencyID,
                                       SeriesDID = ar.SeriesDID,
                                       SeriesID = ar.SeriesID,
                                       ID = ar.ID,
                                       Status = ar.Status,
                                       SubTotal = (decimal)ar.SubTotal,
                                       SubTotalAfterDis = ar.SubTotalAfterDis,
                                       SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                                       SubTotalBefDis = ar.SubTotalBefDis,
                                       SubTotalBefDisSys = ar.SubTotalBefDisSys,
                                       SubTotalSys = (decimal)ar.SubTotalSys,
                                       TotalAmount = (decimal)ar.TotalAmount,
                                       TotalAmountSys = (decimal)ar.TotalAmountSys,
                                       TypeDis = ar.TypeDis,
                                       UserID = ar.UserID,
                                       VatRate = (decimal)ar.VatRate,
                                       VatValue = (decimal)ar.VatValue,
                                       WarehouseID = ar.WarehouseID,
                                       AppliedAmount = (decimal)ar.AppliedAmount,
                                   }).ToList();

            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            CreateDefaultRowAttachmet(5).ForEach(i =>
            {
                serviceContract[0].AttchmentFiles.Add(i);
            });
            var _sqd = (from sAr in serviceContract
                        join sArd in _context.ServiceContractDetails on sAr.ID equals sArd.ServiceContractID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        select new ServiceContractDetialViewModel
                        {
                            LineID = DateTime.Now.Ticks.ToString(),
                            FinDisRate = sArd.FinDisRate,
                            FinDisValue = sArd.FinDisValue,
                            FinTotalValue = sArd.FinTotalValue,
                            TaxOfFinDisValue = sArd.TaxOfFinDisValue,
                            ItemCode = sArd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sArd.TotalSys,
                            SQDID = sArd.SQDID,
                            SODID = sArd.SODID,
                            SDDID = sArd.SDDID,
                            ServiceContractIDD = sArd.ID,
                            ID = sAr.ID,
                            Cost = (decimal)sArd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sArd.DisRate,
                            DisValue = (decimal)sArd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sArd.Qty,
                            Factor = (decimal)sArd.Factor,
                            OpenQty = (decimal)sArd.OpenQty,
                            UnitPrice = (decimal)sArd.UnitPrice,
                            UomName = sArd.UomName,
                            UomID = sArd.UomID,
                            TaxGroupID = sArd.TaxGroupID,
                            TaxRate = sArd.TaxRate,
                            Remarks = sArd.Remarks,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sArd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sArd.TotalWTax,
                            TaxValue = sArd.TaxValue,
                            Total = (decimal)sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new ServiceContractUpdateViewModel
            {
                ServiceContract = serviceContract.FirstOrDefault(),
                //AttchmentFileDetail = _att,
                ServiceContractDetail = _sqd,
            };
            return data;
        }

        public void IssuseInStockARReserveInvocklDelivery(int orderid, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var saledeli = _context.SaleDeliveries.First(w => w.SDID == orderid);
            var saleDD = _context.SaleDeliveryDetails.Where(w => w.SDID == orderid);
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == saledeli.CompanyID);
            var docType = _context.DocumentTypes.Find(saledeli.DocTypeID);
            var series = _context.SeriesDetails.Find(saledeli.SeriesDID);
            var glAccs = _context.GLAccounts.Where(i => i.IsActive).ToList();
            var warehouse = _context.Warehouses.Find(saledeli.WarehouseID) ?? new Warehouse();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.BranchID= saledeli.BranchID;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = saledeli.UserID;
                journalEntry.TransNo = Sno;
                journalEntry.PostingDate = saledeli.PostingDate;
                journalEntry.DocumentDate = saledeli.DocumentDate;
                journalEntry.DueDate = saledeli.DueDate;
                journalEntry.SSCID = saledeli.SaleCurrencyID;
                journalEntry.LLCID = saledeli.LocalCurID;
                journalEntry.CompanyID = saledeli.CompanyID;
                journalEntry.LocalSetRate = (decimal)saledeli.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = defaultJE.Name + " " + Sno;
                _context.Update(journalEntry);
                _context.SaveChanges();
            }
            //IssuseInstock Deliverry
            foreach (var deli in saleDD)
            {
                int inventoryAccID = 0, COGSAccID = 0;
                decimal inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == deli.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == deli.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var itemAccs = _context.ItemAccountings.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in glAccs on ia.InventoryAccount equals gl.Code
                                        select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in glAccs on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID);
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in glAccs on ia.InventoryAccount equals gl.Code
                                        select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in glAccs on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                }
                if (itemMaster.Process != "Standard")
                {
                    var warehouseSummary = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == deli.ItemID);
                    var waredetials = _context.WarehouseDetails.Where(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == deli.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == saledeli.WarehouseID && i.ItemID == deli.ItemID);
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = deli.Qty * deli.Factor;
                    double Cost = 0;
                    //WerehouseSummary
                    //item_warehouse_material.Committed -= (double)deli.Qty;
                    warehouseSummary.InStock -= @Qty;
                    //Itemmasterdata
                    itemMaster.StockIn -= (double)deli.Qty;
                    _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                    if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                    {
                        if (serials.Count > 0)
                        {
                            List<WareForAudiView> wareForAudis = new();
                            foreach (var s in serials)
                            {
                                if (s.SerialNumberSelected != null)
                                {
                                    foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                    {
                                        var waredetial = waredetials.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            wareForAudis.Add(new WareForAudiView
                                            {
                                                Cost = waredetial.Cost,
                                                Qty = waredetial.InStock,
                                                ExpireDate = waredetial.ExpireDate,
                                            });
                                            Cost = waredetial.Cost;
                                            waredetial.InStock -= 1;
                                            // insert to warehouse detail
                                            _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                            var stockout = new StockOut
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (decimal)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = 1,
                                                ItemID = waredetial.ItemID,
                                                Location = waredetial.Location,
                                                LotNumber = waredetial.LotNumber,
                                                MfrDate = waredetial.MfrDate,
                                                MfrSerialNumber = waredetial.MfrSerialNumber,
                                                MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                MfrWarDateStart = waredetial.MfrWarDateStart,
                                                ProcessItem = ProcessItem.SEBA,
                                                SerialNumber = waredetial.SerialNumber,
                                                PlateNumber = waredetial.PlateNumber,
                                                Color = waredetial.Color,
                                                Brand = waredetial.Brand,
                                                Condition = waredetial.Condition,
                                                Type = waredetial.Type,
                                                Power = waredetial.Power,
                                                Year = waredetial.Year,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = deli.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = _expdate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = waredetial.ID,
                                                TransID = saledeli.SDID,
                                                Contract = itemMaster.ContractID
                                            };
                                            _inventoryAccAmount = (decimal)waredetial.Cost;
                                            _COGSAccAmount = (decimal)waredetial.Cost;
                                            _context.StockOuts.Add(stockout);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialDelivery(
                                            inventoryAccID,
                                            COGSAccID,
                                            journalEntryDetail,
                                            accountBalance,
                                            _inventoryAccAmount,
                                            _COGSAccAmount,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                                    }
                                }
                            }

                            wareForAudis = (from wa in wareForAudis
                                            group wa by wa.Cost into g
                                            let wha = g.FirstOrDefault()
                                            select new WareForAudiView
                                            {
                                                Qty = g.Sum(i => i.Qty),
                                                Cost = wha.Cost,
                                                ExpireDate = wha.ExpireDate,
                                            }).ToList();
                            if (wareForAudis.Any())
                            {
                                foreach (var i in wareForAudis)
                                {
                                    // Insert to Inventory Audit
                                    var inventory_audit = _context.InventoryAudits
                                            .Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    var inventory = new InventoryAudit
                                    {
                                        ID = 0,
                                        LineID = deli.LineID,
                                        TypeItem = SaleCopyType.Delivery.ToString(),
                                        WarehouseID = saledeli.WarehouseID,
                                        BranchID = saledeli.BranchID,
                                        UserID = saledeli.UserID,
                                        ItemID = deli.ItemID,
                                        CurrencyID = saledeli.SaleCurrencyID,
                                        UomID = baseUOM.BaseUOM,
                                        InvoiceNo = saledeli.InvoiceNo,
                                        Trans_Type = docType.Code,
                                        Process = itemMaster.Process,
                                        SystemDate = DateTime.Now,
                                        PostingDate = saledeli.PostingDate,
                                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                        Qty = i.Qty * -1,
                                        Cost = i.Cost,
                                        Price = 0,
                                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                        Trans_Valuse = i.Qty * i.Cost * -1,
                                        ExpireDate = i.ExpireDate,
                                        LocalCurID = saledeli.LocalCurID,
                                        LocalSetRate = saledeli.LocalSetRate,
                                        CompanyID = saledeli.CompanyID,
                                        DocumentTypeID = docType.ID,
                                        SeriesID = saledeli.SeriesID,
                                        SeriesDetailID = saledeli.SeriesDID,
                                    };
                                    _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                    _context.InventoryAudits.Add(inventory);
                                    _context.SaveChanges();
                                }
                            }
                        }
                    }
                    else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                    {
                        if (batches.Count > 0)
                        {
                            List<WareForAudiView> wareForAudis = new();
                            foreach (var b in batches)
                            {
                                if (b.BatchNoSelected != null)
                                {
                                    foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                    {
                                        decimal selectedQty = sb.SelectedQty * (decimal)deli.Factor;
                                        var waredetial = waredetials.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            Cost = waredetial.Cost;
                                            wareForAudis.Add(new WareForAudiView
                                            {
                                                Cost = waredetial.Cost,
                                                Qty = (double)selectedQty,
                                                ExpireDate = waredetial.ExpireDate,
                                            });
                                            waredetial.InStock -= (double)selectedQty;

                                            // insert to waredetial
                                            var stockOut = new StockOut
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (decimal)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = selectedQty,
                                                ItemID = deli.ItemID,
                                                Location = waredetial.Location,
                                                MfrDate = waredetial.MfrDate,
                                                ProcessItem = ProcessItem.SEBA,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = deli.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = sb.ExpireDate,
                                                BatchAttr1 = waredetial.BatchAttr1,
                                                BatchAttr2 = waredetial.BatchAttr2,
                                                BatchNo = waredetial.BatchNo,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = waredetial.ID,
                                                TransID = saledeli.SDID,
                                            };
                                            _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                            _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                            _context.StockOuts.Add(stockOut);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialDelivery(
                                            inventoryAccID,
                                            COGSAccID,
                                            journalEntryDetail,
                                            accountBalance,
                                            _inventoryAccAmount,
                                            _COGSAccAmount,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                                    }
                                }
                            }

                            // insert to inventory audit
                            wareForAudis = (from wa in wareForAudis
                                            group wa by wa.Cost into g
                                            let wha = g.FirstOrDefault()
                                            select new WareForAudiView
                                            {
                                                Qty = g.Sum(i => i.Qty),
                                                Cost = wha.Cost,
                                                ExpireDate = wha.ExpireDate,
                                            }).ToList();
                            if (wareForAudis.Any())
                            {
                                foreach (var i in wareForAudis)
                                {
                                    var inventory_audit = _context.InventoryAudits
                                            .Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    var inventory = new InventoryAudit
                                    {
                                        ID = 0,
                                        LineID = deli.LineID,
                                        TypeItem = SaleCopyType.Delivery.ToString(),
                                        WarehouseID = saledeli.WarehouseID,
                                        BranchID = saledeli.BranchID,
                                        UserID = saledeli.UserID,
                                        ItemID = deli.ItemID,
                                        CurrencyID = saledeli.SaleCurrencyID,
                                        UomID = baseUOM.BaseUOM,
                                        InvoiceNo = saledeli.InvoiceNo,
                                        Trans_Type = docType.Code,
                                        Process = itemMaster.Process,
                                        SystemDate = DateTime.Now,
                                        PostingDate = saledeli.PostingDate,
                                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                        Qty = i.Qty * -1,
                                        Cost = i.Cost,
                                        Price = 0,
                                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                        Trans_Valuse = i.Qty * i.Cost * -1,
                                        ExpireDate = i.ExpireDate,
                                        LocalCurID = saledeli.LocalCurID,
                                        LocalSetRate = saledeli.LocalSetRate,
                                        CompanyID = saledeli.CompanyID,
                                        DocumentTypeID = docType.ID,
                                        SeriesID = saledeli.SeriesID,
                                        SeriesDetailID = saledeli.SeriesDID,
                                    };
                                    _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                    _context.InventoryAudits.Add(inventory);
                                    _context.SaveChanges();
                                }
                            }
                        }
                    }
                    else
                    {
                        List<WarehouseDetail> _whlists = waredetials.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                        if (warehouse.IsAllowNegativeStock && _whlists.Count == 0) _whlists = waredetials.ToList();
                        foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                        {
                            InventoryAudit item_inventory_audit = new();
                            WarehouseDetail item_IssusStock = item_warehouse;
                            @Check_Stock = item_warehouse.InStock - @Qty;
                            if (@Check_Stock < 0)
                            {
                                @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                @IssusQty = @Qty - @Remain;
                                if (@Remain <= 0)
                                {
                                    @Qty = 0;
                                }
                                else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                {
                                    @IssusQty = @Qty;
                                }
                                else
                                {
                                    @Qty = @Remain;
                                }
                                if (itemMaster.Process == "FIFO")
                                {
                                    double _cost = item_IssusStock.Cost;
                                    item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)item_warehouse.Cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.FIFO,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = item_IssusStock.Cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                        item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                        item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    inventoryAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    COGSAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                                else if (itemMaster.Process == "Average")
                                {
                                    item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {

                                        var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        double cost = warehouse_summary.Cost;
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.Average,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);

                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                        item_inventory_audit.Trans_Valuse = @IssusQty * cost * -1;
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    double @AvgCost = _utility.CalAVGCost(deli.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                    inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    _utility.UpdateAvgCost(item_warehouse.ItemID, saledeli.WarehouseID, deli.GUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.UpdateBomCost(item_warehouse.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                            }
                            else
                            {
                                if (itemMaster.Process == "FIFO")
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    item_IssusStock.InStock -= @IssusQty;
                                    if (@IssusQty > 0)
                                    {
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)item_warehouse.Cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.FIFO,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = item_IssusStock.Cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) - (@IssusQty * item_IssusStock.Cost);
                                        item_inventory_audit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    inventoryAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    COGSAccAmount += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                                else if (itemMaster.Process == "Average")
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    item_IssusStock.InStock = @FIFOQty;
                                    if (@IssusQty > 0)
                                    {
                                        var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        double cost = warehouse_summary.Cost;
                                        var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                        var stockOuts = new StockOut
                                        {
                                            Cost = (decimal)cost,
                                            CurrencyID = item_warehouse.CurrencyID,
                                            ID = 0,
                                            InStock = (decimal)@IssusQty,
                                            ItemID = deli.ItemID,
                                            ProcessItem = ProcessItem.Average,
                                            SyetemDate = DateTime.Now,
                                            TimeIn = DateTime.Now,
                                            WarehouseID = item_warehouse.WarehouseID,
                                            UomID = deli.UomID,
                                            UserID = saledeli.UserID,
                                            ExpireDate = deli.ExpireDate,
                                            TransType = TransTypeWD.Delivery,
                                            FromWareDetialID = item_IssusStock.ID,
                                            OutStockFrom = saledeli.SDID,
                                            BPID = saledeli.CusID,
                                            TransID = saledeli.SDID,
                                        };
                                        _context.StockOuts.Add(stockOuts);

                                        item_inventory_audit.ID = 0;
                                        item_inventory_audit.LineID = deli.LineID;
                                        item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                        item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                        item_inventory_audit.BranchID = saledeli.BranchID;
                                        item_inventory_audit.UserID = saledeli.UserID;
                                        item_inventory_audit.ItemID = deli.ItemID;
                                        item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                        item_inventory_audit.UomID = baseUOM.BaseUOM;
                                        item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                        item_inventory_audit.Trans_Type = docType.Code;
                                        item_inventory_audit.Process = itemMaster.Process;
                                        item_inventory_audit.SystemDate = DateTime.Now;
                                        item_inventory_audit.PostingDate = saledeli.PostingDate;
                                        item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                        item_inventory_audit.Qty = @IssusQty * -1;
                                        item_inventory_audit.Cost = cost;
                                        item_inventory_audit.Price = 0;
                                        item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                        item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                        item_inventory_audit.Trans_Valuse = @IssusQty * cost * -1;
                                        item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                        item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                        item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                        item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                        item_inventory_audit.SeriesID = saledeli.SeriesID;
                                        item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                        item_inventory_audit.CompanyID = saledeli.CompanyID;
                                    }
                                    double @AvgCost = _utility.CalAVGCost(deli.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                    inventoryAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                    _utility.UpdateAvgCost(deli.ItemID, saledeli.WarehouseID, deli.GUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.UpdateBomCost(deli.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                    _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                    _context.WarehouseDetails.Update(item_IssusStock);
                                    _context.InventoryAudits.Add(item_inventory_audit);
                                    _context.SaveChanges();
                                }
                                waredetials = new List<WarehouseDetail>();
                                break;
                            }
                        }
                    }
                    _context.WarehouseSummary.Update(warehouseSummary);
                    _context.ItemMasterDatas.Update(itemMaster);
                    _context.SaveChanges();
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == deli.ItemID && w.UomID == deli.UomID && w.PriceListID == saledeli.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * deli.Qty * saledeli.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * deli.Qty * saledeli.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == deli.ItemID && w.WarehouseID == saledeli.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = deli.LineID,
                        TypeItem = SaleCopyType.Delivery.ToString(),
                        WarehouseID = saledeli.WarehouseID,
                        BranchID = saledeli.BranchID,
                        UserID = saledeli.UserID,
                        ItemID = deli.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = saledeli.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = saledeli.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = deli.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - deli.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (deli.Qty * priceListDetail.Cost),
                        Trans_Valuse = deli.Qty * priceListDetail.Cost * -1,
                        LocalCurID = saledeli.LocalCurID,
                        LocalSetRate = saledeli.LocalSetRate,
                        SeriesDetailID = saledeli.SeriesDID,
                        SeriesID = saledeli.SeriesID,
                        DocumentTypeID = saledeli.DocTypeID,
                        CompanyID = saledeli.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }

                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialDelivery(
                                            inventoryAccID,
                                            COGSAccID,
                                            journalEntryDetail,
                                            accountBalance,
                                            inventoryAccAmount,
                                            COGSAccAmount,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                }
            }
            //IssuseInstoer Materia
            foreach (var item in saleDD)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = (item.Qty * orft.Factor) * (bomd.Qty * gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        int inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == saledeli.WarehouseID && i.ItemID == item_detail.ItemID);
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == saledeli.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saledeli.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saledeli.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            inventoryAccIDAvg = inventoryAcc.ID;
                            COGSAccIDAvg = COGSAcc.ID;
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault();
                            inventoryAccIDAvg = inventoryAcc.ID;
                            COGSAccIDAvg = COGSAcc.ID;
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = saledeli.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.Delivery,
                                        FromWareDetialID = item_IssusStock.ID,
                                        OutStockFrom = saledeli.SDID,
                                        BPID = saledeli.CusID,
                                        TransID = saledeli.SDID,
                                    };
                                    _context.StockOuts.Add(stockOuts);

                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                    item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                    item_inventory_audit.BranchID = saledeli.BranchID;
                                    item_inventory_audit.UserID = saledeli.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                    item_inventory_audit.Trans_Type = docType.Code;
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = saledeli.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                    item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                    item_inventory_audit.SeriesID = saledeli.SeriesID;
                                    item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                    item_inventory_audit.CompanyID = saledeli.CompanyID;
                                }
                                inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.UomID == item_detail.UomID && w.WarehouseID == saledeli.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = saledeli.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.Delivery,
                                        FromWareDetialID = item_IssusStock.ID,
                                        OutStockFrom = saledeli.SDID,
                                        BPID = saledeli.CusID,
                                        TransID = saledeli.SDID,
                                    };
                                    _context.StockOuts.Add(stockOuts);

                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                    item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                    item_inventory_audit.BranchID = saledeli.BranchID;
                                    item_inventory_audit.UserID = saledeli.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                    item_inventory_audit.Trans_Type = docType.Code;
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = saledeli.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                    item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                    item_inventory_audit.SeriesID = saledeli.SeriesID;
                                    item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                    item_inventory_audit.CompanyID = saledeli.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item_detail.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                _utility.UpdateAvgCost(item_detail.ItemID, saledeli.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            _context.WarehouseDetails.Update(item_IssusStock);
                            _context.InventoryAudits.Add(item_inventory_audit);
                            _context.SaveChanges();
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.UomID == item_detail.UomID && w.WarehouseID == saledeli.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item_detail.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, saledeli.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) - (@IssusQty * item_IssusStock.Cost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        inventoryAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == saledeli.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saledeli.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                FromWareDetialID = item_IssusStock.ID,
                                                OutStockFrom = saledeli.SDID,
                                                BPID = saledeli.CusID,
                                                TransID = saledeli.SDID,
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.Delivery.ToString();
                                            item_inventory_audit.WarehouseID = saledeli.WarehouseID;
                                            item_inventory_audit.BranchID = saledeli.BranchID;
                                            item_inventory_audit.UserID = saledeli.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = saledeli.InvoiceNo;
                                            item_inventory_audit.Trans_Type = docType.Code;
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = saledeli.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = saledeli.LocalCurID;
                                            item_inventory_audit.LocalSetRate = saledeli.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = saledeli.SeriesDID;
                                            item_inventory_audit.SeriesID = saledeli.SeriesID;
                                            item_inventory_audit.DocumentTypeID = saledeli.DocTypeID;
                                            item_inventory_audit.CompanyID = saledeli.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item_detail.ItemID, saledeli.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, saledeli.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        _context.WarehouseDetails.Update(item_IssusStock);
                                        _context.InventoryAudits.Add(item_inventory_audit);
                                        _context.SaveChanges();
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }

                        InsertFinancialDelivery(
                                            inventoryAccIDAvg,
                                            COGSAccIDAvg,
                                            journalEntryDetail,
                                            accountBalance,
                                            inventoryAccAmountAvg,
                                            COGSAccAmountAvg,
                                            journalEntry,
                                            saledeli,
                                            docType,
                                            douTypeID
                                        );
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID);
            journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
            journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
            _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
            _context.AccountBalances.UpdateRange(accountBalance);
            _context.SaveChanges();
        }
        public void IssuseInStockARReserveInvoice(int orderid, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter, FreightSale freight)
        {
            var Order = _context.ARReserveInvoices.First(w => w.ID == orderid);
            var OrderDetails = _context.ARReserveInvoiceDetails.Where(w => w.ARReserveInvoiceID == orderid).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.SeriesDetails.Find(Order.SeriesDID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.BranchID = Order.BranchID;
                journalEntry.TransNo = Sno;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = defaultJE.Name + " " + Sno;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                decimal accreAmount = (decimal)Order.TotalAmountSys;
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = accreAmount,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                glAcc.Balance += accreAmount;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,

                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Debit = accreAmount,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    Creator = Order.UserID,
                    BPAcctID = Order.CusID,
                    Effective = EffectiveBlance.Debit

                });
                _context.Update(glAcc);
            }
            // BP ARDown Payment //
            var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();
            if (dpmAcc.ID > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = Order.DownPaymentSys,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                dpmAcc.Balance += Order.DownPaymentSys;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,

                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = dpmAcc.Code,
                    Details = douTypeID.Name + " - " + dpmAcc.Code,
                    CumulativeBalance = dpmAcc.Balance,
                    Debit = Order.DownPaymentSys,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = dpmAcc.ID,
                    BPAcctID = Order.CusID,
                    Creator = Order.UserID,
                    Effective = EffectiveBlance.Debit
                });
                _context.Update(dpmAcc);
            }
            // Tax AR Down Payment //
            var _ards = ards.Where(i => i.Selected).ToList();
            if (_ards.Count > 0)
            {
                foreach (var ard in _ards)
                {
                    if (ard.SaleARDPINCNDetails.Any())
                    {
                        foreach (var i in ard.SaleARDPINCNDetails)
                        {
                            // Tax Account ///
                            var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                            var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                            decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                            if (taxAcc.ID > 0)
                            {
                                var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                if (taxjur.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                    taxAcc.Balance += taxValue;
                                    //journalEntryDetail
                                    taxjur.Debit += taxValue;
                                    //accountBalance
                                    accBalance.CumulativeBalance = taxAcc.Balance;
                                    accBalance.Debit += taxValue;
                                }
                                else
                                {
                                    taxAcc.Balance += taxValue;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = taxAcc.ID,
                                        Debit = taxValue,
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = taxAcc.Code,
                                        Details = douTypeID.Name + " - " + taxAcc.Code,
                                        CumulativeBalance = taxAcc.Balance,
                                        Debit = taxValue,
                                        LocalSetRate = ard.LocalSetRate,
                                        GLAID = taxAcc.ID,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(taxAcc);
                                _context.SaveChanges();
                            }
                        }
                    }
                    var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                    __ard.Status = "used";
                    __ard.ARID = orderid;
                    _context.ARDownPayments.Update(__ard);
                    _context.SaveChanges();
                }
            }
            // Freight //
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (type != "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        inventoryAccID = inventoryAcc.ID;
                        COGSAccID = COGSAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                    if (type == "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null && inventoryAcc != null && COGSAcc != null)
                    {
                        if (type != "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            inventoryAccID = inventoryAcc.ID;
                            COGSAccID = COGSAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                        if (type == "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                    }
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }
                if (type != "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,

                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                if (type == "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,

                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                        _context.SaveChanges();
                    }
                }
                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialARReserveInvoice(
                        inventoryAccID, COGSAccID, journalEntryDetail,
                        accountBalance, inventoryAccAmount, COGSAccAmount,
                        journalEntry, Order, docType, douTypeID, glAcc, type
                    );
                }
            }
            //IssuseInstocMaterialkSaleAR
            foreach (var item in OrderDetails)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * (double)orft.Factor) * ((double)bomd.Qty * (double)gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item_detail.ItemID);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_detail.GUoMID);
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.CusID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.ARReserveInvoice.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "SD";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                    item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                inventoryAccAmountAvg = (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.CusID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.LineID = item.LineID;
                                    item_inventory_audit.TypeItem = SaleCopyType.ARReserveInvoice.ToString();
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "AR";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            if (type != "Delivery")
                            {
                                _context.WarehouseDetails.Update(item_IssusStock);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.ARReserveInvoice.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg = (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.ARReserveInvoice.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.ARReserveInvoice.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg = (decimal)item_inventory_audit.Cost * (decimal)@Qty;
                                        COGSAccAmountAvg += (decimal)item_inventory_audit.Cost * (decimal)@Qty;
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);

                                            double cost = (inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost)) / (inventory_audit.Sum(q => q.Qty) - @IssusQty);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.LineID = item.LineID;
                                            item_inventory_audit.TypeItem = SaleCopyType.ARReserveInvoice.ToString();
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                        if (type != "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();

                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                            }
                            //inventoryAccID
                            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                            if (glAccInvenfifo.ID > 0)
                            {
                                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                                if (listInvenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    //journalEntryDetail
                                    listInvenfifo.Credit += inventoryAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                    accBalance.Credit += inventoryAccAmountAvg;
                                }
                                else
                                {
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = inventoryAccIDAvg,
                                        Credit = inventoryAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                        CumulativeBalance = glAccInvenfifo.Balance,
                                        Credit = inventoryAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = inventoryAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccInvenfifo);
                            }

                            // COGS
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    //journalEntryDetail
                                    listCOGSfifo.Debit += COGSAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Debit += COGSAccAmountAvg;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccIDAvg,
                                        Debit = COGSAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Debit = COGSAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccIDAvg,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(glAccCOGSfifo);
                            }
                            _context.SaveChanges();
                        }
                        if (type == "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                                _context.SaveChanges();
                            }
                        }
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }

        public void IssuseInStockServiceContract(
         int orderid, string type, List<SaleARDPINCN> ards,
         SaleGLAccountDetermination saleGlDeter,
         FreightSale freight, List<SerialNumber> serials, List<BatchNo> batches)
        {
            var Order = _context.ServiceContracts.First(w => w.ID == orderid);
            var OrderDetails = _context.ServiceContractDetails.Where(w => w.ServiceContractID == orderid).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.SeriesDetails.Find(Order.SeriesDID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.BranchID = Order.BranchID;
                journalEntry.TransNo = Sno;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = defaultJE.Name + " " + Sno;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                decimal accreAmount = (decimal)Order.TotalAmountSys;
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = accreAmount,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                glAcc.Balance += accreAmount;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,

                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Debit = accreAmount,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    Creator = Order.UserID,
                    BPAcctID = Order.CusID,
                    Effective = EffectiveBlance.Debit

                });
                _context.Update(glAcc);
            }
            // BP ARDown Payment //
            var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();
            if (dpmAcc.ID > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = Order.DownPaymentSys,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                dpmAcc.Balance += Order.DownPaymentSys;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,

                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = dpmAcc.Code,
                    Details = douTypeID.Name + " - " + dpmAcc.Code,
                    CumulativeBalance = dpmAcc.Balance,
                    Debit = Order.DownPaymentSys,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = dpmAcc.ID,
                    BPAcctID = Order.CusID,
                    Creator = Order.UserID,
                    Effective = EffectiveBlance.Debit
                });
                _context.Update(dpmAcc);
            }
            // Tax AR Down Payment //
            var _ards = ards.Where(i => i.Selected).ToList();
            if (_ards.Count > 0)
            {
                foreach (var ard in _ards)
                {
                    if (ard.SaleARDPINCNDetails.Any())
                    {
                        foreach (var i in ard.SaleARDPINCNDetails)
                        {
                            // Tax Account ///
                            var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                            var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                            decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                            if (taxAcc.ID > 0)
                            {
                                var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                if (taxjur.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                    taxAcc.Balance += taxValue;
                                    //journalEntryDetail
                                    taxjur.Debit += taxValue;
                                    //accountBalance
                                    accBalance.CumulativeBalance = taxAcc.Balance;
                                    accBalance.Debit += taxValue;
                                }
                                else
                                {
                                    taxAcc.Balance += taxValue;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = taxAcc.ID,
                                        Debit = taxValue,
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = taxAcc.Code,
                                        Details = douTypeID.Name + " - " + taxAcc.Code,
                                        CumulativeBalance = taxAcc.Balance,
                                        Debit = taxValue,
                                        LocalSetRate = ard.LocalSetRate,
                                        GLAID = taxAcc.ID,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(taxAcc);
                                _context.SaveChanges();
                            }
                        }
                    }
                    var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                    __ard.Status = "used";
                    __ard.ARID = orderid;
                    _context.ARDownPayments.Update(__ard);
                    _context.SaveChanges();
                }
            }
            // Freight //
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (type != "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        inventoryAccID = inventoryAcc.ID;
                        COGSAccID = COGSAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                    if (type == "Delivery")
                    {
                        revenueAccID = revenueAcc.ID;
                        if (Order.DisRate > 0)
                        {
                            decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                            revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        }
                        else
                        {
                            revenueAccAmount = (decimal)item.TotalSys;
                        }
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                        join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                   join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    if (revenueAcc != null && inventoryAcc != null && COGSAcc != null)
                    {
                        if (type != "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            inventoryAccID = inventoryAcc.ID;
                            COGSAccID = COGSAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                        if (type == "Delivery")
                        {
                            revenueAccID = revenueAcc.ID;
                            if (Order.DisRate > 0)
                            {
                                decimal disvalue = (decimal)item.TotalSys * (decimal)Order.DisRate / 100;
                                revenueAccAmount = (decimal)item.TotalSys - disvalue;
                            }
                            else
                            {
                                revenueAccAmount = (decimal)item.TotalSys;
                            }
                        }
                    }
                }
                if (itemMaster.Process != "Standard")
                {
                    double @Check_Stock;
                    double @Remain;
                    double @IssusQty;
                    double @FIFOQty;
                    double @Qty = item.Qty * item.Factor;
                    double Cost = 0;
                    var wareSum = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID);
                    var wareDetails = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item.ItemID).ToList();
                    var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item.ItemID);
                    if (wareSum != null)
                    {
                        if (Order.CopyType == SaleCopyType.Order)
                        {
                            wareSum.Committed -= (double)item.Qty;
                            itemMaster.StockCommit -= (double)item.Qty;
                        }
                        //WerehouseSummary
                        wareSum.InStock -= @Qty;
                        //Itemmasterdata
                        itemMaster.StockIn = wareSum.InStock - @Qty;
                        _context.WarehouseSummary.Update(wareSum);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _utility.UpdateItemAccounting(_itemAcc, wareSum);
                    }
                    if (type != "Delivery")
                    {
                        if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                        {
                            if (serials.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var s in serials)
                                {
                                    if (s.SerialNumberSelected != null)
                                    {
                                        foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                        {
                                            var waredetial = wareDetails.FirstOrDefault(i => ss.SerialNumber == i.SerialNumber && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                Cost = waredetial.Cost;
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = waredetial.InStock,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                waredetial.InStock -= 1;
                                                // insert to warehouse detail
                                                _ = DateTime.TryParse(ss.ExpireDate, out DateTime _expdate);
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = 1,
                                                    ItemID = waredetial.ItemID,
                                                    Location = waredetial.Location,
                                                    LotNumber = waredetial.LotNumber,
                                                    MfrDate = waredetial.MfrDate,
                                                    MfrSerialNumber = waredetial.MfrSerialNumber,
                                                    MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                    MfrWarDateStart = waredetial.MfrWarDateStart,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SerialNumber = waredetial.SerialNumber,
                                                    PlateNumber = waredetial.PlateNumber,
                                                    Color = waredetial.Color,
                                                    Brand = waredetial.Brand,
                                                    Condition = waredetial.Condition,
                                                    Type = waredetial.Type,
                                                    Power = waredetial.Power,
                                                    Year = waredetial.Year,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = _expdate,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.ID,
                                                    Contract = itemMaster.ContractID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost;
                                                _COGSAccAmount = (decimal)waredetial.Cost;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialServiceContractAR(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // Insert to Inventory Audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate,
                                                }).ToList();
                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,

                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                        {
                            if (batches.Count > 0)
                            {
                                List<WareForAudiView> wareForAudis = new();
                                foreach (var b in batches)
                                {
                                    if (b.BatchNoSelected != null)
                                    {
                                        foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                        {
                                            decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                            var waredetial = wareDetails.FirstOrDefault(i => sb.BatchNo == i.BatchNo && i.InStock > 0);
                                            decimal _inventoryAccAmount = 0M;
                                            decimal _COGSAccAmount = 0M;
                                            if (waredetial != null)
                                            {
                                                wareForAudis.Add(new WareForAudiView
                                                {
                                                    Cost = waredetial.Cost,
                                                    Qty = (double)selectedQty,
                                                    ExpireDate = waredetial.ExpireDate,
                                                });
                                                Cost = waredetial.Cost;
                                                waredetial.InStock -= (double)selectedQty;

                                                // insert to waredetial
                                                var stockOut = new StockOut
                                                {
                                                    AdmissionDate = waredetial.AdmissionDate,
                                                    Cost = (decimal)waredetial.Cost,
                                                    CurrencyID = waredetial.CurrencyID,
                                                    Details = waredetial.Details,
                                                    ID = 0,
                                                    InStock = selectedQty,
                                                    ItemID = item.ItemID,
                                                    Location = waredetial.Location,
                                                    MfrDate = waredetial.MfrDate,
                                                    ProcessItem = ProcessItem.SEBA,
                                                    SyetemDate = DateTime.Now,
                                                    SysNum = 0,
                                                    TimeIn = DateTime.Now,
                                                    WarehouseID = waredetial.WarehouseID,
                                                    UomID = item.UomID,
                                                    UserID = Order.UserID,
                                                    ExpireDate = sb.ExpireDate,
                                                    BatchAttr1 = waredetial.BatchAttr1,
                                                    BatchAttr2 = waredetial.BatchAttr2,
                                                    BatchNo = waredetial.BatchNo,
                                                    TransType = TransTypeWD.AR,
                                                    FromWareDetialID = waredetial.ID,
                                                    TransID = Order.ID,
                                                    BPID = Order.CusID
                                                };
                                                _inventoryAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _COGSAccAmount = (decimal)waredetial.Cost * selectedQty;
                                                _context.StockOuts.Add(stockOut);
                                                _context.SaveChanges();
                                            }
                                            InsertFinancialServiceContractAR(
                                                inventoryAccID, COGSAccID, journalEntryDetail,
                                                accountBalance, _inventoryAccAmount, _COGSAccAmount,
                                                journalEntry, Order, docType, douTypeID, glAcc, type
                                            );
                                        }
                                    }
                                }

                                // insert to inventory audit
                                wareForAudis = (from wa in wareForAudis
                                                group wa by wa.Cost into g
                                                let wha = g.FirstOrDefault()
                                                select new WareForAudiView
                                                {
                                                    Qty = g.Sum(i => i.Qty),
                                                    Cost = wha.Cost,
                                                    ExpireDate = wha.ExpireDate
                                                }).ToList();

                                if (wareForAudis.Any())
                                {
                                    foreach (var i in wareForAudis)
                                    {
                                        var inventory_audit = _context.InventoryAudits
                                    .Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                        var inventory = new InventoryAudit
                                        {
                                            ID = 0,
                                            WarehouseID = Order.WarehouseID,
                                            BranchID = Order.BranchID,
                                            UserID = Order.UserID,
                                            ItemID = item.ItemID,
                                            CurrencyID = Order.SaleCurrencyID,
                                            UomID = baseUOM.BaseUOM,
                                            InvoiceNo = Order.InvoiceNo,
                                            Trans_Type = docType.Code,
                                            Process = itemMaster.Process,
                                            SystemDate = DateTime.Now,
                                            PostingDate = Order.PostingDate,
                                            TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                            Qty = i.Qty * -1,
                                            Cost = i.Cost,
                                            Price = 0,
                                            CumulativeQty = inventory_audit.Sum(q => q.Qty) - i.Qty,
                                            CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (i.Qty * i.Cost),
                                            Trans_Valuse = i.Qty * i.Cost * -1,
                                            ExpireDate = i.ExpireDate,
                                            LocalCurID = Order.LocalCurID,
                                            LocalSetRate = Order.LocalSetRate,
                                            CompanyID = Order.CompanyID,
                                            DocumentTypeID = docType.ID,
                                            SeriesID = Order.SeriesID,
                                            SeriesDetailID = Order.SeriesDID,
                                        };
                                        _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                                        _context.InventoryAudits.Add(inventory);
                                        _context.SaveChanges();
                                    }
                                }
                            }
                        }
                        else
                        {
                            List<WarehouseDetail> _whlists = wareDetails.Where(w => w.InStock > 0).OrderBy(i => i.SyetemDate).ToList();
                            if (warehouse.IsAllowNegativeStock && _whlists.Count == 0)
                            {
                                var wh = wareDetails.LastOrDefault();
                                _whlists.Add(wh);
                            }
                            foreach (var (item_warehouse, index) in _whlists.Select((value, i) => (value, i)))
                            {
                                InventoryAudit inventoryAudit = new();
                                WarehouseDetail item_IssusStock = item_warehouse;
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else if (@Qty > 0 && index == _whlists.Count - 1 && warehouse.IsAllowNegativeStock)
                                    {
                                        @IssusQty = @Qty;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        double _cost = item_IssusStock.Cost;
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount = (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    if (itemMaster.Process == "FIFO")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_warehouse.Cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            inventoryAudit.ID = 0;
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = item_IssusStock.Cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * item_IssusStock.Cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * item_IssusStock.Cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmount = (decimal)(inventoryAudit.Cost * @IssusQty);
                                        COGSAccAmount += (decimal)(inventoryAudit.Cost * @IssusQty);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (itemMaster.Process == "Average")
                                    {
                                        @FIFOQty = item_IssusStock.InStock - @Qty;
                                        @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double cost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_warehouse.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_warehouse.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            inventoryAudit.ID = 0;
                                            inventoryAudit.WarehouseID = Order.WarehouseID;
                                            inventoryAudit.BranchID = Order.BranchID;
                                            inventoryAudit.UserID = Order.UserID;
                                            inventoryAudit.ItemID = item.ItemID;
                                            inventoryAudit.CurrencyID = Com.SystemCurrencyID;
                                            inventoryAudit.UomID = baseUOM.BaseUOM;
                                            inventoryAudit.InvoiceNo = Order.InvoiceNo;
                                            inventoryAudit.Trans_Type = docType.Code;
                                            inventoryAudit.Process = itemMaster.Process;
                                            inventoryAudit.SystemDate = DateTime.Now;
                                            inventoryAudit.PostingDate = Order.PostingDate;
                                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            inventoryAudit.Qty = @IssusQty * -1;
                                            inventoryAudit.Cost = cost;
                                            inventoryAudit.Price = 0;
                                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * cost);
                                            inventoryAudit.Trans_Valuse = @IssusQty * cost * -1;
                                            inventoryAudit.ExpireDate = item_IssusStock.ExpireDate;
                                            inventoryAudit.LocalCurID = Order.LocalCurID;
                                            inventoryAudit.LocalSetRate = Order.LocalSetRate;
                                            inventoryAudit.SeriesDetailID = Order.SeriesDID;
                                            inventoryAudit.SeriesID = Order.SeriesID;
                                            inventoryAudit.DocumentTypeID = Order.DocTypeID;
                                            inventoryAudit.CompanyID = Order.CompanyID;
                                        }

                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, inventoryAudit);
                                        @AvgCost = _utility.CheckNaNOrInfinity(@AvgCost);
                                        inventoryAccAmount = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmount += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_warehouse.ItemID, Order.WarehouseID, item.GUomID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.UpdateBomCost(item_warehouse.ItemID, inventoryAudit.Qty, inventoryAudit.Cost);
                                        _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(inventoryAudit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    wareDetails = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                    }


                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == Order.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount = (decimal)priceListDetail.Cost * (decimal)item.Qty * (decimal)Order.ExchangeRate;
                    COGSAccAmount += (decimal)priceListDetail.Cost * (decimal)item.Qty * (decimal)Order.ExchangeRate;
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        WarehouseID = Order.WarehouseID,
                        BranchID = Order.BranchID,
                        UserID = Order.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = Com.SystemCurrencyID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = Order.InvoiceNo,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = Order.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty * -1,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) - item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost * -1,
                        LocalCurID = Order.LocalCurID,
                        LocalSetRate = Order.LocalSetRate,
                        SeriesDetailID = Order.SeriesDID,
                        SeriesID = Order.SeriesID,
                        DocumentTypeID = Order.DocTypeID,
                        CompanyID = Order.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }
                if (type != "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,

                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                    }
                }
                if (type == "Delivery")
                {
                    // Account Revenue
                    var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                    if (glAccRevenfifo.ID > 0)
                    {
                        var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                        if (listRevenfifo.ItemID > 0)
                        {
                            var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            //journalEntryDetail
                            listRevenfifo.Credit += revenueAccAmount;
                            //accountBalance
                            accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                            accBalance.Credit += revenueAccAmount;
                        }
                        else
                        {
                            glAccRevenfifo.Balance -= revenueAccAmount;
                            journalEntryDetail.Add(new JournalEntryDetail
                            {
                                JEID = journalEntry.ID,
                                Type = Type.GLAcct,
                                ItemID = revenueAccID,
                                Credit = revenueAccAmount,
                                BPAcctID = Order.CusID
                            });
                            //
                            accountBalance.Add(new AccountBalance
                            {
                                JEID = journalEntry.ID,

                                PostingDate = Order.PostingDate,
                                Origin = docType.ID,
                                OriginNo = Order.InvoiceNumber,
                                OffsetAccount = glAcc.Code,
                                Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                CumulativeBalance = glAccRevenfifo.Balance,
                                Credit = revenueAccAmount,
                                LocalSetRate = (decimal)Order.LocalSetRate,
                                GLAID = revenueAccID,
                                Effective = EffectiveBlance.Credit
                            });
                        }
                        _context.Update(glAccRevenfifo);
                        _context.SaveChanges();
                    }
                }
                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialServiceContractAR(
                        inventoryAccID, COGSAccID, journalEntryDetail,
                        accountBalance, inventoryAccAmount, COGSAccAmount,
                        journalEntry, Order, docType, douTypeID, glAcc, type
                    );
                }
            }
            //IssuseInstocMaterialkSaleAR
            foreach (var item in OrderDetails)
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID && w.Active == true) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = ((double)item.Qty * (double)orft.Factor) * ((double)bomd.Qty * (double)gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_detail in items_material.ToList())
                    {
                        var item_master_data = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_detail.ItemID);
                        var item_warehouse_material = _context.WarehouseSummary.FirstOrDefault(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID);
                        var all_item_warehouse_detail = _context.WarehouseDetails.Where(w => w.WarehouseID == Order.WarehouseID && w.ItemID == item_detail.ItemID).ToList();
                        var item_nagative = from wa in _context.WarehouseSummary.Where(w => w.ItemID == item_detail.ItemID)
                                            join na in _context.BOMDetail on wa.ItemID equals na.ItemID
                                            select new
                                            {
                                                NagaStock = wa.InStock
                                            };
                        var _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.WarehouseID == Order.WarehouseID && i.ItemID == item_detail.ItemID);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_detail.GUoMID);
                        if (item_master_data.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        else if (item_master_data.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                              join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                                join gl in _context.GLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == item_master_data.ItemGroup1ID)
                                           join gl in _context.GLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            if (type != "Delivery")
                            {
                                COGSAccIDAvg = COGSAcc.ID;
                                revenueAccIDAvg = revenueAcc.ID;
                                inventoryAccIDAvg = inventoryAcc.ID;
                            }
                            if (type == "Delivery")
                            {
                                revenueAccIDAvg = revenueAcc.ID;
                            }
                        }
                        var nagative_check = item_nagative.Sum(w => w.NagaStock);
                        //WerehouseSummary
                        item_warehouse_material.Committed -= (double)item_detail.Qty;
                        item_warehouse_material.InStock -= (double)item_detail.Qty;
                        //Itemmasterdata
                        item_master_data.StockIn -= (double)item_detail.Qty;
                        if (item_detail.NegativeStock == true && nagative_check <= 0)
                        {
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            var item_inventory_audit = new InventoryAudit();
                            var item_IssusStock = all_item_warehouse_detail.LastOrDefault(w => w.InStock <= 0);
                            @FIFOQty = item_IssusStock.InStock - @Qty;
                            @IssusQty = item_IssusStock.InStock - @FIFOQty;
                            if (item_detail.Process == "FIFO")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {

                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)item_IssusStock.Cost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.FIFO,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.CusID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "SD";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = item_IssusStock.Cost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                    item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                inventoryAccAmountAvg = (decimal)(item_inventory_audit.Cost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            else if (item_detail.Process == "Average")
                            {
                                item_IssusStock.InStock = @FIFOQty;
                                if (@IssusQty > 0)
                                {
                                    var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    double @sysAvCost = warehouse_summary.Cost;
                                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                    var stockOuts = new StockOut
                                    {
                                        Cost = (decimal)@sysAvCost,
                                        CurrencyID = item_IssusStock.CurrencyID,
                                        ID = 0,
                                        InStock = (decimal)@IssusQty,
                                        ItemID = item.ItemID,
                                        ProcessItem = ProcessItem.Average,
                                        SyetemDate = DateTime.Now,
                                        TimeIn = DateTime.Now,
                                        WarehouseID = item_IssusStock.WarehouseID,
                                        UomID = item.UomID,
                                        UserID = Order.UserID,
                                        ExpireDate = item.ExpireDate,
                                        TransType = TransTypeWD.AR,
                                        BPID = Order.CusID,
                                        OutStockFrom = Order.CusID,
                                        FromWareDetialID = item_IssusStock.ID,
                                        TransID = item_IssusStock.ID
                                    };
                                    _context.StockOuts.Add(stockOuts);
                                    item_inventory_audit.ID = 0;
                                    item_inventory_audit.WarehouseID = Order.WarehouseID;
                                    item_inventory_audit.BranchID = Order.BranchID;
                                    item_inventory_audit.UserID = Order.UserID;
                                    item_inventory_audit.ItemID = item_detail.ItemID;
                                    item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                    item_inventory_audit.UomID = item_detail.UomID;
                                    item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                    item_inventory_audit.Trans_Type = "AR";
                                    item_inventory_audit.Process = item_detail.Process;
                                    item_inventory_audit.SystemDate = DateTime.Now;
                                    item_inventory_audit.PostingDate = Order.PostingDate;
                                    item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                    item_inventory_audit.Qty = @IssusQty * -1;
                                    item_inventory_audit.Cost = @sysAvCost;
                                    item_inventory_audit.Price = 0;
                                    item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                    item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                    item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                    item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                    item_inventory_audit.LocalCurID = Order.LocalCurID;
                                    item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                    item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                    item_inventory_audit.SeriesID = Order.SeriesID;
                                    item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                    item_inventory_audit.CompanyID = Order.CompanyID;
                                }
                                double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                            }
                            if (type != "Delivery")
                            {
                                _context.WarehouseDetails.Update(item_IssusStock);
                                _context.InventoryAudits.Add(item_inventory_audit);
                                _context.SaveChanges();
                            }
                        }
                        else
                        {
                            double @Check_Stock;
                            double @Remain;
                            double @IssusQty;
                            double @FIFOQty;
                            double @Qty = item_detail.Qty;
                            foreach (var item_warehouse in all_item_warehouse_detail.Where(w => w.InStock > 0))
                            {
                                var item_inventory_audit = new InventoryAudit();
                                var item_IssusStock = all_item_warehouse_detail.FirstOrDefault(w => w.InStock > 0);
                                @Check_Stock = item_warehouse.InStock - @Qty;
                                if (@Check_Stock < 0)
                                {
                                    @Remain = (item_warehouse.InStock - @Qty) * (-1);
                                    @IssusQty = @Qty - @Remain;
                                    if (@Remain <= 0)
                                    {
                                        @Qty = 0;
                                    }
                                    else
                                    {
                                        @Qty = @Remain;
                                    }
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg = (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else if (item_detail.Process == "Average")
                                    {
                                        item_IssusStock.InStock = item_IssusStock.InStock -= @IssusQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)@sysAvCost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = @sysAvCost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    @FIFOQty = item_IssusStock.InStock - @Qty;
                                    @IssusQty = item_IssusStock.InStock - @FIFOQty;
                                    if (item_detail.Process == "FIFO")
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {

                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)item_IssusStock.Cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.FIFO,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);

                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = item_IssusStock.Cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + (@IssusQty * (-1));
                                            item_inventory_audit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.Trans_Valuse = (@IssusQty * item_IssusStock.Cost) * (-1);
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        inventoryAccAmountAvg = (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(item_inventory_audit.Cost * @IssusQty);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    else
                                    {
                                        item_IssusStock.InStock = @FIFOQty;
                                        if (@IssusQty > 0)
                                        {
                                            var warehouse_summary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);
                                            double @sysAvCost = warehouse_summary.Cost;
                                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_detail.ItemID && w.WarehouseID == Order.WarehouseID);

                                            double cost = (inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost)) / (inventory_audit.Sum(q => q.Qty) - @IssusQty);
                                            cost = _utility.CheckNaNOrInfinity(cost);
                                            var stockOuts = new StockOut
                                            {
                                                Cost = (decimal)cost,
                                                CurrencyID = item_IssusStock.CurrencyID,
                                                ID = 0,
                                                InStock = (decimal)@IssusQty,
                                                ItemID = item.ItemID,
                                                ProcessItem = ProcessItem.Average,
                                                SyetemDate = DateTime.Now,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = item_IssusStock.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = Order.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.Delivery,
                                                BPID = Order.CusID,
                                                OutStockFrom = Order.CusID,
                                                FromWareDetialID = item_IssusStock.ID,
                                                TransID = item_IssusStock.ID
                                            };
                                            _context.StockOuts.Add(stockOuts);
                                            item_inventory_audit.ID = 0;
                                            item_inventory_audit.WarehouseID = Order.WarehouseID;
                                            item_inventory_audit.BranchID = Order.BranchID;
                                            item_inventory_audit.UserID = Order.UserID;
                                            item_inventory_audit.ItemID = item_detail.ItemID;
                                            item_inventory_audit.CurrencyID = Com.SystemCurrencyID;
                                            item_inventory_audit.UomID = item_detail.UomID;
                                            item_inventory_audit.InvoiceNo = Order.InvoiceNo;
                                            item_inventory_audit.Trans_Type = "AR";
                                            item_inventory_audit.Process = item_detail.Process;
                                            item_inventory_audit.SystemDate = DateTime.Now;
                                            item_inventory_audit.PostingDate = Order.PostingDate;
                                            item_inventory_audit.TimeIn = DateTime.Now.ToShortTimeString().ToString();
                                            item_inventory_audit.Qty = @IssusQty * -1;
                                            item_inventory_audit.Cost = cost;
                                            item_inventory_audit.Price = 0;
                                            item_inventory_audit.CumulativeQty = inventory_audit.Sum(q => q.Qty) - @IssusQty;
                                            item_inventory_audit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) - (@IssusQty * @sysAvCost);
                                            item_inventory_audit.Trans_Valuse = @IssusQty * @sysAvCost * -1;
                                            item_inventory_audit.ExpireDate = item_IssusStock.ExpireDate;
                                            item_inventory_audit.LocalCurID = Order.LocalCurID;
                                            item_inventory_audit.LocalSetRate = Order.LocalSetRate;
                                            item_inventory_audit.SeriesDetailID = Order.SeriesDID;
                                            item_inventory_audit.SeriesID = Order.SeriesID;
                                            item_inventory_audit.DocumentTypeID = Order.DocTypeID;
                                            item_inventory_audit.CompanyID = Order.CompanyID;
                                        }
                                        double @AvgCost = _utility.CalAVGCost(item.ItemID, Order.WarehouseID, item_inventory_audit);
                                        inventoryAccAmountAvg = (decimal)(@AvgCost * @IssusQty);
                                        COGSAccAmountAvg += (decimal)(@AvgCost * @IssusQty);
                                        _utility.UpdateAvgCost(item_detail.ItemID, Order.WarehouseID, item_master_data.GroupUomID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.UpdateBomCost(item_detail.ItemID, item_inventory_audit.Qty, item_inventory_audit.Cost);
                                        _utility.CumulativeValue(item_inventory_audit.WarehouseID, item_inventory_audit.ItemID, item_inventory_audit.CumulativeValue, _itemAcc);
                                        if (type != "Delivery")
                                        {
                                            _context.WarehouseDetails.Update(item_IssusStock);
                                            _context.InventoryAudits.Add(item_inventory_audit);
                                            _context.SaveChanges();
                                        }
                                    }
                                    all_item_warehouse_detail = new List<WarehouseDetail>();
                                    break;
                                }
                            }
                        }
                        if (type != "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();

                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(glAccRevenfifo);
                            }
                            //inventoryAccID
                            var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                            if (glAccInvenfifo.ID > 0)
                            {
                                var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                                if (listInvenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    //journalEntryDetail
                                    listInvenfifo.Credit += inventoryAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                    accBalance.Credit += inventoryAccAmountAvg;
                                }
                                else
                                {
                                    glAccInvenfifo.Balance -= inventoryAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = inventoryAccIDAvg,
                                        Credit = inventoryAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                        CumulativeBalance = glAccInvenfifo.Balance,
                                        Credit = inventoryAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = inventoryAccIDAvg,
                                        Effective = EffectiveBlance.Credit

                                    });
                                }
                                _context.Update(glAccInvenfifo);
                            }

                            // COGS
                            var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                            if (glAccCOGSfifo.ID > 0)
                            {
                                var listCOGSfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                                if (listCOGSfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    //journalEntryDetail
                                    listCOGSfifo.Debit += COGSAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                    accBalance.Debit += COGSAccAmountAvg;
                                }
                                else
                                {
                                    glAccCOGSfifo.Balance += COGSAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = COGSAccIDAvg,
                                        Debit = COGSAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                        CumulativeBalance = glAccCOGSfifo.Balance,
                                        Debit = COGSAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = COGSAccIDAvg,
                                        Effective = EffectiveBlance.Debit

                                    });
                                }
                                _context.Update(glAccCOGSfifo);
                            }
                            _context.SaveChanges();
                        }
                        if (type == "Delivery")
                        {
                            // Account Revenue
                            var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                            if (glAccRevenfifo.ID > 0)
                            {
                                var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                                if (listRevenfifo.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    //journalEntryDetail
                                    listRevenfifo.Credit += revenueAccAmountAvg;
                                    //accountBalance
                                    accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                    accBalance.Credit += revenueAccAmountAvg;
                                }
                                else
                                {
                                    glAccRevenfifo.Balance -= revenueAccAmountAvg;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = revenueAccIDAvg,
                                        Credit = revenueAccAmountAvg,
                                        BPAcctID = Order.CusID
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = glAcc.Code,
                                        Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                        CumulativeBalance = glAccRevenfifo.Balance,
                                        Credit = revenueAccAmountAvg,
                                        LocalSetRate = (decimal)Order.LocalSetRate,
                                        GLAID = revenueAccIDAvg,
                                        Effective = EffectiveBlance.Credit

                                    });
                                }
                                _context.Update(glAccRevenfifo);
                                _context.SaveChanges();
                            }
                        }
                        _context.WarehouseSummary.Update(item_warehouse_material);
                        _context.ItemMasterDatas.Update(item_master_data);
                        _context.SaveChanges();
                    }
                }
            }
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }
        private IEnumerable<SystemCurrency> GetSystemCurrencies()
        {
            IEnumerable<SystemCurrency> currencies =
                                        (from com in _context.Company.Where(x => x.Delete == false)
                                         join c in _context.Currency.Where(x => x.Delete == false) on com.SystemCurrencyID equals c.ID
                                         select new SystemCurrency
                                         {
                                             ID = c.ID,
                                             Description = c.Description
                                         });
            return currencies;
        }
        public bool CreateIncomingPaymentCustomerByARReserveInvoiceEDTAsync(ARReserveInvoiceEditable aRReserveInvoice)
        {
            string currencyName = _context.Currency.Find(aRReserveInvoice.SaleCurrencyID).Description;
            SystemCurrency syCurrency = GetSystemCurrencies().FirstOrDefault();
            var payment = _context.IncomingPaymentCustomers.FirstOrDefault(p => p.InvoiceNumber == aRReserveInvoice.InvoiceNumber && p.SeriesID == aRReserveInvoice.SeriesID && p.Types == aRReserveInvoice.Types);
            var docType = _context.DocumentTypes.Find(aRReserveInvoice.DocTypeID);
            var em = _context.Employees.FirstOrDefault(i => i.ID == aRReserveInvoice.SaleEmID) ?? new CKBS.Models.Services.HumanResources.Employee();
            var user = _userModule.CurrentUser;
            IncomingPaymentCustomer ipcustomer = new()
            {
                IncomingPaymentCustomerID = 0,
                EmID = em.ID,
                EmName = em.Name,
                CreatorID = user.ID,
                CreatorName = user.Username,
                CustomerID = aRReserveInvoice.CusID,
                BranchID = aRReserveInvoice.BranchID,
                WarehouseID = aRReserveInvoice.WarehouseID,
                DocTypeID = aRReserveInvoice.DocTypeID,
                SeriesID = aRReserveInvoice.SeriesID,
                SeriesDID = aRReserveInvoice.SeriesDID,
                CompanyID = aRReserveInvoice.CompanyID,
                InvoiceNumber = aRReserveInvoice.InvoiceNumber,
                CurrencyID = aRReserveInvoice.SaleCurrencyID,
                Types = aRReserveInvoice.Types = SaleCopyType.ARReserveInvoiceEDT.ToString(),
                //DocumentNo = saleAR.InvoiceNo,
                //DocumentType = GetTransactType(saleAR.InvoiceNo, saleAR.IncludeVat),
                Applied_Amount = aRReserveInvoice.AppliedAmount,
                CurrencyName = currencyName,
                ExchangeRate = aRReserveInvoice.ExchangeRate,
                TotalPayment = (aRReserveInvoice.TotalAmount - aRReserveInvoice.AppliedAmount),
                CashDiscount = 0,
                Total = aRReserveInvoice.SubTotal,
                TotalDiscount = 0,
                BalanceDue = (aRReserveInvoice.TotalAmount - aRReserveInvoice.AppliedAmount),
                Status = aRReserveInvoice.Status,
                Date = aRReserveInvoice.DueDate,
                PostingDate = aRReserveInvoice.PostingDate,
                SysCurrency = syCurrency.ID,
                SysName = syCurrency.Description,
                LocalCurID = aRReserveInvoice.LocalCurID,
                LocalSetRate = aRReserveInvoice.LocalSetRate,
                ItemInvoice = $"{docType.Code}-{aRReserveInvoice.InvoiceNumber}"
            };

            if (aRReserveInvoice.TotalAmount <= aRReserveInvoice.AppliedAmount)
            {
                if (aRReserveInvoice.Delivery)
                    aRReserveInvoice.Status = "close";

            }

            if (payment != null)
            {
                payment.Applied_Amount = aRReserveInvoice.AppliedAmount;
                payment.Total = aRReserveInvoice.SubTotal;
                payment.BalanceDue = aRReserveInvoice.TotalAmount - aRReserveInvoice.AppliedAmount;
                //payment.TotalPayment -= saleAR.AppliedAmount;
                payment.TotalPayment = aRReserveInvoice.TotalAmount - aRReserveInvoice.AppliedAmount;
                payment.Status = aRReserveInvoice.Status;
                var paymentDetails = _context.IncomingPaymentDetails.Where(ipd => ipd.DocumentNo == payment.DocumentNo);
                foreach (var pd in paymentDetails)
                {
                    pd.Delete = true;
                }
                _context.IncomingPaymentCustomers.Update(payment);
            }
            else
            {
                _context.IncomingPaymentCustomers.Add(ipcustomer);
            }

            _context.SaveChanges();
            return true;
        }
        public ARReserveInvoiceUpdateViewModel FindARReserveInvoiceEDT(string number, int seriesId, int comId)
        {
            #region
            var taxGroup = GetTaxGroups();
            taxGroup.Insert(0, new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            });

            var saleAR = (from ar in _context.ARReserveInvoiceEditables.Where(x => x.InvoiceNumber == number && x.SeriesID == seriesId && x.CompanyID == comId)
                          join docType in _context.DocumentTypes on ar.DocTypeID equals docType.ID
                          let sem = _context.Employees.FirstOrDefault(i => ar.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                          let fs = _context.FreightSales.Where(i => i.SaleID == ar.ID && i.SaleType == SaleCopyType.ARReserveInvoiceEDT).FirstOrDefault() ?? new FreightSale()
                          let empreq = _context.Employees.FirstOrDefault(x => x.ID == ar.RequestedBy) ?? new HumanResourcesEmployee()
                          let emprec = _context.Employees.FirstOrDefault(x => x.ID == ar.ReceivedBy) ?? new HumanResourcesEmployee()
                          let empshi = _context.Employees.FirstOrDefault(x => x.ID == ar.ShippedBy) ?? new HumanResourcesEmployee()
                          select new ARReserveInvoiceViewModel
                          {
                              BasedCopyKeys = "ARReserve Incoice Editable:AR-" + ar.InvoiceNumber,

                              ReceivedByID = emprec.ID,
                              RequestedByID = empreq.ID,
                              ShippedByID = emprec.ID,

                              ReceivedByName = emprec.Name,
                              RequestedByName = empreq.Name,
                              ShippedByName = empshi.Name,
                              BasedOn = ar.ID,
                              CopyKey = ar.CopyKey,
                              CopyType = ar.CopyType,
                              BranchID = ar.BranchID,
                              ChangeLog = ar.ChangeLog,
                              CompanyID = ar.CompanyID,
                              CusID = ar.CusID,
                              DeliveryDate = ar.DueDate,
                              DueDate = ar.DueDate,
                              DisRate = (decimal)ar.DisRate,
                              DisValue = (decimal)ar.DisValue,
                              DocTypeID = ar.DocTypeID,
                              DocumentDate = ar.DocumentDate,
                              ExchangeRate = (decimal)ar.ExchangeRate,
                              FreightAmount = ar.FreightAmount,
                              FreightAmountSys = ar.FreightAmountSys,
                              DownPayment = ar.DownPayment,
                              DownPaymentSys = ar.DownPaymentSys,
                              SaleEmID = ar.SaleEmID,
                              SaleEmName = sem.Name ?? "",
                              FreightSalesView = new FreightSaleView
                              {
                                  AmountReven = fs.AmountReven == fs.OpenAmountReven ? fs.AmountReven : fs.OpenAmountReven,
                                  SaleID = ar.ID,
                                  ID = fs.ID,
                                  SaleType = fs.SaleType,
                                  TaxSumValue = fs.TaxSumValue,
                                  FreightSaleDetailViewModels = (from fsd in _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID)
                                                                 select new FreightSaleDetailViewModel
                                                                 {
                                                                     ID = fsd.ID,
                                                                     LineID = DateTime.Now.Ticks.ToString() + fsd.ID,
                                                                     FreightSaleID = fsd.FreightSaleID,
                                                                     Amount = fsd.Amount,
                                                                     AmountWithTax = fsd.AmountWithTax,
                                                                     FreightID = fsd.FreightID,
                                                                     Name = fsd.Name,
                                                                     TaxGroup = fsd.TaxGroup,
                                                                     TaxGroupID = fsd.TaxGroupID,
                                                                     TaxGroups = GetTaxGroups(),
                                                                     TaxGroupSelect = taxGroup.Select(i => new SelectListItem
                                                                     {
                                                                         Value = i.ID.ToString(),
                                                                         Selected = fsd.TaxGroupID == i.ID,
                                                                         Text = $"{i.Code}-{i.Name}"
                                                                     }).ToList(),
                                                                     TaxRate = fsd.TaxRate,
                                                                     TotalTaxAmount = fsd.TotalTaxAmount
                                                                 }).ToList(),
                              },
                              IncludeVat = ar.IncludeVat,
                              InvoiceNo = $"{docType.Code}-{ar.InvoiceNumber}",
                              InvoiceNumber = ar.InvoiceNumber,
                              LocalCurID = ar.LocalCurID,
                              LocalSetRate = (decimal)ar.LocalSetRate,
                              PostingDate = ar.PostingDate,
                              PriceListID = ar.PriceListID,
                              RefNo = ar.RefNo,
                              Remarks = ar.Remarks,
                              SaleCurrencyID = ar.SaleCurrencyID,
                              SeriesDID = ar.SeriesDID,
                              SeriesID = ar.SeriesID,
                              ID = ar.ID,
                              Status = ar.Status,
                              SubTotal = (decimal)ar.SubTotal,
                              SubTotalAfterDis = ar.SubTotalAfterDis,
                              SubTotalAfterDisSys = ar.SubTotalAfterDisSys,
                              SubTotalBefDis = ar.SubTotalBefDis,
                              SubTotalBefDisSys = ar.SubTotalBefDisSys,
                              SubTotalSys = (decimal)ar.SubTotalSys,
                              TotalAmount = (decimal)ar.TotalAmount,
                              TotalAmountSys = (decimal)ar.TotalAmountSys,
                              TypeDis = ar.TypeDis,
                              UserID = ar.UserID,
                              VatRate = (decimal)ar.VatRate,
                              VatValue = (decimal)ar.VatValue,
                              WarehouseID = ar.WarehouseID,
                              AppliedAmount = (decimal)ar.AppliedAmount,

                          }).ToList();
            var _tg = new TaxGroupViewModel
            {
                ID = 0,
                Name = "- Select --",
                Code = "",
                Rate = 0,
                Type = 0,
            };
            var tgs = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                       let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                       select new TaxGroupViewModel
                       {
                           ID = t.ID,
                           Name = t.Name,
                           Code = t.Code,
                           Effectivefrom = tgds.EffectiveFrom,
                           Rate = tgds.Rate,
                           Type = (int)t.Type,
                       }).ToList();
            tgs.Insert(0, _tg);
            #endregion
            var _sqd = (from sAr in saleAR
                        join sArd in _context.ARReserveInvoiceEditableDetails on sAr.ID equals sArd.ARReserveInvoiceEditableID
                        join item in _context.ItemMasterDatas on sArd.ItemID equals item.ID
                        join cur in _context.Currency on sAr.SaleCurrencyID equals cur.ID
                        select new ARReserveInvoiceDetialViewModel
                        {
                            LineID = string.IsNullOrWhiteSpace(sArd.LineID) ? DateTime.Now.Ticks.ToString() : sArd.LineID,
                            SaleCopyType = sArd.SaleCopyType,
                            FinDisRate = sArd.FinDisRate,
                            FinDisValue = sArd.FinDisValue,
                            FinTotalValue = sArd.FinTotalValue,
                            TaxOfFinDisValue = sArd.TaxOfFinDisValue,
                            ItemCode = sArd.ItemCode,
                            BarCode = item.Barcode,
                            Currency = cur.Description,
                            TotalSys = (decimal)sArd.TotalSys,
                            SQDID = sArd.SQDID,
                            SODID = sArd.SODID,
                            SDDID = sArd.SDDID,
                            ID = sArd.ID,
                            ARReserveInvoiceID = sAr.ID,
                            Cost = (decimal)sArd.Cost,
                            CurrencyID = cur.ID,
                            DisRate = (decimal)sArd.DisRate,
                            DisValue = (decimal)sArd.DisValue,
                            ItemNameEN = item.EnglishName,
                            ItemNameKH = item.KhmerName,
                            GUomID = item.GroupUomID,
                            ItemID = item.ID,
                            Status = sArd.Status,
                            ItemType = item.Type,
                            Process = item.Process,
                            Qty = (decimal)sArd.Qty,
                            Factor = (decimal)sArd.Factor,
                            OpenQty = (decimal)sArd.OpenQty,
                            UnitPrice = (decimal)sArd.UnitPrice,
                            UomName = sArd.UomName,
                            UomID = sArd.UomID,
                            TaxGroupID = sArd.TaxGroupID,
                            TaxRate = sArd.TaxRate,
                            Remarks = sArd.Remarks,
                            PrintQty = sArd.PrintQty,
                            TaxGroupList = tgs.Select(c => new SelectListItem
                            {
                                Value = c.ID.ToString(),
                                Text = $"{c.Code}-{c.Name}",
                                Selected = c.ID == sArd.TaxGroupID
                            }).ToList(),
                            TotalWTax = (decimal)sArd.TotalWTax,
                            TotalWTaxSys = (decimal)sArd.TotalWTaxSys,
                            TaxValue = sArd.TaxValue,
                            Total = (decimal)sArd.Total,
                            /// select List UoM ///
                            UoMs = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                    join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                    select new UOMSViewModel
                                    {
                                        BaseUoMID = GDU.BaseUOM,
                                        Factor = GDU.Factor,
                                        ID = UNM.ID,
                                        Name = UNM.Name
                                    }).Select(c => new SelectListItem
                                    {
                                        Value = c.ID.ToString(),
                                        Text = c.Name,
                                        Selected = c.ID == sArd.UomID
                                    }).ToList(),
                            /// List UoM ///
                            UoMsList = (from GDU in _context.GroupDUoMs.Where(i => i.GroupUoMID == item.GroupUomID)
                                        join UNM in _context.UnitofMeasures on GDU.AltUOM equals UNM.ID
                                        select new UOMSViewModel
                                        {
                                            BaseUoMID = GDU.BaseUOM,
                                            Factor = GDU.Factor,
                                            ID = UNM.ID,
                                            Name = UNM.Name
                                        }).ToList(),
                            TaxGroups = (from t in _context.TaxGroups.Where(i => !i.Delete && i.Active && i.Type == TypeTax.OutPutTax)
                                         let tgds = _context.TaxGroupDefinitions.Where(i => i.TaxGroupID == t.ID).OrderByDescending(i => i.EffectiveFrom).FirstOrDefault() ?? new TaxGroupDefinition()
                                         select new TaxGroupViewModel
                                         {
                                             ID = t.ID,
                                             //GLID = tg.GLID,
                                             Name = t.Name,
                                             Code = t.Code,
                                             Effectivefrom = tgds.EffectiveFrom,
                                             Rate = tgds.Rate,
                                             Type = (int)t.Type,
                                         }
                                         ).ToList(),
                            UomPriceLists = (from pld in _context.PriceListDetails.Where(i => i.ItemID == item.ID && i.PriceListID == sAr.PriceListID)
                                             select new UomPriceList
                                             {
                                                 UoMID = (int)pld.UomID,
                                                 UnitPrice = (decimal)pld.UnitPrice
                                             }
                                             ).ToList(),
                        }).ToList();
            foreach (var i in _sqd)
            {
                i.DisValue = i.DisRate == 0 ? 0 : (i.Qty * i.UnitPrice) * (i.DisRate / 100);
                i.Total = (i.Qty * i.UnitPrice) - i.DisValue;
                i.TotalSys = i.Total * saleAR.FirstOrDefault().ExchangeRate;
                i.TaxValue = i.TaxRate == 0 ? 0 : (i.TaxRate / 100) * i.Total;
                i.FinDisValue = i.FinDisRate == 0 ? 0 : (i.FinDisRate / 100) * i.Total;
                i.FinTotalValue = i.Total - i.FinDisValue;
                i.TaxOfFinDisValue = i.TaxRate == 0 ? 0 : i.FinTotalValue * (i.TaxRate / 100);
                i.TotalWTax = i.Total + i.TaxOfFinDisValue;
                i.TotalWTaxSys = i.TotalWTax * saleAR.FirstOrDefault().ExchangeRate;
            }
            if (saleAR.Count > 0)
            {
                saleAR.FirstOrDefault().SubTotal = _sqd.Sum(i => i.Total);
                saleAR.FirstOrDefault().SubTotalSys = _sqd.Sum(i => i.Total) * saleAR.FirstOrDefault().ExchangeRate;
                saleAR.FirstOrDefault().DisValue = saleAR.FirstOrDefault().DisRate == 0 ? 0 : saleAR.FirstOrDefault().SubTotal * (saleAR.FirstOrDefault().DisRate / 100);
                saleAR.FirstOrDefault().SubTotalAfterDis = saleAR.FirstOrDefault().SubTotal - saleAR.FirstOrDefault().DisValue;
                saleAR.FirstOrDefault().VatValue = _sqd.Sum(i => i.TaxOfFinDisValue) + saleAR.FirstOrDefault().FreightSalesView.FreightSaleDetailViewModels.Sum(i => i.TotalTaxAmount);
                saleAR.FirstOrDefault().TotalAmount = saleAR.FirstOrDefault().FreightAmount + saleAR.FirstOrDefault().VatValue + saleAR.FirstOrDefault().SubTotalAfterDis;
            }
            _dataProp.DataProperty(_sqd, comId, "ItemID", "AddictionProps");
            var data = new ARReserveInvoiceUpdateViewModel
            {
                ARReserveInvoice = saleAR.FirstOrDefault(),
                ARReserveInvoiceDetails = _sqd,
            };
            return data;

        }
        public IEnumerable<dynamic> GetARReserveInvoicCopy(int cusId)
        {
            var data = (from SO in _context.ARReserveInvoices.Where(i => i.Status == "open" && i.CusID == cusId)
                        join docType in _context.DocumentTypes on SO.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => SO.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let SOD = _context.ARReserveInvoiceDetails.Where(i => i.ARReserveInvoiceID == SO.ID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == SO.SaleCurrencyID)
                        select new
                        {
                            SO.ID,
                            SO.CusID,
                            SO.BranchID,
                            SO.WarehouseID,
                            SO.UserID,
                            SO.SaleCurrencyID,
                            SO.CompanyID,
                            SO.DocTypeID,
                            SO.SeriesID,
                            SO.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{SO.InvoiceNumber}",
                            SO.RefNo,
                            InvoiceNo = SO.InvoiceNumber,
                            SO.ExchangeRate,
                            SO.PostingDate,
                            SO.DeliveryDate,
                            SO.DocumentDate,
                            SO.IncludeVat,
                            SO.Status,
                            Currency = cur.Description,
                            SO.SubTotal,
                            SO.TotalAmount,
                            SO.SubTotalSys,
                            SO.DisRate,
                            SO.DisValue,
                            SO.TypeDis,
                            SO.Remarks,
                            SO.VatRate,
                            SO.VatValue,
                            SO.FeeNote,
                            SO.FeeAmount,
                            SO.TotalAmountSys,
                            SO.CopyType,
                            SO.CopyKey,
                            SO.BasedCopyKeys,
                            SO.ChangeLog,
                            SO.PriceListID,
                            SO.LocalCurID,
                            SO.LocalSetRate,
                            SOD,
                            SO.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public ARReserveInvoiceUpdateViewModel GetARReserveInvoiceEDTDetailCopy(string number, int seriesId, int comId, bool memo = false)
        {
            int count1 = 0, count2 = 0;
            var data = FindARReserveInvoiceEDT(number, seriesId, comId);
            data.ARReserveInvoice.FreightSalesView.ID = 0;
            data.ARReserveInvoice.FreightSalesView.FreightSaleDetailViewModels.ToList().ForEach(s =>
            {
                s.ID = 0;
                s.FreightSaleID = 0;
            });
            count1 = data.ARReserveInvoiceDetails.Count;
            data.ARReserveInvoiceDetails = memo == true ? data.ARReserveInvoiceDetails.Where(s => s.PrintQty > 0).ToList() : data.ARReserveInvoiceDetails.Where(s => s.OpenQty > 0).ToList();
            count2 = data.ARReserveInvoiceDetails.Count;
            data.ARReserveInvoice.BasedCopyKeys = "ARReserve Incoice Editable:AREDT-" + data.ARReserveInvoice.InvoiceNumber;

            data.ARReserveInvoiceDetails.ForEach(i =>
            {
                decimal qtycompare = memo == true ? (decimal)i.PrintQty : i.OpenQty;
                if (qtycompare < i.Qty || count1 != count2)
                {
                    data.ARReserveInvoice.FreightSalesView.ID = 0;
                    data.ARReserveInvoice.FreightSalesView.SaleID = 0;
                    data.ARReserveInvoice.FreightSalesView.AmountReven = 0;
                    data.ARReserveInvoice.FreightSalesView.OpenAmountReven = 0;
                    data.ARReserveInvoice.FreightSalesView.TaxSumValue = 0;
                    data.ARReserveInvoice.FreightAmount = 0;
                    data.ARReserveInvoice.FreightAmountSys = 0;
                    data.ARReserveInvoice.FreightAmount = 0;
                    data.ARReserveInvoice.FreightAmountSys = 0;

                    data.ARReserveInvoice.FreightSalesView.FreightSaleDetailViewModels.ToList().ForEach(j =>
                    {
                        j.ID = 0;
                        j.TaxGroupID = 0;
                        j.FreightSaleID = 0;
                        j.TaxRate = 0;
                        j.Amount = 0;
                        j.AmountWithTax = 0;
                        j.TotalTaxAmount = 0;
                        j.TaxGroupSelect.ForEach(k =>
                        {
                            k.Selected = false;
                        });
                    });
                }

            });


            data.ARReserveInvoiceDetails.ForEach(i =>
            {
                i.Qty = memo == true ? (decimal)i.PrintQty : i.OpenQty;
                i.OpenQty = i.Qty;
                i.DisValue = i.DisRate == 0 ? 0 : (i.DisRate / 100) * (i.Qty * i.UnitPrice);
                i.Total = (i.Qty * i.UnitPrice) - i.DisValue;
                i.TotalSys = i.Total * data.ARReserveInvoice.ExchangeRate;

                i.TaxValue = i.TaxRate == 0 ? 0 : i.Total * (i.TaxRate / 100);
                i.TotalWTax = i.Total + i.TaxValue;
                i.TotalWTaxSys = (i.TotalWTax * data.ARReserveInvoice.ExchangeRate);
                i.FinDisValue = i.FinDisRate == 0 ? 0 : (i.FinDisRate / 100) * i.Total;
                i.FinTotalValue = i.Total - i.FinDisValue;
                i.TaxOfFinDisValue = i.TaxRate == 0 ? 0 : i.FinTotalValue * (i.TaxRate / 100);
                i.BaseOnID = i.ID;
                i.CopyType = SaleCopyType.ARReserveInvoiceEDT;
                i.SAREDTDID = i.ID;
                i.ARReDetEDTID = i.ID;
                i.SaleCopyType = SaleCopyType.ARReserveInvoiceEDT;
                i.LineID = i.ID.ToString();
            });
            data.ARReserveInvoice.SubTotal = data.ARReserveInvoiceDetails.Sum(s => s.Total);
            data.ARReserveInvoice.SubTotalSys = data.ARReserveInvoice.ExchangeRate;
            data.ARReserveInvoice.SubTotalBefDis = data.ARReserveInvoice.SubTotal;
            data.ARReserveInvoice.SubTotalBefDisSys = data.ARReserveInvoice.SubTotalSys;
            data.ARReserveInvoice.DisValue = data.ARReserveInvoice.DisRate == 0 ? 0 : (data.ARReserveInvoice.DisRate / 100) * data.ARReserveInvoice.SubTotal;
            data.ARReserveInvoice.SubTotalAfterDis = data.ARReserveInvoice.SubTotal - data.ARReserveInvoice.DisValue;
            data.ARReserveInvoice.SubTotalAfterDisSys = data.ARReserveInvoice.SubTotalAfterDis * data.ARReserveInvoice.ExchangeRate;
            data.ARReserveInvoice.VatValue = data.ARReserveInvoiceDetails.Sum(s => s.TaxOfFinDisValue) + data.ARReserveInvoice.FreightSalesView.FreightSaleDetailViewModels.Sum(s => s.TotalTaxAmount);
            data.ARReserveInvoice.VatRate = data.ARReserveInvoice.VatValue == 0 ? 0 : (data.ARReserveInvoice.VatValue / (data.ARReserveInvoice.SubTotalAfterDis + data.ARReserveInvoice.FreightAmount)) * 100;
            data.ARReserveInvoice.TotalAmount = data.ARReserveInvoice.VatValue + data.ARReserveInvoice.SubTotalAfterDis + data.ARReserveInvoice.FreightAmount;
            data.ARReserveInvoice.AppliedAmount = 0;
            data.ARReserveInvoice.BasedOn = data.ARReserveInvoice.ID;
            return data;

        }
        public IEnumerable<dynamic> GetARReserveInvoicEDTeCopy(int cusId)
        {

            var data = (from SO in _context.ARReserveInvoiceEditables.Where(i => i.Delivery == false && i.CusID == cusId && i.Status == "open")
                        join docType in _context.DocumentTypes on SO.DocTypeID equals docType.ID
                        let sem = _context.Employees.FirstOrDefault(i => SO.SaleEmID == i.ID) ?? new HumanResourcesEmployee()
                        let SOD = _context.ARReserveInvoiceEditableDetails.Where(i => i.ARReserveInvoiceEditableID == SO.ID).ToList()
                        let cur = _context.Currency.FirstOrDefault(i => i.ID == SO.SaleCurrencyID)
                        select new
                        {
                            SO.ID,
                            SO.CusID,
                            SO.BranchID,
                            SO.WarehouseID,
                            SO.UserID,
                            SO.SaleCurrencyID,
                            SO.CompanyID,
                            SO.DocTypeID,
                            SO.SeriesID,
                            SO.SeriesDID,
                            InvoiceNumber = $"{docType.Code}-{SO.InvoiceNumber}",
                            SO.RefNo,
                            InvoiceNo = SO.InvoiceNumber,
                            SO.ExchangeRate,
                            SO.PostingDate,
                            SO.DeliveryDate,
                            SO.DocumentDate,
                            SO.IncludeVat,
                            SO.Status,
                            Currency = cur.Description,
                            SO.SubTotal,
                            SO.TotalAmount,
                            SO.SubTotalSys,
                            SO.DisRate,
                            SO.DisValue,
                            SO.TypeDis,
                            SO.Remarks,
                            SO.VatRate,
                            SO.VatValue,
                            SO.FeeNote,
                            SO.FeeAmount,
                            SO.TotalAmountSys,
                            SO.CopyType,
                            SO.CopyKey,
                            SO.BasedCopyKeys,
                            SO.ChangeLog,
                            SO.PriceListID,
                            SO.LocalCurID,
                            SO.LocalSetRate,
                            SOD,
                            SO.SaleEmID,
                            SaleEmName = sem.Name ?? "",
                        }).ToList();
            return data;
        }
        public void UpdateSourceARReserveInvoiceEDT(int baseonid, List<SaleDeliveryDetail> listdlr)
        {
            listdlr.ForEach(i =>
            {
                if (i.SAREDTDID > 0)
                {
                    var obj = _context.ARReserveInvoiceEditableDetails.FirstOrDefault(s => s.ID == i.SAREDTDID) ?? new ARReserveInvoiceEditableDetail();
                    if (i.Qty > obj.OpenQty)
                    {
                        obj.OpenQty = 0;
                    }
                    else
                    {
                        obj.OpenQty = obj.OpenQty - i.Qty;
                    }
                    obj.DeliveryQty += i.Qty;
                    _context.ARReserveInvoiceEditableDetails.Update(obj);
                    _context.SaveChanges();
                }
            });
            var list = _context.ARReserveInvoiceEditableDetails.Where(s => s.ARReserveInvoiceEditableID == baseonid && s.OpenQty > 0).ToList();
            if (list.Count == 0)
            {
                var obj = _context.ARReserveInvoiceEditables.FirstOrDefault(s => s.ID == baseonid) ?? new ARReserveInvoiceEditable();
                if (obj.ID > 0)
                {
                    if (obj.Paded == true)
                    {
                        obj.Status = "close";
                    }
                    obj.Delivery = true;
                    _context.ARReserveInvoiceEditables.Update(obj);
                    _context.SaveChanges();
                }
            }
        }
        public void CancelARReserveInvoiceEDT(ARReserveInvoiceEditable arrEDT)
        {
            var Order = arrEDT;// _context.ARReserveInvoiceEditables.First(w => w.ID == arredtID);
            var OrderDetails = arrEDT.ARReserveInvoiceEditableDetails;// _context.ARReserveInvoiceEditableDetails.Where(w => w.ARReserveInvoiceEditableID == arredtID).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.SeriesDetails.Find(Order.SeriesDID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            var freight = arrEDT.FreightSalesView;
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.BranchID = Order.BranchID;
                journalEntry.TransNo = Sno;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = defaultJE.Name + " " + Sno;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                decimal accreAmount = (decimal)Order.TotalAmountSys;
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Credit = accreAmount,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                glAcc.Balance += accreAmount;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,
                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Credit = accreAmount,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    Creator = Order.UserID,
                    BPAcctID = Order.CusID,
                    Effective = EffectiveBlance.Credit
                });
                _context.Update(glAcc);
            }
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Debit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Debit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Debit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Debit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Debit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Debit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Debit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Debit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            #region 

            // //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                int revenueAccID = 0;
                decimal revenueAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    revenueAccAmount = (decimal)item.TotalSys;
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    revenueAccAmount = (decimal)item.TotalSys;
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Debit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Debit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Debit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Debit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(taxAcc);
                }
                // Account Revenue
                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                if (glAccRevenfifo.ID > 0)
                {
                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                    if (listRevenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        //journalEntryDetail
                        listRevenfifo.Credit += revenueAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                        accBalance.Credit += revenueAccAmount;
                    }
                    else
                    {
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = revenueAccID,
                            Debit = revenueAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                            CumulativeBalance = glAccRevenfifo.Balance,
                            Debit = revenueAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = revenueAccID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(glAccRevenfifo);
                }
            }
            #endregion
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }
        public void IssuseInStockARReserveInvoiceEDT(ARReserveInvoiceEditable arrEDT, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter)
        {
            var Order = arrEDT;// _context.ARReserveInvoiceEditables.First(w => w.ID == arredtID);
            var OrderDetails = arrEDT.ARReserveInvoiceEditableDetails;// _context.ARReserveInvoiceEditableDetails.Where(w => w.ARReserveInvoiceEditableID == arredtID).ToList();
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.SeriesDetails.Find(Order.SeriesDID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            var freight = arrEDT.FreightSalesView;
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                 journalEntry.BranchID= Order.BranchID;
                journalEntry.TransNo = Sno;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = defaultJE.Name + " " + Sno;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (glAcc.ID > 0)
            {
                decimal accreAmount = (decimal)Order.TotalAmountSys;
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Debit = accreAmount,
                    BPAcctID = Order.CusID,
                });
                //Insert 
                glAcc.Balance += accreAmount;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,
                    PostingDate = Order.PostingDate,
                    Origin = docType.ID,
                    OriginNo = Order.InvoiceNumber,
                    OffsetAccount = glAcc.Code,
                    Details = douTypeID.Name + " - " + glAcc.Code,
                    CumulativeBalance = glAcc.Balance,
                    Debit = accreAmount,
                    LocalSetRate = Order.LocalCurID,
                    GLAID = accountReceive.GLAccID,
                    Creator = Order.UserID,
                    BPAcctID = Order.CusID,
                    Effective = EffectiveBlance.Debit
                });
                _context.Update(glAcc);
            }

            // Tax AR Down Payment //
            var _ards = ards.Where(i => i.Selected).ToList();
            if (_ards.Count > 0)
            {
                foreach (var ard in _ards)
                {
                    if (ard.SaleARDPINCNDetails.Any())
                    {
                        foreach (var i in ard.SaleARDPINCNDetails)
                        {
                            // Tax Account ///
                            var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                            var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                            decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                            if (taxAcc.ID > 0)
                            {
                                var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                if (taxjur.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                    taxAcc.Balance += taxValue;
                                    //journalEntryDetail
                                    taxjur.Debit += taxValue;
                                    //accountBalance
                                    accBalance.CumulativeBalance = taxAcc.Balance;
                                    accBalance.Debit += taxValue;
                                }
                                else
                                {
                                    taxAcc.Balance += taxValue;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = taxAcc.ID,
                                        Debit = taxValue,
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = taxAcc.Code,
                                        Details = douTypeID.Name + " - " + taxAcc.Code,
                                        CumulativeBalance = taxAcc.Balance,
                                        Debit = taxValue,
                                        LocalSetRate = ard.LocalSetRate,
                                        GLAID = taxAcc.ID,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(taxAcc);
                                _context.SaveChanges();
                            }
                        }
                    }

                }
            }
            // Freight //
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            #region 

            // //IssuseInStockSaleAR
            foreach (var item in OrderDetails)
            {
                int revenueAccID = 0;
                decimal revenueAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    revenueAccAmount = (decimal)item.TotalSys;

                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    revenueAccAmount = (decimal)item.TotalSys;

                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }

                // Account Revenue
                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                if (glAccRevenfifo.ID > 0)
                {
                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                    if (listRevenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        //journalEntryDetail
                        listRevenfifo.Credit += revenueAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                        accBalance.Credit += revenueAccAmount;
                    }
                    else
                    {
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = revenueAccID,
                            Credit = revenueAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                            CumulativeBalance = glAccRevenfifo.Balance,
                            Credit = revenueAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = revenueAccID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(glAccRevenfifo);
                }
            }

            #endregion
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }


        public void IssuseInStockARREDT(ARReserveInvoiceEditable arrEDT, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter)
        {
            var ARRH = _context.ARReserveEditableHistories.LastOrDefault(s => s.ARReserveEditableID == arrEDT.ID) ?? new ARReserveEditableHistory();
            var ARRHD = _context.ARReserveEditableDetailHistories.Where(s => s.ARREDTHID == ARRH.ID).ToList();
            SaveHistoryARREDT(arrEDT, ARRHD);// save Story ARREserve Editable
            if (ARRH.ID > 0)
            {
                var fs = _context.FreightSales.FirstOrDefault(i => i.SaleID == arrEDT.ID && i.SaleType == SaleCopyType.ARReserveInvoiceEDT) ?? new FreightSale();
                var listfs = _context.FreightSaleDetails.Where(i => i.FreightSaleID == fs.ID).ToList();
                arrEDT.FreightSalesView.FreightSaleDetails.ToList().ForEach(i =>
                {
                    var fobj = listfs.FirstOrDefault(s => s.ID == i.ID);
                    i.TaxRate = i.TaxRate == fobj.TaxRate ? i.TaxRate : i.TaxRate > fobj.TaxRate ? i.TaxRate - fobj.TaxRate : fobj.TaxRate - i.TaxRate;
                    i.Amount = i.Amount == fobj.Amount ? i.Amount : i.Amount > fobj.Amount ? i.Amount - fobj.Amount : fobj.Amount - i.Amount;
                    i.TotalTaxAmount = i.Amount * (i.TaxRate / 100);
                    i.AmountWithTax = i.Amount + i.TotalTaxAmount;
                });
                arrEDT.FreightSalesView.AmountReven = arrEDT.FreightSalesView.FreightSaleDetails.ToList().Sum(s => s.Amount);
                arrEDT.FreightSalesView.OpenAmountReven = arrEDT.FreightSalesView.AmountReven;
                decimal TaxAmount = arrEDT.FreightSalesView.FreightSaleDetails.ToList().Sum(s => s.TotalTaxAmount);
                arrEDT.FreightSalesView.TaxSumValue = TaxAmount;
                arrEDT.ARReserveInvoiceEditableDetails.ToList().ForEach(i =>
                {
                    var arrh = ARRHD.FirstOrDefault(x => x.ARREDTDID == i.ID);
                    i.Qty = i.Qty == arrh.Qty ? i.Qty : i.Qty > arrh.Qty ? i.Qty - arrh.Qty : arrh.Qty - i.Qty;
                    i.UnitPrice = i.UnitPrice == arrh.UnitPrice ? i.UnitPrice : i.UnitPrice > arrh.UnitPrice ? i.UnitPrice - arrh.UnitPrice : arrh.UnitPrice - i.UnitPrice;
                    i.DisRate = i.DisRate == arrh.DisRate ? i.DisRate : i.DisRate > arrh.DisRate ? i.DisRate - arrh.DisRate : arrh.DisRate - i.DisRate;
                    i.TaxRate = i.TaxRate == arrh.TaxRate ? i.TaxRate : i.TaxRate > arrh.TaxRate ? i.TaxRate - arrh.TaxRate : arrh.TaxRate - i.TaxRate;
                    i.FinDisRate = i.FinDisRate == arrh.FinDisRate ? i.FinDisRate : i.FinDisRate > arrh.FinDisRate ? i.FinDisRate - arrh.FinDisRate : arrh.FinDisRate - i.FinDisRate;
                    // calculate
                    i.DisValue = (i.Qty * i.UnitPrice) * (i.DisRate / 100);
                    i.Total = (i.Qty * i.UnitPrice) - i.DisValue;
                    i.TotalSys = i.Total * arrEDT.ExchangeRate;
                    i.FinDisValue = (decimal)i.Total * (i.FinDisRate / 100);
                    i.TaxValue = (decimal)i.Total * (i.TaxRate / 100);
                    i.TotalWTax = i.Total + (double)i.TaxValue;
                    i.TotalWTaxSys = (i.TotalWTax * arrEDT.ExchangeRate);
                    i.FinTotalValue = (decimal)i.Total - i.FinDisValue;
                    i.TaxOfFinDisValue = i.FinTotalValue * (i.TaxRate / 100);
                });

                arrEDT.SubTotal = arrEDT.ARReserveInvoiceEditableDetails.Sum(s => s.Total);
                arrEDT.SubTotalSys = arrEDT.ExchangeRate;
                arrEDT.SubTotalBefDis = (decimal)arrEDT.SubTotal;
                arrEDT.SubTotalBefDisSys = (decimal)arrEDT.SubTotalSys;
                arrEDT.DisValue = (arrEDT.DisRate / 100) * arrEDT.SubTotal;
                arrEDT.SubTotalAfterDis = (decimal)arrEDT.SubTotal - (decimal)arrEDT.DisValue;
                arrEDT.SubTotalAfterDisSys = arrEDT.SubTotalAfterDis * (decimal)arrEDT.ExchangeRate;
                arrEDT.VatValue = (double)arrEDT.ARReserveInvoiceEditableDetails.Sum(s => s.TaxOfFinDisValue) + (double)TaxAmount;
                arrEDT.VatRate = (arrEDT.VatValue / ((double)arrEDT.SubTotalAfterDis + (double)arrEDT.FreightAmount)) * 100;
                arrEDT.TotalAmount = arrEDT.VatValue + (double)arrEDT.SubTotalAfterDis;

                IssuseInStockARReserveInvoiceEDT(arrEDT, type, ards, saleGlDeter);

            }
            else
            {
                IssuseInStockARReserveInvoiceEDT(arrEDT, type, ards, saleGlDeter);
            }

        }

        public void SaveHistoryARREDT(ARReserveInvoiceEditable arrEDT, List<ARReserveEditableDetailHistory> arrdttH)
        {

            ARReserveEditableHistory obj = new();
            ARReserveEditableDetailHistory list = new();
            // ARReserveEditableDetailHistory list=new ();
            List<ARReserveInvoiceEditableDetail> arreedtDetail, arrdd2 = new List<ARReserveInvoiceEditableDetail>();
            int count = 0;
            count = arrdttH.Count;
            if (count > 0)
            {
                if (arrEDT.ARReserveInvoiceEditableDetails.ToList().Count < count)
                {
                    arreedtDetail = _context.ARReserveInvoiceEditableDetails.Where(s => s.ARReserveInvoiceEditableID == arrEDT.ID).ToList();
                    arrdd2 = arreedtDetail.Where(s => arrEDT.ARReserveInvoiceEditableDetails.Any(x => x.ID != s.ID)).ToList();

                }
                arrEDT.ARReserveInvoiceEditableDetails.ToList().ForEach(i =>
                {
                    var arrh = arrdttH.FirstOrDefault(x => x.ARREDTDID == i.ID) ?? new ARReserveEditableDetailHistory();
                    i.OpenQty = i.Qty == arrh.Qty ? i.Qty : i.Qty - arrh.Qty;
                });
            }

            // var ARRH=_context.ARReserveInvoiceEditableHistories
            obj.ARReserveEditableID = arrEDT.ID;
            obj.CusID = arrEDT.CusID;
            obj.RequestedBy = arrEDT.RequestedBy;
            obj.ShippedBy = arrEDT.ShippedBy;
            // obj.Ship      = arrEDT.ShipTo;
            obj.ReceivedBy = arrEDT.ReceivedBy;
            obj.BaseOnID = arrEDT.BaseOnID;
            obj.BranchID = arrEDT.BranchID;
            obj.WarehouseID = arrEDT.WarehouseID;
            obj.UserID = arrEDT.UserID;
            obj.SaleCurrencyID = arrEDT.SaleCurrencyID;
            obj.CompanyID = arrEDT.CompanyID;
            obj.DocTypeID = arrEDT.DocTypeID;
            obj.SeriesID = arrEDT.SeriesID;
            obj.SeriesDID = arrEDT.SeriesDID;
            obj.InvoiceNumber = arrEDT.InvoiceNumber;
            obj.RefNo = arrEDT.RefNo;
            obj.InvoiceNo = arrEDT.InvoiceNo;
            obj.ExchangeRate = arrEDT.ExchangeRate;
            obj.PostingDate = arrEDT.PostingDate;
            obj.DueDate = arrEDT.DueDate;
            obj.DeliveryDate = arrEDT.DeliveryDate;
            obj.DocumentDate = arrEDT.DocumentDate;
            obj.IncludeVat = arrEDT.IncludeVat;
            obj.Status = arrEDT.Status;
            obj.Remarks = arrEDT.Remarks;
            obj.SubTotalBefDis = arrEDT.SubTotalBefDis;
            obj.SubTotalBefDisSys = arrEDT.SubTotalBefDisSys;
            obj.SubTotalAfterDis = arrEDT.SubTotalAfterDis;
            obj.SubTotalAfterDisSys = arrEDT.SubTotalAfterDisSys;
            obj.FreightAmount = arrEDT.FreightAmount;
            obj.FreightAmountSys = arrEDT.FreightAmountSys;
            obj.DownPayment = arrEDT.DownPayment;
            obj.DownPaymentSys = arrEDT.DownPaymentSys;
            obj.SubTotal = arrEDT.SubTotal;
            obj.SubTotalSys = arrEDT.SubTotalSys;
            obj.DisRate = arrEDT.DisRate;
            obj.DisValue = arrEDT.DisValue;
            obj.TypeDis = arrEDT.TypeDis;
            obj.VatRate = arrEDT.VatRate;
            obj.VatValue = arrEDT.VatValue;
            obj.AppliedAmount = arrEDT.AppliedAmount;
            obj.FeeNote = arrEDT.FeeNote;
            obj.FeeAmount = arrEDT.FeeAmount;
            obj.TotalAmount = arrEDT.TotalAmount;
            obj.TotalAmountSys = arrEDT.TotalAmountSys;
            obj.CopyType = arrEDT.CopyType;
            obj.CopyKey = arrEDT.CopyKey;
            obj.BasedCopyKeys = arrEDT.BasedCopyKeys;
            obj.ChangeLog = arrEDT.ChangeLog;
            obj.PriceListID = arrEDT.PriceListID;
            obj.LocalCurID = arrEDT.LocalCurID;
            obj.LocalSetRate = arrEDT.LocalSetRate;
            obj.SaleEmID = arrEDT.SaleEmID;
            _context.Add(obj);
            _context.SaveChanges();
            // Detail
            foreach (var i in arrEDT.ARReserveInvoiceEditableDetails.ToList())
            {
                list.ARREDTHID = i.ID;
                list.SQDID = i.SQDID;
                list.SODID = i.SODID;
                list.SDDID = i.SDDID;
                list.ItemID = i.ItemID;
                list.TaxGroupID = i.TaxGroupID;
                list.TaxRate = i.TaxRate;
                list.TaxValue = i.TaxValue;
                list.TaxOfFinDisValue = i.TaxOfFinDisValue;
                list.FinTotalValue = i.FinTotalValue;
                list.ItemCode = i.ItemCode;
                list.ItemNameKH = i.ItemNameKH;
                list.ItemNameEN = i.ItemNameEN;
                list.Qty = i.Qty;
                list.OpenQty = i.OpenQty;

                list.PrintQty = i.PrintQty;
                list.GUomID = i.GUomID;
                list.UomID = i.UomID;
                list.UomName = i.UomName;
                list.Factor = i.Factor;
                list.Cost = i.Cost;
                list.UnitPrice = i.UnitPrice;
                list.DisRate = i.DisRate;
                list.DisValue = i.DisValue;
                list.FinDisRate = i.FinDisRate;
                list.FinDisValue = i.FinDisValue;
                list.TypeDis = i.TypeDis;
                list.VatRate = i.VatRate;
                list.VatValue = i.VatValue;
                list.Total = i.Total;
                list.TotalSys = i.TotalSys;
                list.TotalWTax = i.TotalWTax;
                list.TotalWTaxSys = i.TotalWTaxSys;
                list.CurrencyID = i.CurrencyID;
                list.ExpireDate = i.ExpireDate;
                list.ItemType = i.ItemType;
                list.Remarks = i.Remarks;
                list.Delete = i.Delete;
                _context.Add(list);
                _context.SaveChanges();

            }
            // arrEDT.ARReserveInvoiceEditableDetails.ToList().ForEach(i=>{

            //                       });
        }
        #region issuecancelsale ar edit
        public void IssuseCancelSaleArEdit(SaleAREdite saleAredit, List<SerialNumber> serials, List<BatchNo> batches, SaleGLAccountDetermination saleGlDeter)
        {
            var SysCurID = _context.Company.FirstOrDefault(w => !w.Delete).SystemCurrencyID;
            var docType = _context.DocumentTypes.Find(saleAredit.DocTypeID);
            var series = _context.Series.Find(saleAredit.SeriesID);
            List<GLAccount> gLAccounts = _context.GLAccounts.Where(i => i.IsActive).ToList();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID);
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = saleAredit.UserID;
                journalEntry.BranchID= saleAredit.BranchID;
                journalEntry.TransNo = saleAredit.InvoiceNumber;
                journalEntry.PostingDate = saleAredit.PostingDate;
                journalEntry.DocumentDate = saleAredit.DocumentDate;
                journalEntry.DueDate = saleAredit.DueDate;
                journalEntry.SSCID = saleAredit.SaleCurrencyID;
                journalEntry.LLCID = saleAredit.LocalCurID;
                journalEntry.CompanyID = saleAredit.CompanyID;
                journalEntry.LocalSetRate = (decimal)saleAredit.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = series.Name + " " + saleAredit.InvoiceNumber;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            // BP ARDown Payment //
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == saleAredit.CusID) ?? new BusinessPartner();
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            var dpmAcc = _context.GLAccounts.FirstOrDefault(i => i.ID == saleGlDeter.GLID) ?? new GLAccount();

            // Freight //
            if (saleAredit.FreightSalesView != null)
            {
                if (saleAredit.FreightSalesView.FreightSaleDetails.Any())
                {
                    var fsd = saleAredit.FreightSalesView.FreightSaleDetails.Where(i => i.Amount > 0).ToList();
                    foreach (var fr in fsd)
                    {
                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)saleAredit.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance += _framount;
                                //journalEntryDetail
                                frgljur.Debit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Debit += _framount;
                            }
                            else
                            {
                                frgl.Balance += _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Debit = _framount,
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAredit.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAredit.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Debit = _framount,
                                    LocalSetRate = (decimal)saleAredit.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)saleAredit.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance += _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Debit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Debit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance += _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Debit = _frtaxamount,
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAredit.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAredit.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Debit = _frtaxamount,
                                    LocalSetRate = (decimal)saleAredit.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            // BP ARDown Payment //
            decimal dp = saleAredit.DownPayment * (decimal)saleAredit.ExchangeRate;
            if (dpmAcc.ID > 0 && dp > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Credit = dp,
                    BPAcctID = saleAredit.CusID,
                });
                //Insert 
                dpmAcc.Balance -= dp;
                accountBalance.Add(new AccountBalance
                {
                    JEID = journalEntry.ID,
                    PostingDate = saleAredit.PostingDate,
                    Origin = docType.ID,
                    OriginNo = saleAredit.InvoiceNumber,
                    OffsetAccount = dpmAcc.Code,
                    Details = douTypeID.Name + " - " + dpmAcc.Code,
                    CumulativeBalance = dpmAcc.Balance,
                    Credit = dp,
                    LocalSetRate = saleAredit.LocalCurID,
                    GLAID = dpmAcc.ID,
                    Creator = saleAredit.UserID,
                    BPAcctID = saleAredit.CusID,
                    Effective = EffectiveBlance.Credit
                });
                _context.Update(dpmAcc);
            }
            // Tax AR Down Payment //
            if (saleAredit.SaleARDPINCNs.Count > 0)
            {
                foreach (var ard in saleAredit.SaleARDPINCNs)
                {
                    if (ard.SaleARDPINCNDetails.Any())
                    {
                        foreach (var i in ard.SaleARDPINCNDetails)
                        {
                            // Tax Account ///
                            var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                            var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                            decimal taxValue = i.TaxDownPaymentValue * (decimal)saleAredit.ExchangeRate;
                            if (taxAcc.ID > 0)
                            {
                                var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                if (taxjur.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                    taxAcc.Balance -= taxValue;
                                    //journalEntryDetail
                                    taxjur.Credit += taxValue;
                                    //accountBalance
                                    accBalance.CumulativeBalance = taxAcc.Balance;
                                    accBalance.Credit += taxValue;
                                }
                                else
                                {
                                    taxAcc.Balance -= taxValue;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = taxAcc.ID,
                                        Credit = taxValue,
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,
                                        PostingDate = saleAredit.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = saleAredit.InvoiceNumber,
                                        OffsetAccount = taxAcc.Code,
                                        Details = douTypeID.Name + " - " + taxAcc.Code,
                                        CumulativeBalance = taxAcc.Balance,
                                        Credit = taxValue,
                                        LocalSetRate = ard.LocalSetRate,
                                        GLAID = taxAcc.ID,
                                        Effective = EffectiveBlance.Credit
                                    });
                                }
                                _context.Update(taxAcc);
                                _context.SaveChanges();
                            }
                        }
                    }
                    var __ard = _context.ARDownPayments.Find(ard.ARDID) ?? new ARDownPayment();
                    __ard.Status = "close";
                    _context.ARDownPayments.Update(__ard);
                    _context.SaveChanges();
                }
            }
            if (glAcc.ID > 0)
            {
                journalEntryDetail.Add(new JournalEntryDetail
                {
                    JEID = journalEntry.ID,
                    Type = Type.BPCode,
                    ItemID = accountReceive.GLAccID,
                    Credit = (decimal)saleAredit.TotalAmountSys,
                    BPAcctID = saleAredit.CusID,
                });
                //Insert 
                glAcc.Balance -= (decimal)saleAredit.TotalAmountSys;
                accountBalance.Add(
                    new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = saleAredit.PostingDate,
                        Origin = docType.ID,
                        OriginNo = saleAredit.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAcc.Code,
                        CumulativeBalance = glAcc.Balance,
                        Credit = (decimal)saleAredit.TotalAmountSys,
                        LocalSetRate = saleAredit.LocalCurID,
                        GLAID = accountReceive.GLAccID,
                        Creator = saleAredit.UserID,
                        BPAcctID = saleAredit.CusID,
                        Effective = EffectiveBlance.Credit
                    }
                );
                //      
                _context.Update(glAcc);
            }
            //return stock memo
            foreach (var item in saleAredit.SaleAREditeDetails.ToList())
            {
                //update_warehouse_summary && itemmasterdata
                int revenueAccID = 0, inventoryAccID = 0, COGSAccID = 0;
                decimal revenueAccAmount = 0, inventoryAccAmount = 0, COGSAccAmount = 0;
                List<ItemAccounting> itemAccs = new();
                ItemAccounting _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.ItemID == item.ItemID && i.WarehouseID == saleAredit.WarehouseID);
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    itemAccs = _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID).ToList();
                    var revenueAcc = (from ia in itemAccs
                                      join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                    if (saleAredit.DisRate > 0)
                    {
                        //decimal disvalue = (decimal)item.TotalSys * (decimal)saleAredit.DisRate / 100;
                        //revenueAccAmount = (decimal)item.TotalSys - disvalue;
                        decimal disvalue = (decimal)item.Total * (decimal)saleAredit.DisRate / 100;
                        revenueAccAmount = (decimal)item.Total - disvalue;
                    }
                    else
                    {
                        //revenueAccAmount = (decimal)item.TotalSys;
                        revenueAccAmount = (decimal)item.Total;
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID).ToList();
                    var revenueAcc = (from ia in itemAccs
                                      join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    var inventoryAcc = (from ia in itemAccs
                                        join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                        select gl
                                            ).FirstOrDefault() ?? new GLAccount();
                    var COGSAcc = (from ia in itemAccs
                                   join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                   select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    inventoryAccID = inventoryAcc.ID;
                    COGSAccID = COGSAcc.ID;
                    if (saleAredit.DisRate > 0)
                    {
                        decimal disvalue = (decimal)item.Total * (decimal)saleAredit.DisRate / 100;
                        revenueAccAmount = (decimal)item.Total - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = (decimal)item.Total;
                    }
                }
                if (itemMaster.Process != "Standard")
                {
                    var warehouseSummary = _context.WarehouseSummary
                        .FirstOrDefault(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                    double @Qty = item.Qty * item.Factor;
                    double @Cost = 0;
                    warehouseSummary.InStock += @Qty;
                    itemMaster.StockIn += @Qty;
                    _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                    if (itemMaster.ManItemBy == ManageItemBy.SerialNumbers)
                    {
                        if (serials.Count > 0)
                        {
                            foreach (var s in serials)
                            {
                                if (s.SerialNumberSelected != null)
                                {
                                    foreach (var ss in s.SerialNumberSelected.SerialNumberSelectedDetails)
                                    {
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        StockOut waredetial = _context.StockOuts
                                        .FirstOrDefault(i =>
                                        i.ItemID == item.ItemID
                                        && ss.SerialNumber == i.SerialNumber
                                        && i.InStock > 0 && i.TransType == TransTypeWD.AR_Edit);
                                        if (waredetial != null)
                                        {
                                            waredetial.InStock -= 1;
                                            @Cost = (double)waredetial.Cost;
                                            // insert to warehouse detail
                                            var ware = new WarehouseDetail
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (double)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = 1,
                                                ItemID = waredetial.ItemID,
                                                Location = waredetial.Location,
                                                LotNumber = waredetial.LotNumber,
                                                MfrDate = waredetial.MfrDate,
                                                MfrSerialNumber = waredetial.MfrSerialNumber,
                                                MfrWarDateEnd = waredetial.MfrWarDateEnd,
                                                MfrWarDateStart = waredetial.MfrWarDateStart,
                                                ProcessItem = ProcessItem.SEBA,
                                                SerialNumber = waredetial.SerialNumber,
                                                PlateNumber = waredetial.PlateNumber,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saleAredit.UserID,
                                                ExpireDate = item.ExpireDate,
                                                TransType = TransTypeWD.AR_Edit,
                                                InStockFrom = saleAredit.SARID,
                                                IsDeleted = true,
                                                BPID = saleAredit.CusID
                                            };
                                            _inventoryAccAmount = waredetial.Cost;
                                            _COGSAccAmount = waredetial.Cost;
                                            _context.WarehouseDetails.Add(ware);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialCancelSaleAREdit(
                                            revenueAccID, inventoryAccID, COGSAccID, journalEntryDetail,
                                            accountBalance, revenueAccAmount, _inventoryAccAmount, _COGSAccAmount,
                                            journalEntry, saleAredit, docType, douTypeID, glAcc
                                        );
                                    }
                                }
                            }
                            // Insert to Inventory Audit
                            var inventory_audit = _context.InventoryAudits
                                .Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                            var inventory = new InventoryAudit
                            {
                                ID = 0,
                                LineID = item.LineID,
                                TypeItem = SaleCopyType.SaleAREdite.ToString(),
                                WarehouseID = saleAredit.WarehouseID,
                                BranchID = saleAredit.BranchID,
                                UserID = saleAredit.UserID,
                                ItemID = item.ItemID,
                                CurrencyID = saleAredit.SaleCurrencyID,
                                UomID = baseUOM.BaseUOM,
                                InvoiceNo = saleAredit.InvoiceNumber,
                                Trans_Type = docType.Code,
                                Process = itemMaster.Process,
                                SystemDate = DateTime.Now,
                                PostingDate = saleAredit.PostingDate,
                                TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                Qty = @Qty,
                                Cost = @Cost,
                                Price = 0,
                                CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty,
                                CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + @Qty * @Cost,
                                Trans_Valuse = @Cost * @Qty,
                                ExpireDate = item.ExpireDate,
                                LocalCurID = saleAredit.LocalCurID,
                                LocalSetRate = (double)saleAredit.LocalSetRate,
                                CompanyID = saleAredit.CompanyID,
                                DocumentTypeID = docType.ID,
                                SeriesID = saleAredit.SeriesID,
                                SeriesDetailID = saleAredit.SeriesDID,
                            };
                            _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                            _context.InventoryAudits.Add(inventory);
                            _context.SaveChanges();
                        }
                    }
                    else if (itemMaster.ManItemBy == ManageItemBy.Batches)
                    {
                        if (batches.Count > 0)
                        {
                            foreach (var b in batches)
                            {
                                if (b.BatchNoSelected != null)
                                {
                                    foreach (var sb in b.BatchNoSelected.BatchNoSelectedDetails)
                                    {
                                        var waredetial = _context.StockOuts
                                            .FirstOrDefault(i =>
                                            i.ItemID == item.ItemID
                                            && sb.BatchNo == i.BatchNo
                                            && i.TransType == TransTypeWD.AR && i.InStock > 0);
                                        decimal _inventoryAccAmount = 0M;
                                        decimal _COGSAccAmount = 0M;
                                        if (waredetial != null)
                                        {
                                            decimal selectedQty = sb.SelectedQty * (decimal)item.Factor;
                                            waredetial.InStock -= selectedQty;
                                            @Cost = (double)waredetial.Cost;
                                            _context.SaveChanges();

                                            // insert to waredetial
                                            var ware = new WarehouseDetail
                                            {
                                                AdmissionDate = waredetial.AdmissionDate,
                                                Cost = (double)waredetial.Cost,
                                                CurrencyID = waredetial.CurrencyID,
                                                Details = waredetial.Details,
                                                ID = 0,
                                                InStock = (double)selectedQty,
                                                ItemID = item.ItemID,
                                                Location = waredetial.Location,
                                                MfrDate = waredetial.MfrDate,
                                                ProcessItem = ProcessItem.SEBA,
                                                SyetemDate = DateTime.Now,
                                                SysNum = 0,
                                                TimeIn = DateTime.Now,
                                                WarehouseID = waredetial.WarehouseID,
                                                UomID = item.UomID,
                                                UserID = saleAredit.UserID,
                                                ExpireDate = item.ExpireDate,
                                                BatchAttr1 = waredetial.BatchAttr1,
                                                BatchAttr2 = waredetial.BatchAttr2,
                                                BatchNo = waredetial.BatchNo,
                                                TransType = TransTypeWD.AR_Edit,
                                                InStockFrom = saleAredit.SARID,
                                                IsDeleted = true,
                                                BPID = saleAredit.CusID
                                            };

                                            _inventoryAccAmount = waredetial.Cost * selectedQty;
                                            _COGSAccAmount = waredetial.Cost * selectedQty;
                                            _context.WarehouseDetails.Add(ware);
                                            _context.SaveChanges();
                                        }
                                        InsertFinancialCancelSaleAREdit(
                                            revenueAccID, inventoryAccID, COGSAccID, journalEntryDetail,
                                            accountBalance, revenueAccAmount, _inventoryAccAmount, _COGSAccAmount,
                                            journalEntry, saleAredit, docType, douTypeID, glAcc
                                        );
                                    }
                                }
                            }
                            // insert to inventory audit
                            var inventory_audit = _context.InventoryAudits
                                .Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                            var inventory = new InventoryAudit
                            {
                                ID = 0,
                                LineID = item.LineID,
                                TypeItem = SaleCopyType.SaleAREdite.ToString(),
                                WarehouseID = saleAredit.WarehouseID,
                                BranchID = saleAredit.BranchID,
                                UserID = saleAredit.UserID,
                                ItemID = item.ItemID,
                                CurrencyID = saleAredit.SaleCurrencyID,
                                UomID = baseUOM.BaseUOM,
                                InvoiceNo = saleAredit.InvoiceNumber,
                                Trans_Type = docType.Code,
                                Process = itemMaster.Process,
                                SystemDate = DateTime.Now,
                                PostingDate = saleAredit.PostingDate,
                                TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                                Qty = @Qty,
                                Cost = @Cost,
                                Price = 0,
                                CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty,
                                CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost),
                                Trans_Valuse = @Qty * @Cost,
                                ExpireDate = item.ExpireDate,
                                LocalCurID = saleAredit.LocalCurID,
                                LocalSetRate = (double)saleAredit.LocalSetRate,
                                CompanyID = saleAredit.CompanyID,
                                DocumentTypeID = docType.ID,
                                SeriesID = saleAredit.SeriesID,
                                SeriesDetailID = saleAredit.SeriesDID,
                            };
                            _utility.CumulativeValue(inventory.WarehouseID, inventory.ItemID, inventory.CumulativeValue, _itemAcc);
                            _context.InventoryAudits.Add(inventory);
                            _context.SaveChanges();
                        }
                    }
                    else
                    {

                        //insert_warehousedetail
                        var inventoryAudit = new InventoryAudit();
                        var warehouseDetail = new WarehouseDetail();
                        warehouseDetail.WarehouseID = saleAredit.WarehouseID;
                        warehouseDetail.UomID = item.UomID;
                        warehouseDetail.UserID = saleAredit.UserID;
                        warehouseDetail.SyetemDate = saleAredit.PostingDate;
                        warehouseDetail.TimeIn = DateTime.Now;
                        warehouseDetail.InStock = @Qty;
                        warehouseDetail.CurrencyID = SysCurID;
                        warehouseDetail.ItemID = item.ItemID;
                        warehouseDetail.Cost = @Cost;
                        warehouseDetail.ExpireDate = item.ExpireDate;
                        warehouseDetail.IsDeleted = true;
                        warehouseDetail.TransType = TransTypeWD.AR_Edit;
                        warehouseDetail.InStockFrom = saleAredit.SARID;
                        warehouseDetail.BPID = saleAredit.CusID;
                        if (itemMaster.Process == "FIFO")
                        {
                            var ware = _context.WarehouseDetails.FirstOrDefault(i => i.ItemID == item.ItemID && i.WarehouseID == saleAredit.WarehouseID && i.Cost > 0) ?? new WarehouseDetail();
                            @Cost = ware.Cost;
                            warehouseDetail.Cost = ware.Cost;
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                            inventoryAudit.WarehouseID = saleAredit.WarehouseID;
                            inventoryAudit.BranchID = saleAredit.BranchID;
                            inventoryAudit.UserID = saleAredit.UserID;
                            inventoryAudit.ItemID = item.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item.UomID;
                            inventoryAudit.InvoiceNo = saleAredit.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = itemMaster.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAredit.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @Cost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost);
                            inventoryAudit.Trans_Valuse = @Qty * @Cost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAredit.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAredit.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAredit.SeriesDID;
                            inventoryAudit.SeriesID = saleAredit.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAredit.DocTypeID;
                            inventoryAudit.CompanyID = saleAredit.CompanyID;
                            inventoryAccAmount += (decimal)(inventoryAudit.Cost * @Qty);
                            COGSAccAmount += (decimal)(inventoryAudit.Cost * @Qty);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        else if (itemMaster.Process == "Average")
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                            InventoryAudit avgInventory = new() { Qty = Qty, Cost = @Cost };
                            double @AvgCost = _utility.CalAVGCost(item.ItemID, saleAredit.WarehouseID, avgInventory);
                            warehouseDetail.Cost = @AvgCost;
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                            inventoryAudit.WarehouseID = saleAredit.WarehouseID;
                            inventoryAudit.BranchID = saleAredit.BranchID;
                            inventoryAudit.UserID = saleAredit.UserID;
                            inventoryAudit.ItemID = item.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item.UomID;
                            inventoryAudit.InvoiceNo = saleAredit.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = itemMaster.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAredit.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @AvgCost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = (inventory_audit.Sum(q => q.Qty)) + (@Qty);
                            inventoryAudit.CumulativeValue = (inventory_audit.Sum(s => s.Trans_Valuse)) + (@Qty * @AvgCost);
                            inventoryAudit.Trans_Valuse = @Qty * @AvgCost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAredit.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAredit.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAredit.SeriesDID;
                            inventoryAudit.SeriesID = saleAredit.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAredit.DocTypeID;
                            inventoryAudit.CompanyID = saleAredit.CompanyID;
                            double InvCost = _utility.CalAVGCost(item.ItemID, saleAredit.WarehouseID, inventoryAudit);
                            inventoryAccAmount += (decimal)(InvCost * @Qty);
                            COGSAccAmount += (decimal)(InvCost * @Qty);
                            _utility.UpdateAvgCost(item.ItemID, saleAredit.WarehouseID, item.GUomID, @Qty, @AvgCost);
                            _utility.UpdateBomCost(item.ItemID, @Qty, @AvgCost);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        _context.InventoryAudits.Update(inventoryAudit);
                        _context.WarehouseDetails.Update(warehouseDetail);
                    }
                    _context.WarehouseSummary.Update(warehouseSummary);
                    _context.ItemMasterDatas.Update(itemMaster);
                }
                else
                {
                    var priceListDetail = _context.PriceListDetails.FirstOrDefault(w => w.ItemID == item.ItemID && w.UomID == item.UomID && w.PriceListID == saleAredit.PriceListID) ?? new PriceListDetail();
                    inventoryAccAmount += (decimal)(priceListDetail.Cost * item.Qty * saleAredit.ExchangeRate);
                    COGSAccAmount += (decimal)(priceListDetail.Cost * item.Qty * saleAredit.ExchangeRate);
                    var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                    InventoryAudit item_inventory_audit = new()
                    {
                        ID = 0,
                        LineID = item.LineID,
                        TypeItem = SaleCopyType.SaleAREdite.ToString(),
                        WarehouseID = saleAredit.WarehouseID,
                        BranchID = saleAredit.BranchID,
                        UserID = saleAredit.UserID,
                        ItemID = item.ItemID,
                        CurrencyID = SysCurID,
                        UomID = baseUOM.BaseUOM,
                        InvoiceNo = saleAredit.InvoiceNumber,
                        Trans_Type = docType.Code,
                        Process = itemMaster.Process,
                        SystemDate = DateTime.Now,
                        PostingDate = saleAredit.PostingDate,
                        TimeIn = DateTime.Now.ToShortTimeString().ToString(),
                        Qty = item.Qty,
                        Cost = priceListDetail.Cost,
                        Price = 0,
                        CumulativeQty = inventory_audit.Sum(q => q.Qty) + item.Qty,
                        CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (item.Qty * priceListDetail.Cost),
                        Trans_Valuse = item.Qty * priceListDetail.Cost,
                        LocalCurID = saleAredit.LocalCurID,
                        LocalSetRate = saleAredit.LocalSetRate,
                        SeriesDetailID = saleAredit.SeriesDID,
                        SeriesID = saleAredit.SeriesID,
                        DocumentTypeID = saleAredit.DocTypeID,
                        CompanyID = saleAredit.CompanyID,
                    };
                    _context.InventoryAudits.Update(item_inventory_audit);
                    _context.SaveChanges();
                }

                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)saleAredit.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance += taxValue;
                        //journalEntryDetail
                        taxjur.Debit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Debit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance += taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Debit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = saleAredit.PostingDate,
                            Origin = docType.ID,
                            OriginNo = saleAredit.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Debit = taxValue,
                            LocalSetRate = (decimal)saleAredit.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(taxAcc);
                }

                if (itemMaster.ManItemBy == ManageItemBy.None)
                {
                    InsertFinancialCancelSaleAREdit(
                        revenueAccID, inventoryAccID, COGSAccID, journalEntryDetail, accountBalance,
                        revenueAccAmount, inventoryAccAmount, COGSAccAmount, journalEntry, saleAredit,
                        docType, douTypeID, glAcc
                    );
                }
            }
            //returm_stock_memo_bom
            foreach (var item in saleAredit.SaleAREditeDetails.ToList())
            {
                var itemM = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var orft = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == itemM.GroupUomID && w.AltUOM == item.UomID);
                var bom = _context.BOMaterial.FirstOrDefault(w => w.ItemID == item.ItemID) ?? new BOMaterial();
                var items_material = (from bomd in _context.BOMDetail.Where(w => w.BID == bom.BID && w.Detele == false)
                                      join i in _context.ItemMasterDatas on bomd.ItemID equals i.ID
                                      join gd in _context.GroupDUoMs on bomd.UomID equals gd.AltUOM
                                      join uom in _context.UnitofMeasures on i.InventoryUoMID equals uom.ID
                                      select new
                                      {
                                          bomd.ItemID,
                                          gd.GroupUoMID,
                                          GUoMID = i.GroupUomID,
                                          Qty = (double)(item.Qty * orft.Factor * bomd.Qty * gd.Factor),
                                          bomd.NegativeStock,
                                          i.Process,
                                          UomID = uom.ID,
                                          gd.Factor
                                      }).Where(w => w.GroupUoMID == w.GUoMID).ToList();
                if (items_material != null)
                {
                    foreach (var item_cancel in items_material.ToList())
                    {
                        //update_warehouse_summary && itemmasterdata
                        var warehouseSummary = _context.WarehouseSummary.FirstOrDefault(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                        var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item_cancel.ItemID);
                        List<ItemAccounting> itemAccs = new();
                        ItemAccounting _itemAcc = _context.ItemAccountings.FirstOrDefault(i => i.ItemID == item.ItemID && i.WarehouseID == saleAredit.WarehouseID);
                        double @Qty = item_cancel.Qty;
                        double @Cost = 0;
                        warehouseSummary.InStock += @Qty;
                        itemMaster.StockIn += @Qty;
                        _utility.UpdateItemAccounting(_itemAcc, warehouseSummary);
                        int revenueAccIDAvg = 0, inventoryAccIDAvg = 0, COGSAccIDAvg = 0;
                        decimal revenueAccAmountAvg = 0, inventoryAccAmountAvg = 0, COGSAccAmountAvg = 0;
                        var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item_cancel.GUoMID);
                        if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                        {
                            itemAccs = _context.ItemAccountings.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAredit.WarehouseID).ToList();
                            var revenueAcc = (from ia in itemAccs
                                              join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in itemAccs
                                                join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in itemAccs
                                           join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            COGSAccIDAvg = COGSAcc.ID;
                            revenueAccIDAvg = revenueAcc.ID;
                            inventoryAccIDAvg = inventoryAcc.ID;
                        }
                        else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                        {
                            itemAccs = _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID).ToList();
                            var revenueAcc = (from ia in itemAccs
                                              join gl in gLAccounts on ia.RevenueAccount equals gl.Code
                                              select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            var inventoryAcc = (from ia in itemAccs
                                                join gl in gLAccounts on ia.InventoryAccount equals gl.Code
                                                select gl
                                                    ).FirstOrDefault() ?? new GLAccount();
                            var COGSAcc = (from ia in itemAccs
                                           join gl in gLAccounts on ia.CostofGoodsSoldAccount equals gl.Code
                                           select gl
                                                ).FirstOrDefault() ?? new GLAccount();
                            COGSAccIDAvg = COGSAcc.ID;
                            revenueAccIDAvg = revenueAcc.ID;
                            inventoryAccIDAvg = inventoryAcc.ID;
                        }
                        //insert_warehousedetail
                        var inventoryAudit = new InventoryAudit();
                        var warehouseDetail = new WarehouseDetail();
                        warehouseDetail.WarehouseID = saleAredit.WarehouseID;
                        warehouseDetail.UomID = item_cancel.UomID;
                        warehouseDetail.UserID = saleAredit.UserID;
                        warehouseDetail.SyetemDate = saleAredit.PostingDate;
                        warehouseDetail.TimeIn = DateTime.Now;
                        warehouseDetail.InStock = @Qty;
                        warehouseDetail.CurrencyID = SysCurID;
                        warehouseDetail.ItemID = item_cancel.ItemID;
                        warehouseDetail.Cost = @Cost;
                        warehouseDetail.ExpireDate = item.ExpireDate;
                        warehouseDetail.InStockFrom = saleAredit.SARID;
                        warehouseDetail.IsDeleted = true;
                        warehouseDetail.TransType = TransTypeWD.AR_Edit;
                        if (itemMaster.Process == "FIFO")
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                            inventoryAudit.WarehouseID = saleAredit.WarehouseID;
                            inventoryAudit.BranchID = saleAredit.BranchID;
                            inventoryAudit.UserID = saleAredit.UserID;
                            inventoryAudit.ItemID = item_cancel.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item_cancel.UomID;
                            inventoryAudit.InvoiceNo = saleAredit.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = item_cancel.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAredit.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @Cost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @Cost);
                            inventoryAudit.Trans_Valuse = @Qty * @Cost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAredit.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAredit.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAredit.SeriesDID;
                            inventoryAudit.SeriesID = saleAredit.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAredit.DocTypeID;
                            inventoryAudit.CompanyID = saleAredit.CompanyID;
                            inventoryAccAmountAvg += (decimal)inventoryAudit.Cost * (decimal)@Qty;
                            COGSAccAmountAvg += (decimal)inventoryAudit.Cost * (decimal)@Qty;
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        else
                        {
                            var inventory_audit = _context.InventoryAudits.Where(w => w.ItemID == item_cancel.ItemID && w.WarehouseID == saleAredit.WarehouseID);
                            InventoryAudit avgInventory = new() { Qty = Qty, Cost = @Cost };
                            double @AvgCost = _utility.CalAVGCost(item_cancel.ItemID, saleAredit.WarehouseID, avgInventory);
                            inventoryAudit.ID = 0;
                            inventoryAudit.LineID = item.LineID;
                            inventoryAudit.TypeItem = SaleCopyType.SaleAREdite.ToString();
                            inventoryAudit.WarehouseID = saleAredit.WarehouseID;
                            inventoryAudit.BranchID = saleAredit.BranchID;
                            inventoryAudit.UserID = saleAredit.UserID;
                            inventoryAudit.ItemID = item_cancel.ItemID;
                            inventoryAudit.CurrencyID = SysCurID;
                            inventoryAudit.UomID = item_cancel.UomID;
                            inventoryAudit.InvoiceNo = saleAredit.InvoiceNumber;
                            inventoryAudit.Trans_Type = docType.Code;
                            inventoryAudit.Process = item_cancel.Process;
                            inventoryAudit.SystemDate = DateTime.Now;
                            inventoryAudit.PostingDate = saleAredit.PostingDate;
                            inventoryAudit.TimeIn = DateTime.Now.ToShortTimeString();
                            inventoryAudit.Qty = @Qty;
                            inventoryAudit.Cost = @AvgCost;
                            inventoryAudit.Price = 0;
                            inventoryAudit.CumulativeQty = inventory_audit.Sum(q => q.Qty) + @Qty;
                            inventoryAudit.CumulativeValue = inventory_audit.Sum(s => s.Trans_Valuse) + (@Qty * @AvgCost);
                            inventoryAudit.Trans_Valuse = @Qty * @AvgCost;
                            inventoryAudit.ExpireDate = item.ExpireDate;
                            inventoryAudit.LocalCurID = saleAredit.LocalCurID;
                            inventoryAudit.LocalSetRate = saleAredit.LocalSetRate;
                            inventoryAudit.SeriesDetailID = saleAredit.SeriesDID;
                            inventoryAudit.SeriesID = saleAredit.SeriesID;
                            inventoryAudit.DocumentTypeID = saleAredit.DocTypeID;
                            inventoryAudit.CompanyID = saleAredit.CompanyID;
                            inventoryAccAmountAvg += (decimal)inventoryAudit.Cost;
                            double InvCost = _utility.CalAVGCost(item.ItemID, saleAredit.WarehouseID, inventoryAudit);
                            COGSAccAmountAvg += (decimal)InvCost * (decimal)@Qty;
                            _utility.UpdateAvgCost(item_cancel.ItemID, saleAredit.WarehouseID, item.GUomID, @Qty, @AvgCost);
                            _utility.UpdateBomCost(item_cancel.ItemID, @Qty, @AvgCost);
                            _utility.CumulativeValue(inventoryAudit.WarehouseID, inventoryAudit.ItemID, inventoryAudit.CumulativeValue, _itemAcc);
                        }
                        _context.InventoryAudits.Update(inventoryAudit);
                        _context.WarehouseSummary.Update(warehouseSummary);
                        _context.ItemMasterDatas.Update(itemMaster);
                        _context.WarehouseDetails.Update(warehouseDetail);

                        // Account Revenue
                        var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccIDAvg) ?? new GLAccount();
                        if (glAccRevenfifo.ID > 0)
                        {
                            var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                            if (listRevenfifo.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccIDAvg);
                                glAccRevenfifo.Balance += revenueAccAmountAvg;
                                //journalEntryDetail
                                listRevenfifo.Debit += revenueAccAmountAvg;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                                accBalance.Debit += revenueAccAmountAvg;
                            }
                            else
                            {
                                glAccRevenfifo.Balance += revenueAccAmountAvg;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.BPCode,
                                    ItemID = revenueAccIDAvg,
                                    Debit = revenueAccAmountAvg,
                                    BPAcctID = saleAredit.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAredit.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAredit.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                                    CumulativeBalance = glAccRevenfifo.Balance,
                                    Debit = revenueAccAmountAvg,
                                    LocalSetRate = (decimal)saleAredit.LocalSetRate,
                                    GLAID = revenueAccIDAvg,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                        }
                        //inventoryAccID
                        var glAccInvenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == inventoryAccIDAvg) ?? new GLAccount();
                        if (glAccInvenfifo.ID > 0)
                        {
                            var listInvenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccInvenfifo.ID) ?? new JournalEntryDetail();
                            if (listInvenfifo.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == inventoryAccIDAvg);
                                glAccInvenfifo.Balance += inventoryAccAmountAvg;
                                //journalEntryDetail
                                listInvenfifo.Debit += inventoryAccAmountAvg;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccInvenfifo.Balance;
                                accBalance.Debit += inventoryAccAmountAvg;
                            }
                            else
                            {
                                glAccInvenfifo.Balance += inventoryAccAmountAvg;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.BPCode,
                                    ItemID = inventoryAccIDAvg,
                                    Debit = inventoryAccAmountAvg,
                                    BPAcctID = saleAredit.CusID
                                });

                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAredit.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAredit.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccInvenfifo.Code,
                                    CumulativeBalance = glAccInvenfifo.Balance,
                                    Debit = inventoryAccAmountAvg,
                                    LocalSetRate = (decimal)saleAredit.LocalSetRate,
                                    GLAID = inventoryAccIDAvg,
                                    Effective = EffectiveBlance.Debit
                                });
                            }
                        }
                        // COGS
                        var glAccCOGSfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == COGSAccIDAvg) ?? new GLAccount();
                        if (glAccCOGSfifo.ID > 0)
                        {
                            var list = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccCOGSfifo.ID) ?? new JournalEntryDetail();
                            if (list.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == COGSAccIDAvg);
                                glAccCOGSfifo.Balance -= COGSAccAmountAvg;
                                //journalEntryDetail
                                list.Credit += COGSAccAmountAvg;
                                //accountBalance
                                accBalance.CumulativeBalance = glAccCOGSfifo.Balance;
                                accBalance.Credit += COGSAccAmountAvg;
                            }
                            else
                            {
                                glAccCOGSfifo.Balance -= COGSAccAmountAvg;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.BPCode,
                                    ItemID = COGSAccIDAvg,
                                    Credit = COGSAccAmountAvg,
                                    BPAcctID = saleAredit.CusID
                                });
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,
                                    PostingDate = saleAredit.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = saleAredit.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + glAccCOGSfifo.Code,
                                    CumulativeBalance = glAccCOGSfifo.Balance,
                                    Credit = COGSAccAmountAvg,
                                    LocalSetRate = (decimal)saleAredit.LocalSetRate,
                                    GLAID = COGSAccIDAvg,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                        }
                        _context.Update(glAccRevenfifo);
                        _context.Update(glAccInvenfifo);
                        _context.Update(glAccCOGSfifo);
                        _context.SaveChanges();
                    }
                }

            }
            var journal = _context.JournalEntries.Find(journalEntry.ID);
            journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
            journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
            _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
            _context.AccountBalances.UpdateRange(accountBalance);
            _context.SaveChanges();
        }

        #endregion
        public void IssuseInStockARReserveInvoiceEDTOld(ARReserveInvoiceEditable arrEDT, string type, List<SaleARDPINCN> ards, SaleGLAccountDetermination saleGlDeter)
        {
            var Order = arrEDT;
            var OrderDetails = arrEDT.ARReserveInvoiceEditableDetails;
            var Com = _context.Company.FirstOrDefault(c => !c.Delete && c.ID == Order.CompanyID);
            var docType = _context.DocumentTypes.Find(Order.DocTypeID);
            var series = _context.Series.Find(Order.SeriesID);
            var warehouse = _context.Warehouses.Find(Order.WarehouseID) ?? new Warehouse();
            var arEHistory = _context.ARReserveEditableHistories.LastOrDefault(w => w.ARReserveEditableID == arrEDT.ID);
            var arEDetailHistory = _context.ARReserveEditableDetailHistories.Where(w => w.ARREDTHID == arEHistory.ID);
            Order.UserID = arrEDT.UserID;
            Order.SubTotalBefDis = arrEDT.SubTotalBefDis;
            Order.SubTotalBefDisSys = arrEDT.SubTotalBefDisSys;
            Order.SubTotalAfterDis = arrEDT.SubTotalAfterDis;
            Order.SubTotalAfterDisSys = arrEDT.SubTotalAfterDisSys;
            Order.SubTotal = arrEDT.SubTotal;
            Order.SubTotalSys = arrEDT.SubTotalSys;
            Order.DisRate = arrEDT.DisRate;
            Order.DisValue = arrEDT.DisValue;
            Order.TypeDis = arrEDT.TypeDis;
            Order.TotalAmountSys = arrEDT.TotalAmountSys;
            Order.TotalAmount = arrEDT.TotalAmount;
            Order.SaleEmID = arrEDT.SaleEmID;
            // Order.ShipTo = saleAR.ShipTo;
            Order.RefNo = arrEDT.RefNo;
            List<ARReserveEditableDetailHistory> SaleAREditeDetailHistory = new();
            // List<JournalEntryDetail> journalEntryDetail = new();
            List<AccountBalance> accountBalance = new();
            JournalEntry journalEntry = new();
            SeriesDetail seriesDetail = new();
            foreach (var ard in arEDetailHistory)
            {
                var aredNew = arrEDT.ARReserveInvoiceEditableDetails.FirstOrDefault(w => w.ItemID == ard.ItemID) ?? new ARReserveInvoiceEditableDetail();
                if (aredNew.ID != 0 && !aredNew.Delete)
                {
                    SaleAREditeDetailHistory.Add(new ARReserveEditableDetailHistory
                    {
                        ItemID = aredNew.ItemID,
                        TaxGroupID = aredNew.TaxGroupID,
                        TaxRate = aredNew.TaxRate,
                        TaxValue = aredNew.TaxValue - ard.TaxValue,
                        GUomID = aredNew.GUomID,
                        UomID = aredNew.UomID,
                        Factor = aredNew.Factor,
                        DisRate = aredNew.DisRate,
                        DisValue = aredNew.DisValue,
                        TotalSys = aredNew.TotalSys - ard.TotalSys,
                    });
                }
                else if (aredNew.ID != 0 && aredNew.Delete)
                {
                    SaleAREditeDetailHistory.Add(new ARReserveEditableDetailHistory
                    {
                        ItemID = aredNew.ItemID,
                        TaxGroupID = aredNew.TaxGroupID,
                        TaxRate = aredNew.TaxRate,
                        TaxValue = aredNew.TaxValue * -1,
                        GUomID = aredNew.GUomID,
                        UomID = aredNew.UomID,
                        Factor = aredNew.Factor,
                        DisRate = aredNew.DisRate,
                        DisValue = aredNew.DisValue,
                        TotalSys = aredNew.TotalSys * -1,
                    });
                }
            }
            foreach (var ardNew in arrEDT.ARReserveInvoiceEditableDetails.Where(w => w.Status == AREDetailStatus.New))
            {
                SaleAREditeDetailHistory.Add(new ARReserveEditableDetailHistory
                {
                    ItemID = ardNew.ItemID,
                    TaxGroupID = ardNew.TaxGroupID,
                    TaxRate = ardNew.TaxRate,
                    TaxValue = ardNew.TaxValue,
                    GUomID = ardNew.GUomID,
                    UomID = ardNew.UomID,
                    Factor = ardNew.Factor,
                    DisRate = ardNew.DisRate,
                    DisValue = ardNew.DisValue,
                    TotalSys = ardNew.TotalSys,
                });
            }
            var freight = arrEDT.FreightSalesView;
            List<JournalEntryDetail> journalEntryDetail = new();

            var douTypeID = _context.DocumentTypes.FirstOrDefault(w => w.Code == "JE");
            var defaultJE = _context.Series.FirstOrDefault(w => w.Default == true && w.DocuTypeID == douTypeID.ID) ?? new Series();
            // update series
            if (defaultJE.ID > 0)
            {
                string Sno = defaultJE.NextNo;
                long No = long.Parse(Sno);
                defaultJE.NextNo = Convert.ToString(No + 1);
                // update series details
                seriesDetail.SeriesID = defaultJE.ID;
                seriesDetail.Number = Sno;
                _context.Update(defaultJE);
                _context.Update(seriesDetail);
                _context.SaveChanges();
                // Insert Journal Entry
                journalEntry.SeriesID = defaultJE.ID;
                journalEntry.Number = Sno;
                journalEntry.DouTypeID = defaultJE.DocuTypeID;
                journalEntry.Creator = Order.UserID;
                journalEntry.BranchID = Order.BranchID;
                journalEntry.TransNo = Sno;
                journalEntry.PostingDate = Order.PostingDate;
                journalEntry.DocumentDate = Order.DocumentDate;
                journalEntry.DueDate = Order.DueDate;
                journalEntry.SSCID = Order.SaleCurrencyID;
                journalEntry.LLCID = Order.LocalCurID;
                journalEntry.CompanyID = Order.CompanyID;
                journalEntry.LocalSetRate = (decimal)Order.LocalSetRate;
                journalEntry.SeriesDID = seriesDetail.ID;
                journalEntry.Remarks = defaultJE.Name + " " + Sno;
                _context.Update(journalEntry);
            }
            _context.SaveChanges();
            //IssuseInstock
            // AccountReceice
            var GrandTotalSys = arrEDT.TotalAmountSys - arEHistory.TotalAmountSys;
            var accountReceive = _context.BusinessPartners.FirstOrDefault(w => w.ID == Order.CusID);
            var glAcc = _context.GLAccounts.FirstOrDefault(w => w.ID == accountReceive.GLAccID) ?? new GLAccount();
            if (GrandTotalSys > 0)
            {
                if (glAcc.ID > 0)
                {
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Debit = (decimal)GrandTotalSys,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    glAcc.Balance += (decimal)GrandTotalSys;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,
                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAcc.Code,
                        CumulativeBalance = glAcc.Balance,
                        Debit = (decimal)GrandTotalSys,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = accountReceive.GLAccID,
                        Creator = Order.UserID,
                        BPAcctID = Order.CusID,
                        Effective = EffectiveBlance.Debit

                    });
                    _context.Update(glAcc);
                }
            }
            else if (GrandTotalSys < 0)
            {
                GrandTotalSys = GrandTotalSys * -1;
                if (glAcc.ID > 0)
                {
                    journalEntryDetail.Add(new JournalEntryDetail
                    {
                        JEID = journalEntry.ID,
                        Type = Type.BPCode,
                        ItemID = accountReceive.GLAccID,
                        Credit = (decimal)GrandTotalSys,
                        BPAcctID = Order.CusID,
                    });
                    //Insert 
                    glAcc.Balance += (decimal)GrandTotalSys;
                    accountBalance.Add(new AccountBalance
                    {
                        JEID = journalEntry.ID,

                        PostingDate = Order.PostingDate,
                        Origin = docType.ID,
                        OriginNo = Order.InvoiceNumber,
                        OffsetAccount = glAcc.Code,
                        Details = douTypeID.Name + " - " + glAcc.Code,
                        CumulativeBalance = glAcc.Balance,
                        Credit = (decimal)GrandTotalSys,
                        LocalSetRate = Order.LocalCurID,
                        GLAID = accountReceive.GLAccID,
                        Creator = Order.UserID,
                        BPAcctID = Order.CusID,
                        Effective = EffectiveBlance.Credit
                    });
                    _context.Update(glAcc);
                }
            }
            // Tax AR Down Payment //
            var _ards = ards.Where(i => i.Selected).ToList();
            if (_ards.Count > 0)
            {
                foreach (var ard in _ards)
                {
                    if (ard.SaleARDPINCNDetails.Any())
                    {
                        foreach (var i in ard.SaleARDPINCNDetails)
                        {
                            // Tax Account ///
                            var taxg = _context.TaxGroups.Find(i.TaxGroupID) ?? new TaxGroup();
                            var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                            decimal taxValue = i.TaxDownPaymentValue * (decimal)Order.ExchangeRate;
                            if (taxAcc.ID > 0)
                            {
                                var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                                if (taxjur.ItemID > 0)
                                {
                                    var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                                    taxAcc.Balance += taxValue;
                                    //journalEntryDetail
                                    taxjur.Debit += taxValue;
                                    //accountBalance
                                    accBalance.CumulativeBalance = taxAcc.Balance;
                                    accBalance.Debit += taxValue;
                                }
                                else
                                {
                                    taxAcc.Balance += taxValue;
                                    journalEntryDetail.Add(new JournalEntryDetail
                                    {
                                        JEID = journalEntry.ID,
                                        Type = Type.GLAcct,
                                        ItemID = taxAcc.ID,
                                        Debit = taxValue,
                                    });
                                    //
                                    accountBalance.Add(new AccountBalance
                                    {
                                        JEID = journalEntry.ID,

                                        PostingDate = Order.PostingDate,
                                        Origin = docType.ID,
                                        OriginNo = Order.InvoiceNumber,
                                        OffsetAccount = taxAcc.Code,
                                        Details = douTypeID.Name + " - " + taxAcc.Code,
                                        CumulativeBalance = taxAcc.Balance,
                                        Debit = taxValue,
                                        LocalSetRate = ard.LocalSetRate,
                                        GLAID = taxAcc.ID,
                                        Effective = EffectiveBlance.Debit
                                    });
                                }
                                _context.Update(taxAcc);
                                _context.SaveChanges();
                            }
                        }
                    }

                }
            }
            // Freight //
            if (freight != null)
            {
                if (freight.FreightSaleDetails.Any())
                {
                    foreach (var fr in freight.FreightSaleDetails.Where(i => i.Amount > 0).ToList())
                    {

                        var freightOg = _context.Freights.Find(fr.FreightID) ?? new Freight();
                        var frgl = _context.GLAccounts.Find(freightOg.RevenAcctID) ?? new GLAccount();
                        var taxfr = _context.TaxGroups.Find(fr.TaxGroupID) ?? new TaxGroup();
                        var taxgacc = _context.GLAccounts.Find(taxfr.GLID) ?? new GLAccount();
                        if (frgl.ID > 0)
                        {
                            var frgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == frgl.ID) ?? new JournalEntryDetail();
                            var _framount = fr.Amount * (decimal)Order.ExchangeRate;
                            if (frgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == frgl.ID);
                                frgl.Balance -= _framount;
                                //journalEntryDetail
                                frgljur.Credit += _framount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _framount;
                            }
                            else
                            {
                                // if (upgrade)
                                // {
                                frgl.Balance -= _framount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = frgl.ID,
                                    Credit = _framount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + frgl.Code,
                                    CumulativeBalance = frgl.Balance,
                                    Credit = _framount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = frgl.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(frgl);
                            _context.SaveChanges();
                        }
                        if (taxgacc.ID > 0)
                        {
                            var frtaxgljur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxgacc.ID) ?? new JournalEntryDetail();
                            var _frtaxamount = fr.TotalTaxAmount * (decimal)Order.ExchangeRate;
                            if (frtaxgljur.ItemID > 0)
                            {
                                var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxgacc.ID) ?? new AccountBalance();
                                taxgacc.Balance -= _frtaxamount;
                                //journalEntryDetail
                                frtaxgljur.Credit += _frtaxamount;
                                //accountBalance
                                accBalance.CumulativeBalance = frgl.Balance;
                                accBalance.Credit += _frtaxamount;
                            }
                            else
                            {
                                taxgacc.Balance -= _frtaxamount;
                                journalEntryDetail.Add(new JournalEntryDetail
                                {
                                    JEID = journalEntry.ID,
                                    Type = Type.GLAcct,
                                    ItemID = taxgacc.ID,
                                    Credit = _frtaxamount,
                                    BPAcctID = Order.CusID
                                });
                                //
                                accountBalance.Add(new AccountBalance
                                {
                                    JEID = journalEntry.ID,

                                    PostingDate = Order.PostingDate,
                                    Origin = docType.ID,
                                    OriginNo = Order.InvoiceNumber,
                                    OffsetAccount = glAcc.Code,
                                    Details = douTypeID.Name + " - " + taxgacc.Code,
                                    CumulativeBalance = taxgacc.Balance,
                                    Credit = _frtaxamount,
                                    LocalSetRate = (decimal)Order.LocalSetRate,
                                    GLAID = taxgacc.ID,
                                    Effective = EffectiveBlance.Credit
                                });
                            }
                            _context.Update(taxgacc);
                            _context.SaveChanges();
                        }
                    }
                }
            }
            #region 

            // //IssuseInStockSaleAR
            foreach (var item in SaleAREditeDetailHistory.Where(w => w.TotalSys > 0))
            {
                int revenueAccID = 0;
                decimal revenueAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    if (arrEDT.DisRate > 0)
                    {
                        decimal disvalue = ((decimal)item.TotalSys) * (decimal)arrEDT.DisRate / 100;
                        revenueAccAmount = ((decimal)item.TotalSys) - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = ((decimal)item.TotalSys);
                    }
                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    if (arrEDT.DisRate > 0)
                    {
                        decimal disvalue = ((decimal)item.TotalSys) * (decimal)arrEDT.DisRate / 100;
                        revenueAccAmount = ((decimal)item.TotalSys) - disvalue;
                    }
                    else
                    {
                        revenueAccAmount = ((decimal)item.TotalSys);
                    }
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = item.TaxOfFinDisValue * (decimal)Order.ExchangeRate;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Credit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Credit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(taxAcc);
                }

                // Account Revenue
                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                if (glAccRevenfifo.ID > 0)
                {
                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                    if (listRevenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        //journalEntryDetail
                        listRevenfifo.Credit += revenueAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                        accBalance.Credit += revenueAccAmount;
                    }
                    else
                    {
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = revenueAccID,
                            Credit = revenueAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,
                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                            CumulativeBalance = glAccRevenfifo.Balance,
                            Credit = revenueAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = revenueAccID,
                            Effective = EffectiveBlance.Credit
                        });
                    }
                    _context.Update(glAccRevenfifo);
                }
            }

            foreach (var item in SaleAREditeDetailHistory.Where(w => w.TotalSys < 0))
            {
                int revenueAccID = 0;
                decimal revenueAccAmount = 0;
                var itemMaster = _context.ItemMasterDatas.FirstOrDefault(w => w.ID == item.ItemID);
                var baseUOM = _context.GroupDUoMs.FirstOrDefault(w => w.GroupUoMID == item.GUomID);
                if (itemMaster.SetGlAccount == SetGlAccount.ItemLevel)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemID == item.ItemID && w.WarehouseID == Order.WarehouseID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    revenueAccAmount = (decimal)item.TotalSys * -1;

                }
                else if (itemMaster.SetGlAccount == SetGlAccount.ItemGroup)
                {
                    var revenueAcc = (from ia in _context.ItemAccountings.Where(w => w.ItemGroupID == itemMaster.ItemGroup1ID)
                                      join gl in _context.GLAccounts on ia.RevenueAccount equals gl.Code
                                      select gl
                                         ).FirstOrDefault() ?? new GLAccount();
                    revenueAccID = revenueAcc.ID;
                    revenueAccAmount = (decimal)item.TotalSys * -1;
                }
                // Tax Account ///
                var taxg = _context.TaxGroups.Find(item.TaxGroupID) ?? new TaxGroup();
                var taxAcc = _context.GLAccounts.Find(taxg.GLID) ?? new GLAccount();
                decimal taxValue = (item.TaxValue * (decimal)Order.ExchangeRate) * -1;
                if (taxAcc.ID > 0)
                {
                    var taxjur = journalEntryDetail.FirstOrDefault(w => w.ItemID == taxAcc.ID) ?? new JournalEntryDetail();
                    if (taxjur.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == taxAcc.ID);
                        taxAcc.Balance -= taxValue;
                        //journalEntryDetail
                        taxjur.Credit += taxValue;
                        //accountBalance
                        accBalance.CumulativeBalance = taxAcc.Balance;
                        accBalance.Credit += taxValue;
                    }
                    else
                    {
                        taxAcc.Balance -= taxValue;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = taxAcc.ID,
                            Debit = taxValue,
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = taxAcc.Code,
                            Details = douTypeID.Name + " - " + taxAcc.Code,
                            CumulativeBalance = taxAcc.Balance,
                            Debit = taxValue,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = taxAcc.ID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(taxAcc);
                }

                // Account Revenue
                var glAccRevenfifo = _context.GLAccounts.FirstOrDefault(w => w.ID == revenueAccID) ?? new GLAccount();
                if (glAccRevenfifo.ID > 0)
                {
                    var listRevenfifo = journalEntryDetail.FirstOrDefault(w => w.ItemID == glAccRevenfifo.ID) ?? new JournalEntryDetail();
                    if (listRevenfifo.ItemID > 0)
                    {
                        var accBalance = accountBalance.FirstOrDefault(w => w.GLAID == revenueAccID);
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        //journalEntryDetail
                        listRevenfifo.Credit += revenueAccAmount;
                        //accountBalance
                        accBalance.CumulativeBalance = glAccRevenfifo.Balance;
                        accBalance.Credit += revenueAccAmount;
                    }
                    else
                    {
                        glAccRevenfifo.Balance -= revenueAccAmount;
                        journalEntryDetail.Add(new JournalEntryDetail
                        {
                            JEID = journalEntry.ID,
                            Type = Type.GLAcct,
                            ItemID = revenueAccID,
                            Debit = revenueAccAmount,
                            BPAcctID = Order.CusID
                        });
                        //
                        accountBalance.Add(new AccountBalance
                        {
                            JEID = journalEntry.ID,

                            PostingDate = Order.PostingDate,
                            Origin = docType.ID,
                            OriginNo = Order.InvoiceNumber,
                            OffsetAccount = glAcc.Code,
                            Details = douTypeID.Name + " - " + glAccRevenfifo.Code,
                            CumulativeBalance = glAccRevenfifo.Balance,
                            Debit = revenueAccAmount,
                            LocalSetRate = (decimal)Order.LocalSetRate,
                            GLAID = revenueAccID,
                            Effective = EffectiveBlance.Debit
                        });
                    }
                    _context.Update(glAccRevenfifo);
                }
            }
            #endregion
            var journal = _context.JournalEntries.Find(journalEntry.ID) ?? new JournalEntry();
            if (journal.ID > 0)
            {
                journal.TotalDebit = journalEntryDetail.Sum(s => s.Debit);
                journal.TotalCredit = journalEntryDetail.Sum(s => s.Credit);
                _context.JournalEntryDetails.UpdateRange(journalEntryDetail);
                _context.AccountBalances.UpdateRange(accountBalance);
                _context.SaveChanges();
            }
        }
    }
    //----------------------------------------------// End Responsitory // ------------------
}
