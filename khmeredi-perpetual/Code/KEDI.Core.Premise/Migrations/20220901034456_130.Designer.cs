// <auto-generated />
using System;
using CKBS.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CKBS.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220901034456_130")]
    partial class _130
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CKBS.Models.ClassCopy.PurchaesOrder_from_Quotation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("Balance_Due");

                    b.Property<double>("Balance_Due_Sys");

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<int>("DetailQuotationID");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValues");

                    b.Property<double>("Discount_Rate");

                    b.Property<double>("Discount_Values");

                    b.Property<string>("DocumentDate");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangRate");

                    b.Property<string>("ExpireDate");

                    b.Property<int>("GroupUomID");

                    b.Property<string>("Invoice");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("OpenQty");

                    b.Property<string>("PostingDate");

                    b.Property<double>("PurchasePrice");

                    b.Property<double>("Qty");

                    b.Property<string>("Reff_No");

                    b.Property<string>("Remark");

                    b.Property<string>("RequiredDate");

                    b.Property<string>("Status");

                    b.Property<double>("Sub_Total");

                    b.Property<double>("Sub_Total_Sys");

                    b.Property<string>("SystemCurrency");

                    b.Property<int>("SystemCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValues");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<string>("Type_Dis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<string>("User");

                    b.Property<int>("UserID");

                    b.Property<string>("ValidUntil");

                    b.Property<string>("Vendor");

                    b.Property<int>("VendorID");

                    b.Property<string>("Warehouse");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("CopyPurchaseOrder_from_Quotation");
                });

            modelBuilder.Entity("CKBS.Models.ClassCopy.PurchaseAP_To_PurchaseMemo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("APID");

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNode");

                    b.Property<double>("AlertStock");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("Balance_Due");

                    b.Property<double>("Balance_Due_Sys");

                    b.Property<string>("Barcode");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValues");

                    b.Property<double>("Discount_Rate");

                    b.Property<double>("Discount_Values");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<double>("DownPayment");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangRate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("GroupUomID");

                    b.Property<string>("Invoice");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<double>("PurchasePrice");

                    b.Property<double>("Qty");

                    b.Property<string>("Reff_No");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<double>("SetRate");

                    b.Property<string>("Status");

                    b.Property<double>("Sub_Total");

                    b.Property<double>("Sub_Total_Sys");

                    b.Property<string>("SystemCurrency");

                    b.Property<int>("SystemCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValues");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<string>("Type_Dis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<string>("User");

                    b.Property<int>("UserID");

                    b.Property<string>("Vendor");

                    b.Property<int>("VendorID");

                    b.Property<string>("Warehouse");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("CopyPurchaseAP_To_PurchaseMemo","dbo");
                });

            modelBuilder.Entity("CKBS.Models.InventoryAuditReport.ServiceInventoryAudit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<double>("CumulativeQty");

                    b.Property<double>("CumulativeValue");

                    b.Property<string>("Currency");

                    b.Property<string>("Employee");

                    b.Property<string>("EnglistName");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnType("Date");

                    b.Property<string>("Tarns_Type");

                    b.Property<string>("TimeIn");

                    b.Property<double>("Trans_value");

                    b.Property<string>("Uom");

                    b.Property<int>("UomID");

                    b.Property<string>("Warehouse");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("ServiceInventoryAudit","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ReportClass.ReportPurchasCreditMemo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance_due");

                    b.Property<double>("Balance_due_sys");

                    b.Property<string>("BusinessName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("LocalCurrency");

                    b.Property<string>("Number");

                    b.Property<string>("Prefix");

                    b.Property<string>("Status");

                    b.Property<string>("SystemCurrency");

                    b.Property<double>("Total");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("ReportPurchasCreditMemo","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ReportClass.ReportPurchaseAP", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance_due");

                    b.Property<double>("Balance_due_sys");

                    b.Property<string>("BusinessName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("LocalCurrency");

                    b.Property<string>("Number");

                    b.Property<string>("Prefix");

                    b.Property<string>("Status");

                    b.Property<string>("SystemCurrency");

                    b.Property<double>("Total");

                    b.Property<string>("UserName");

                    b.Property<string>("Warehouse");

                    b.HasKey("ID");

                    b.ToTable("ReportPurchasAP","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ReportClass.ReportPurchaseOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance_due");

                    b.Property<double>("Balance_due_sys");

                    b.Property<string>("BusinessName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("LocalCurrency");

                    b.Property<string>("Number");

                    b.Property<string>("Prefix");

                    b.Property<string>("Status");

                    b.Property<string>("SystemCurrency");

                    b.Property<double>("Total");

                    b.Property<string>("UserName");

                    b.Property<string>("Warehouse");

                    b.HasKey("ID");

                    b.ToTable("ReportPurchaseOrder","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ReportClass.ReportPurchaseQuotation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance_due");

                    b.Property<double>("Balance_due_sys");

                    b.Property<string>("BusinessName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("LocalCurrency");

                    b.Property<string>("Status");

                    b.Property<string>("SystemCurrency");

                    b.Property<string>("UserName");

                    b.Property<string>("Warehouse");

                    b.HasKey("ID");

                    b.ToTable("ReportPurchaseQuotation","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ReportClass.ReportPurchaseRequset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance_due");

                    b.Property<string>("BranchName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("Status");

                    b.Property<string>("SystemCurrency");

                    b.Property<string>("UserName");

                    b.Property<string>("Warehouse");

                    b.HasKey("ID");

                    b.ToTable("ReportPurchaseRequst","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Account.Function", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Funtion","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Account.UserAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<string>("ComfirmPassword");

                    b.Property<int?>("CompanyID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Email");

                    b.Property<int?>("EmployeeID");

                    b.Property<bool>("IsUserOrder");

                    b.Property<string>("Language");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordStamp");

                    b.Property<string>("PublicKey");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Signature");

                    b.Property<bool>("Status");

                    b.Property<string>("TelegramUserID");

                    b.Property<int?>("UserID");

                    b.Property<bool>("UserPos");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("UserID");

                    b.ToTable("tbUserAccount","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.AlertManagement.AlertManagement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CompanyID");

                    b.Property<int>("DeleteAlert");

                    b.Property<string>("Name");

                    b.Property<bool>("ReadAlert");

                    b.Property<int>("StatusAlert");

                    b.Property<int>("TypeOfAlert");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("tbAlertManagement","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.AlertManagement.SetttingAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertManagementID");

                    b.Property<int>("BeforeAppDate");

                    b.Property<int>("DeleteAlert");

                    b.Property<int>("Frequently");

                    b.Property<bool>("IsAllWh");

                    b.Property<int>("TypeBeforeAppDate");

                    b.Property<int>("TypeFrequently");

                    b.HasKey("ID");

                    b.ToTable("tbSettingAlert");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.AlertManagement.SetttingAlertUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SetttingAlertID");

                    b.Property<int>("StatusAlertUser");

                    b.Property<int>("UserAccountID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("SetttingAlertID");

                    b.ToTable("tbSettingAlertUser");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.AlertManagement.TypeOfAlertM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TypeOfAlertUsed");

                    b.HasKey("ID");

                    b.ToTable("tbTypeOfAlertM","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("tbBranch","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(220);

                    b.Property<bool>("Delete");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PriceListID");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("SystemCurrencyID");

                    b.Property<string>("TenantID");

                    b.HasKey("ID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("PriceListID");

                    b.HasIndex("SystemCurrencyID");

                    b.ToTable("tbCompany","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.PrinterName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("MachineName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrderCount");

                    b.Property<bool>("Split");

                    b.HasKey("ID");

                    b.ToTable("tbPrinterName","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.ReceiptInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int?>("BranchID");

                    b.Property<string>("EnglishDescription")
                        .IsRequired();

                    b.Property<string>("KhmerDescription")
                        .IsRequired();

                    b.Property<string>("Logo");

                    b.Property<string>("PowerBy");

                    b.Property<string>("TeamCondition");

                    b.Property<string>("Tel1")
                        .IsRequired();

                    b.Property<string>("Tel2")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("tbReceiptInformation","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.UserPrivillege", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<bool>("Delete");

                    b.Property<int>("FunctionID");

                    b.Property<bool>("Used");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("FunctionID");

                    b.ToTable("tbUserPrivillege","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.GroupDUoM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AltQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AltUOM");

                    b.Property<decimal>("BaseQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BaseUOM");

                    b.Property<string>("Defined");

                    b.Property<bool>("Delete");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<int>("GroupUoMID");

                    b.Property<int>("UoMID");

                    b.HasKey("ID");

                    b.HasIndex("GroupUoMID");

                    b.HasIndex("UoMID");

                    b.ToTable("tbGroupDefindUoM","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.GroupUOM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<bool>("Delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("tbGroupUoM","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.StockMoving", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Available");

                    b.Property<double>("Committed");

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<double>("InStock");

                    b.Property<int>("ItemID");

                    b.Property<double>("Ordered");

                    b.Property<DateTime>("SyetemDate")
                        .HasColumnType("Date");

                    b.Property<string>("TimeIn");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehoseDetailLineID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbStockMoving","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltUomName");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<bool>("Delete");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("tbUnitofMeasure","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.Warehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("BranchID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Delete");

                    b.Property<bool>("IsAllowNegativeStock");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("StockIn");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("tbWarhouse","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.WarehouseDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("Date");

                    b.Property<int>("BPID");

                    b.Property<string>("BatchAttr1");

                    b.Property<string>("BatchAttr2");

                    b.Property<string>("BatchNo");

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("Details");

                    b.Property<int>("Direction");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("GRGIID");

                    b.Property<double>("InStock");

                    b.Property<int>("InStockFrom");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemID");

                    b.Property<string>("Location");

                    b.Property<string>("LotNumber");

                    b.Property<DateTime?>("MfrDate")
                        .HasColumnType("Date");

                    b.Property<string>("MfrSerialNumber");

                    b.Property<DateTime?>("MfrWarDateEnd")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("MfrWarDateStart")
                        .HasColumnType("Date");

                    b.Property<int>("ProcessItem");

                    b.Property<string>("SerialNumber");

                    b.Property<DateTime>("SyetemDate")
                        .HasColumnType("Date");

                    b.Property<int>("SysNum");

                    b.Property<DateTime>("TimeIn");

                    b.Property<int>("TransType");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("tbWarehouseDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.WarehouseSummary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Available");

                    b.Property<double>("Committed");

                    b.Property<double>("Cost");

                    b.Property<decimal>("CumulativeValue");

                    b.Property<int>("CurrencyID");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<double>("Factor");

                    b.Property<double>("InStock");

                    b.Property<int>("ItemID");

                    b.Property<double>("Ordered");

                    b.Property<DateTime>("SyetemDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("TimeIn");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbWarehouseSummary","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SettingDashboard.DashboardSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Show");

                    b.HasKey("ID");

                    b.ToTable("DashboardSettings");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Setup.Freight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountExpen");

                    b.Property<decimal>("AmountReven");

                    b.Property<bool>("Default");

                    b.Property<int>("ExpenAcctID");

                    b.Property<int>("FreightReceiptType");

                    b.Property<int>("InTaxID");

                    b.Property<decimal>("InTaxRate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("OutTaxID");

                    b.Property<decimal>("OutTaxRate");

                    b.Property<int>("RevenAcctID");

                    b.HasKey("ID");

                    b.ToTable("Freight");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Setup.FreightReceipt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountReven");

                    b.Property<int>("FreightID");

                    b.Property<int>("FreightReceiptType");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ReceiptID");

                    b.HasKey("ID");

                    b.ToTable("FreightReceipt");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SystemInitialization.DocumentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("tbDocumentType","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SystemInitialization.PeriodIndicator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("tbPeriodIndicator","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SystemInitialization.PostingPeriod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("DocuDateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DocuDateTo")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DueDateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DueDateTo")
                        .HasColumnType("Date");

                    b.Property<string>("FiscalYear");

                    b.Property<string>("NoOfPeroid");

                    b.Property<string>("PeriodCode");

                    b.Property<string>("PeriodName");

                    b.Property<int>("PeroidIndID");

                    b.Property<int>("PeroidStatus");

                    b.Property<DateTime>("PostingDateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("PostingDateTo")
                        .HasColumnType("Date");

                    b.Property<DateTime>("StartOfFiscalYear")
                        .HasColumnType("Date");

                    b.Property<int>("SubPeriod");

                    b.HasKey("ID");

                    b.ToTable("tbPotingPeriod","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SystemInitialization.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Default");

                    b.Property<int>("DocuTypeID");

                    b.Property<string>("FirstNo");

                    b.Property<int?>("JournalEntryID");

                    b.Property<string>("LastNo");

                    b.Property<bool>("Lock");

                    b.Property<string>("Name");

                    b.Property<string>("NextNo");

                    b.Property<int>("PeriodIndID");

                    b.Property<string>("PreFix");

                    b.HasKey("ID");

                    b.HasIndex("JournalEntryID");

                    b.ToTable("tbSeries","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SystemInitialization.SeriesDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number");

                    b.Property<int>("SeriesID");

                    b.HasKey("ID");

                    b.ToTable("tbSeriesDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Tables.GroupTable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Types")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("tbGroupTable","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Tables.Table", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<int>("GroupTableID");

                    b.Property<string>("Image");

                    b.Property<bool>("IsTablePriceList");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PriceListID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Time");

                    b.HasKey("ID");

                    b.HasIndex("GroupTableID");

                    b.ToTable("tbTable","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.AlertDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AlertMasterID");

                    b.Property<string>("Code");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("IsAllUsers");

                    b.Property<bool>("IsAllWh");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("AlertDetails");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.AlertMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<long>("BeforeAppDate");

                    b.Property<string>("Code");

                    b.Property<int>("CompanyID");

                    b.Property<int>("DeleteAlert");

                    b.Property<long>("Frequently");

                    b.Property<int>("TypeBeforeAppDate");

                    b.Property<int>("TypeFrequently");

                    b.Property<int>("TypeOfAlert");

                    b.HasKey("ID");

                    b.ToTable("AlertMasters");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.AlertWarehouses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertDetailID");

                    b.Property<string>("Code");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("IsAlert");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int?>("SetttingAlertID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("AlertDetailID");

                    b.HasIndex("SetttingAlertID");

                    b.ToTable("AlertWarehouse");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.CashOutAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandID");

                    b.Property<decimal>("CashInAmountSys");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurrencyID");

                    b.Property<DateTime>("DateIn");

                    b.Property<DateTime>("DateOut");

                    b.Property<int>("EmpID");

                    b.Property<decimal>("GrandTotal");

                    b.Property<bool>("IsRead");

                    b.Property<decimal>("SaleAmountSys");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("CashOutAlerts");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.DueDateAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPID");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("DueDateType");

                    b.Property<int>("InvoiceID");

                    b.Property<string>("InvoiceNumber");

                    b.Property<bool>("IsRead");

                    b.Property<string>("Name");

                    b.Property<int>("SeriesDID");

                    b.Property<string>("TimeLeft");

                    b.Property<string>("Type");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("DueDateAlerts");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.StockAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Image");

                    b.Property<double>("InStock");

                    b.Property<bool>("IsRead");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemName");

                    b.Property<double>("MaxInv");

                    b.Property<double>("MinInv");

                    b.Property<int>("StockType");

                    b.Property<string>("Type");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.Property<string>("WarehouseName");

                    b.HasKey("ID");

                    b.ToTable("StockAlerts");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.TelegramToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.HasKey("ID");

                    b.ToTable("TelegramTokens");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.UserAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertDetailID");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("IsAlert");

                    b.Property<string>("TelegramUserID");

                    b.Property<int>("UserAccountID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("AlertDetailID");

                    b.ToTable("UserAlerts");
                });

            modelBuilder.Entity("CKBS.Models.Services.Appointment.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClosingDate");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CustomerID");

                    b.Property<string>("Notification");

                    b.Property<DateTime>("PostingDate");

                    b.Property<int>("Status");

                    b.Property<int>("UserID");

                    b.Property<int>("VehicleID");

                    b.HasKey("ID");

                    b.ToTable("tbAppointment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Appointment.AppointmentService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentID");

                    b.Property<DateTime>("ServiceDate");

                    b.Property<string>("ServiceName");

                    b.Property<string>("ServiceUom");

                    b.Property<int>("Status");

                    b.Property<bool>("TimelyService");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.ToTable("tbAppointmentService","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Description");

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("tbCurrency","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.ExchangeRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("Rate");

                    b.Property<double>("RateOut");

                    b.Property<double>("SetRate");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("tbExchangeRate","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.IncomingPayment", b =>
                {
                    b.Property<int>("IncomingPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CustomerID");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("IcoPayCusID");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<int>("PaymentMeanID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Ref_No");

                    b.Property<string>("Remark");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("TotalAmountDue");

                    b.Property<decimal>("TotalApplied");

                    b.Property<int>("UserID");

                    b.HasKey("IncomingPaymentID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("tbIncomingPayment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.IncomingPaymentCustomer", b =>
                {
                    b.Property<int>("IncomingPaymentCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("BalanceDue");

                    b.Property<int>("BranchID");

                    b.Property<double>("CashDiscount");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("DocTypeID");

                    b.Property<string>("DocumentNo");

                    b.Property<string>("DocumentType");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("ItemInvoice");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<double>("OverdueDays");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<int>("SysCurrency");

                    b.Property<string>("SysName");

                    b.Property<double>("Total");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalPayment");

                    b.Property<string>("Types");

                    b.Property<int>("WarehouseID");

                    b.HasKey("IncomingPaymentCustomerID");

                    b.ToTable("tbIncomingPaymentCustomer","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.IncomingPaymentDetail", b =>
                {
                    b.Property<int>("IncomingPaymentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("CashDiscount");

                    b.Property<bool>("CheckPay");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<string>("DocNo");

                    b.Property<int>("DocTypeID");

                    b.Property<string>("DocumentNo");

                    b.Property<string>("DocumentType");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("IcoPayCusID");

                    b.Property<int>("IncomingPaymentID");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("ItemInvoice");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<double>("OverdueDays");

                    b.Property<double>("Total");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("Totalpayment");

                    b.HasKey("IncomingPaymentDetailID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("IncomingPaymentID");

                    b.ToTable("tbIncomingPaymentDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.OutgoingPayment", b =>
                {
                    b.Property<int>("OutgoingPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentID");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<string>("NumberInvioce");

                    b.Property<int>("PaymentMeanID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Ref_No");

                    b.Property<string>("Remark");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("TotalAmountDue");

                    b.Property<int>("TypePurchase");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.HasKey("OutgoingPaymentID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.ToTable("tbOutgoingpayment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.OutgoingPaymentDetail", b =>
                {
                    b.Property<int>("OutgoingPaymentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("BalanceDue");

                    b.Property<int>("BasedOnID");

                    b.Property<double>("CashDiscount");

                    b.Property<bool>("CheckPay");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<string>("DocNo");

                    b.Property<int>("DocTypeID");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("ItemInvoice");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("NumberInvioce");

                    b.Property<int>("OutgoingPaymentID");

                    b.Property<double>("OverdueDays");

                    b.Property<double>("Total");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("Totalpayment");

                    b.HasKey("OutgoingPaymentDetailID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("OutgoingPaymentID");

                    b.ToTable("tbOutgoingpaymnetDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.OutgoingPaymentVendor", b =>
                {
                    b.Property<int>("OutgoingPaymentVendorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("BalanceDue");

                    b.Property<int>("BranchID");

                    b.Property<double>("CashDiscount");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentID");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("ItemInvoice");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<double>("OverdueDays");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("SeriesDetailID");

                    b.Property<string>("Status");

                    b.Property<int>("SysCurrency");

                    b.Property<string>("SysName");

                    b.Property<double>("Total");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalPayment");

                    b.Property<int>("TypePurchase");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("OutgoingPaymentVendorID");

                    b.ToTable("tbOutgoingPaymentVendor","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.PaymentMeans", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Default");

                    b.Property<bool>("Delete");

                    b.Property<bool>("Status");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("tbPaymentMeans","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.Tax", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<DateTime>("Effective");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Rate");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("tbTax","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ChartOfAccounts.AccountBalance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPAcctID");

                    b.Property<int>("Creator");

                    b.Property<decimal>("Credit");

                    b.Property<decimal>("CumulativeBalance");

                    b.Property<decimal>("Debit");

                    b.Property<string>("Details");

                    b.Property<int>("GLAID");

                    b.Property<int>("JEID");

                    b.Property<decimal>("LocalSetRate");

                    b.Property<string>("OffsetAccount");

                    b.Property<int>("Origin");

                    b.Property<string>("OriginNo");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.HasKey("ID");

                    b.ToTable("tbAccountBalance");
                });

            modelBuilder.Entity("CKBS.Models.Services.ChartOfAccounts.GLAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountType");

                    b.Property<decimal>("Balance");

                    b.Property<bool>("BlockManualPosting");

                    b.Property<bool>("CashFlowRelavant");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CompanyID");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<string>("ExternalCode");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCashAccount");

                    b.Property<bool>("IsConfidential");

                    b.Property<bool>("IsControlAccount");

                    b.Property<bool>("IsIndexed");

                    b.Property<bool>("IsTitle");

                    b.Property<int>("Level");

                    b.Property<int>("MainParentId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OpexID");

                    b.Property<int>("ParentId");

                    b.HasKey("ID");

                    b.ToTable("tbGLAccount");
                });

            modelBuilder.Entity("CKBS.Models.Services.CostOfAccounting.CostOfAccountingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CACodeName");

                    b.Property<string>("CACodeType");

                    b.HasKey("ID");

                    b.ToTable("CostOfAccountingTypes");
                });

            modelBuilder.Entity("CKBS.Models.Services.CostOfAccounting.CostOfCenter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("ActiveDimension");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CostCenter")
                        .IsRequired();

                    b.Property<string>("CostOfAccountingType");

                    b.Property<int?>("CostOfAccountingTypeID");

                    b.Property<DateTime?>("EffectiveFrom");

                    b.Property<DateTime?>("EffectiveTo");

                    b.Property<bool>("IsDimension");

                    b.Property<int>("Level");

                    b.Property<int>("MainParentID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("None");

                    b.Property<int>("OwnerEmpID");

                    b.Property<string>("OwnerName");

                    b.Property<int>("ParentID");

                    b.Property<string>("ShortCode");

                    b.HasKey("ID");

                    b.ToTable("CostOfCenter");
                });

            modelBuilder.Entity("CKBS.Models.Services.CostOfAccounting.Dimension", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("DimensionName");

                    b.Property<int>("Level");

                    b.HasKey("ID");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("CKBS.Models.Services.Financials.ItemAccounting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllocationAccount");

                    b.Property<double>("Available");

                    b.Property<string>("Code");

                    b.Property<double>("Committed");

                    b.Property<string>("CostofGoodsSoldAccount");

                    b.Property<decimal>("CumulativeValue");

                    b.Property<string>("ExchangeRateDifferencesAccount");

                    b.Property<string>("ExpenseAccount");

                    b.Property<string>("ExpenseAccountEU");

                    b.Property<string>("ExpenseAccountForeign");

                    b.Property<string>("ExpenseClearingAccount");

                    b.Property<string>("GLDecreaseAccount");

                    b.Property<string>("GLIncreaseAccount");

                    b.Property<string>("GoodsClearingAccount");

                    b.Property<double>("InStock");

                    b.Property<string>("InventoryAccount");

                    b.Property<string>("InventoryOffsetDecreaseAccount");

                    b.Property<string>("InventoryOffsetIncreaseAccount");

                    b.Property<string>("InventoryOffsetPLAccount");

                    b.Property<int?>("ItemGroupID");

                    b.Property<int?>("ItemID");

                    b.Property<double>("MaximunInventory");

                    b.Property<double>("MinimunInventory");

                    b.Property<string>("NegativeInventoryAdjustmentAcct");

                    b.Property<double>("Ordered");

                    b.Property<string>("PriceDifferenceAccount");

                    b.Property<string>("PurchaseCreditAccount");

                    b.Property<string>("PurchaseCreditAccountEU");

                    b.Property<string>("PurchaseCreditAccountForeign");

                    b.Property<string>("RevenueAccount");

                    b.Property<string>("RevenueAccountEU");

                    b.Property<string>("RevenueAccountForeign");

                    b.Property<string>("SalesCreditAccount");

                    b.Property<string>("SalesCreditAccountEU");

                    b.Property<string>("SalesCreditAccountForeign");

                    b.Property<string>("SalesReturnsAccount");

                    b.Property<int>("SetGlAccount");

                    b.Property<string>("ShippedGoodsAccount");

                    b.Property<string>("StockInTransitAccount");

                    b.Property<string>("Type");

                    b.Property<string>("VarianceAccount");

                    b.Property<string>("WIPInventoryAccount");

                    b.Property<string>("WIPInventoryVarianceAccount");

                    b.Property<string>("WIPOffsetPLAccount");

                    b.Property<int?>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("ItemGroupID");

                    b.HasIndex("ItemID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("ItemAccounting","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Financials.JournalEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<int>("Creator");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DouTypeID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<int>("LLCID");

                    b.Property<decimal>("LocalSetRate");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Remarks")
                        .IsRequired();

                    b.Property<int>("SSCID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<decimal>("TotalCredit");

                    b.Property<decimal>("TotalDebit");

                    b.Property<string>("TransNo")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("tbJournalEntry","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Financials.JournalEntryDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPAcctID");

                    b.Property<decimal>("Credit");

                    b.Property<decimal>("Debit");

                    b.Property<int>("ItemID");

                    b.Property<int>("JEID");

                    b.Property<int?>("JournalEntryID");

                    b.Property<string>("Remarks");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("JournalEntryID");

                    b.ToTable("tbJournalEntryDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.AutoBrand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("BrandName");

                    b.HasKey("BrandID");

                    b.ToTable("tbAutoBrand","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.AutoColor", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ColorName");

                    b.HasKey("ColorID");

                    b.ToTable("tbAutoColor","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.AutoMobile", b =>
                {
                    b.Property<int>("AutoMID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandID");

                    b.Property<int>("BusinessPartnerID");

                    b.Property<int>("ColorID");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Engine");

                    b.Property<string>("Frame");

                    b.Property<string>("KeyID");

                    b.Property<int>("ModelID");

                    b.Property<string>("Plate");

                    b.Property<int>("TypeID");

                    b.Property<string>("Year");

                    b.HasKey("AutoMID");

                    b.HasIndex("BusinessPartnerID");

                    b.ToTable("tbAutoMobile","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.AutoModel", b =>
                {
                    b.Property<int>("ModelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ModelName");

                    b.HasKey("ModelID");

                    b.ToTable("tbAutoModel","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.AutoType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("TypeName");

                    b.HasKey("TypeID");

                    b.ToTable("tbAutoType","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.BusinessPartner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<decimal>("Balance");

                    b.Property<DateTimeOffset>("BirthDate");

                    b.Property<int>("CardMemberID");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<decimal>("CreditLimit");

                    b.Property<decimal>("CumulativePoint");

                    b.Property<int>("CustomerSourceID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Email");

                    b.Property<int>("GLAccID");

                    b.Property<string>("GPSink");

                    b.Property<int>("Group1ID");

                    b.Property<int>("Group2ID");

                    b.Property<int>("GroupID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Name2");

                    b.Property<decimal>("OutstandPoint");

                    b.Property<int>("PaymentTermsID");

                    b.Property<string>("Phone");

                    b.Property<bool>("Point");

                    b.Property<int>("PriceListID");

                    b.Property<decimal>("RedeemedPoint");

                    b.Property<int>("SaleEMID");

                    b.Property<string>("StoreName");

                    b.Property<int>("TerritoryID");

                    b.Property<string>("Type");

                    b.Property<double>("VatNumber");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PriceListID");

                    b.ToTable("tbBusinessPartner","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.CashDiscount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ByDate");

                    b.Property<float>("CashDiscountDay");

                    b.Property<string>("CodeName");

                    b.Property<int>("Day");

                    b.Property<float>("Discount");

                    b.Property<float>("DiscountPercent");

                    b.Property<bool>("Freight");

                    b.Property<int>("Month");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("tbCashDicount","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(220);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Delete");

                    b.Property<int>("EMTypeID");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<DateTime>("Hiredate")
                        .HasColumnType("date");

                    b.Property<bool>("IsUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("Photo");

                    b.Property<string>("Position");

                    b.Property<bool>("Stopwork");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("tbEmployee","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.Instaillment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyTax");

                    b.Property<int?>("CreditMethod");

                    b.Property<int>("NoOfInstaillment");

                    b.Property<bool>("UpdateTax");

                    b.HasKey("ID");

                    b.ToTable("tbInstaillments","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.InstaillmentDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<int>("InstaillmentID");

                    b.Property<int>("Months");

                    b.Property<decimal>("Percent");

                    b.HasKey("ID");

                    b.HasIndex("InstaillmentID");

                    b.ToTable("tbInstallmentDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.OrderDetailQAutoMs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<string>("KhmerName");

                    b.Property<int>("Line_ID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("Uom");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UomID");

                    b.ToTable("tbOrderDetailQAutoMs","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.OrderQAutoM", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<bool>("Cancel");

                    b.Property<double>("Change");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrandTotal");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("OrderNo")
                        .IsRequired();

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PriceListID");

                    b.Property<string>("QueueNo")
                        .IsRequired();

                    b.Property<int>("QuoteAutoMID");

                    b.Property<string>("ReceiptNo")
                        .IsRequired();

                    b.Property<double>("Received");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn")
                        .IsRequired();

                    b.Property<string>("TimeOut")
                        .IsRequired();

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis")
                        .IsRequired();

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("OrderID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("QuoteAutoMID")
                        .IsUnique();

                    b.ToTable("tbOrderQAutoM","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.PaymentTerms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashDiscountID");

                    b.Property<string>("Code");

                    b.Property<float>("CommitLimit");

                    b.Property<int>("Days");

                    b.Property<int?>("DueDate");

                    b.Property<int>("InstaillmentID");

                    b.Property<float>("InterestOnReceiVables");

                    b.Property<float>("MaxCredit");

                    b.Property<int>("Months");

                    b.Property<int?>("OpenIncomingPayment");

                    b.Property<int>("PriceListID");

                    b.Property<int?>("StartFrom");

                    b.Property<string>("TolerenceDay");

                    b.Property<float>("TotalDiscount");

                    b.HasKey("ID");

                    b.ToTable("tbPaymentTerms","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.QuoteAutoM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("AutoMID");

                    b.Property<string>("BrandName");

                    b.Property<string>("Code");

                    b.Property<string>("ColorName");

                    b.Property<int>("CusID");

                    b.Property<int>("DocTypeID");

                    b.Property<string>("Email");

                    b.Property<string>("Engine");

                    b.Property<string>("Frame");

                    b.Property<string>("ModelName");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Plate");

                    b.Property<int>("PriceListID");

                    b.Property<string>("QNo");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<string>("Type");

                    b.Property<string>("TypeName");

                    b.Property<string>("Year");

                    b.HasKey("ID");

                    b.ToTable("tbQuoteAutoM","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.Background", b =>
                {
                    b.Property<int>("BackID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Name");

                    b.HasKey("BackID");

                    b.ToTable("Background","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.Colors", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Name");

                    b.HasKey("ColorID");

                    b.ToTable("Colors","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.ItemGroup1", b =>
                {
                    b.Property<int>("ItemG1ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackID");

                    b.Property<int?>("ColorID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Images");

                    b.Property<bool>("IsAddon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Visible");

                    b.HasKey("ItemG1ID");

                    b.HasIndex("BackID");

                    b.HasIndex("ColorID");

                    b.ToTable("ItemGroup1","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.ItemGroup2", b =>
                {
                    b.Property<int>("ItemG2ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackID");

                    b.Property<int?>("ColorID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Images");

                    b.Property<int>("ItemG1ID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ItemG2ID");

                    b.HasIndex("BackID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ItemG1ID");

                    b.ToTable("ItemGroup2","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.ItemGroup3", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackID");

                    b.Property<int>("ColorID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Images");

                    b.Property<int>("ItemG1ID");

                    b.Property<int>("ItemG2ID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BackID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ItemG1ID");

                    b.HasIndex("ItemG2ID");

                    b.ToTable("ItemGroup3","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.InventoryAudit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<double>("Cost");

                    b.Property<double>("CumulativeQty");

                    b.Property<double>("CumulativeValue");

                    b.Property<int>("CurrencyID");

                    b.Property<int>("DocumentTypeID");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("ItemID");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<double>("Price");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnType("Date");

                    b.Property<string>("TimeIn");

                    b.Property<string>("Trans_Type");

                    b.Property<double>("Trans_Valuse");

                    b.Property<string>("TypeItem");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UomID");

                    b.HasIndex("UserID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbInventoryAudit","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.ItemMasterData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<int>("BaseUomID");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CompanyID");

                    b.Property<int>("ContractID");

                    b.Property<double>("Cost");

                    b.Property<bool>("Delete");

                    b.Property<string>("Description");

                    b.Property<string>("EnglishName");

                    b.Property<int>("GroupUomID");

                    b.Property<string>("Image");

                    b.Property<bool>("Inventory");

                    b.Property<int?>("InventoryUoMID");

                    b.Property<bool>("IsLimitOrder");

                    b.Property<int>("ItemGroup1ID");

                    b.Property<int?>("ItemGroup2ID");

                    b.Property<int?>("ItemGroup3ID");

                    b.Property<string>("KhmerName")
                        .IsRequired();

                    b.Property<int>("ManItemBy");

                    b.Property<int>("ManMethod");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("MaxOrderQty");

                    b.Property<double>("MinOrderQty");

                    b.Property<int>("PriceListID");

                    b.Property<int?>("PrintToID");

                    b.Property<string>("Process");

                    b.Property<bool>("Purchase");

                    b.Property<int?>("PurchaseUomID");

                    b.Property<bool>("Sale");

                    b.Property<int?>("SaleUomID");

                    b.Property<bool>("Scale");

                    b.Property<int>("SetGlAccount");

                    b.Property<double>("StockCommit");

                    b.Property<double>("StockIn");

                    b.Property<double>("StockOnHand");

                    b.Property<int>("TaxGroupPurID");

                    b.Property<int>("TaxGroupSaleID");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<double>("UnitPrice");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("GroupUomID");

                    b.HasIndex("InventoryUoMID");

                    b.HasIndex("ItemGroup1ID");

                    b.HasIndex("ItemGroup2ID");

                    b.HasIndex("ItemGroup3ID");

                    b.HasIndex("PriceListID");

                    b.HasIndex("PrintToID");

                    b.HasIndex("PurchaseUomID");

                    b.HasIndex("SaleUomID");

                    b.ToTable("tbItemMasterData","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.PriceList.PriceListDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<float>("Discount");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<int>("ItemID");

                    b.Property<int>("PriceListID");

                    b.Property<int>("PromotionID");

                    b.Property<double>("Quantity");

                    b.Property<DateTime>("SystemDate");

                    b.Property<DateTime>("TimeIn");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int?>("UomID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PriceListID");

                    b.ToTable("tbPriceListDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.PriceList.PriceLists", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("tbPriceList","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Property.ChildPreoperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProID");

                    b.HasKey("ID");

                    b.ToTable("tbChildProperty","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Property.Property", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CompanyID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("tbProperty","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Property.PropertyDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID");

                    b.Property<int>("ProID");

                    b.Property<int>("Value");

                    b.HasKey("ID");

                    b.ToTable("tbPropertyDetails","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodIssues", b =>
                {
                    b.Property<int>("GoodIssuesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("GLID");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number_No");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Ref_No");

                    b.Property<string>("Remark");

                    b.Property<int>("SeriseDID");

                    b.Property<int>("SeriseID");

                    b.Property<int>("SysCurID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("GoodIssuesID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbGoodIssues","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodIssuesDetail", b =>
                {
                    b.Property<int>("GoodIssuesDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<string>("Check");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("EnglishName");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("GLID");

                    b.Property<int>("GoodIssuesID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("Quantity");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<int>("WarehouseID");

                    b.HasKey("GoodIssuesDetailID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("GoodIssuesID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UomID");

                    b.ToTable("tbGoodIssuesDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodReceiptDetail", b =>
                {
                    b.Property<int>("GoodReceitpDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<string>("Check");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("EnglishName");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("GLID");

                    b.Property<int>("GoodsReceiptID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("Quantity");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<int>("WarehouseID");

                    b.HasKey("GoodReceitpDetailID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("GoodsReceiptID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UomID");

                    b.ToTable("tbGoodReceitpDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodsReceipt", b =>
                {
                    b.Property<int>("GoodsReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("GLID");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number_No");

                    b.Property<int>("PaymentMeansID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Ref_No");

                    b.Property<string>("Remark");

                    b.Property<int>("SeriseDID");

                    b.Property<int>("SeriseID");

                    b.Property<int>("SysCurID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("GoodsReceiptID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbGoodsReceitp","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.Transfer", b =>
                {
                    b.Property<int>("TarmsferID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("BranchToID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Remark");

                    b.Property<int>("SeriseDID");

                    b.Property<int>("SeriseID");

                    b.Property<int>("SysCurID");

                    b.Property<string>("Time");

                    b.Property<int>("UserID");

                    b.Property<int>("UserRequestID");

                    b.Property<int>("WarehouseFromID");

                    b.Property<int>("WarehouseToID");

                    b.HasKey("TarmsferID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserRequestID");

                    b.HasIndex("WarehouseFromID");

                    b.HasIndex("WarehouseToID");

                    b.ToTable("tbTransfer","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.TransferDetail", b =>
                {
                    b.Property<int>("TarnsferDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Check");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("EnglishName");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("FWarehouseID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("Qty");

                    b.Property<int>("TWarehouseID");

                    b.Property<int>("TransferID");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("TarnsferDetailID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ItemID");

                    b.HasIndex("TransferID");

                    b.HasIndex("UomID");

                    b.ToTable("tbTarnsferDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.LoyaltyProgram.BuyXAmountGetXDiscount.BuyXQtyGetXDis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BuyItemID");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateF");

                    b.Property<DateTime>("DateT");

                    b.Property<int>("DisItemID");

                    b.Property<decimal>("DisRate");

                    b.Property<string>("Name");

                    b.Property<decimal>("Qty");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.ToTable("BuyXQtyGetXDis");
                });

            modelBuilder.Entity("CKBS.Models.Services.LoyaltyProgram.BuyXAmountGetXDiscount.PBuyXAmountGetXDis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateF");

                    b.Property<DateTime>("DateT");

                    b.Property<decimal>("DisRateValue");

                    b.Property<int>("DisType");

                    b.Property<string>("Name");

                    b.Property<int>("PriListID");

                    b.HasKey("ID");

                    b.ToTable("PBuyXGetXDis");
                });

            modelBuilder.Entity("CKBS.Models.Services.LoyaltyProgram.ComboSale.SaleCombo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<int>("CreatorID");

                    b.Property<int>("ItemID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriListID");

                    b.Property<int>("Type");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.ToTable("SaleCombo");
                });

            modelBuilder.Entity("CKBS.Models.Services.LoyaltyProgram.ComboSale.SaleComboDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Detele");

                    b.Property<int>("GUomID");

                    b.Property<int>("ItemID");

                    b.Property<double>("Qty");

                    b.Property<int>("SaleComboID");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("SaleComboID");

                    b.ToTable("ComboDetails");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.CompetitorDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NameCompetitorID");

                    b.Property<int>("OpportunityMasterDataID");

                    b.Property<string>("Remark");

                    b.Property<int>("ThrealevelID");

                    b.HasKey("ID");

                    b.HasIndex("OpportunityMasterDataID");

                    b.ToTable("CompetitorDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.DescriptionPotentialDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PotentialDetailID");

                    b.Property<int>("interestID");

                    b.HasKey("ID");

                    b.HasIndex("PotentialDetailID");

                    b.ToTable("DescriptionPotentialDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.DescriptionSummaryDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReasonsID");

                    b.Property<int>("SummaryDetailID");

                    b.HasKey("ID");

                    b.HasIndex("SummaryDetailID");

                    b.ToTable("DescriptionSummaryDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.InterestLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("ID");

                    b.ToTable("InterestLevel");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.OpportunityMasterData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPID");

                    b.Property<float>("CloingPercentage");

                    b.Property<DateTime>("ClosingDate");

                    b.Property<string>("OpportunityName");

                    b.Property<int>("OpportunityNo");

                    b.Property<string>("Owner");

                    b.Property<int>("SaleEmpID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.HasKey("ID");

                    b.ToTable("OpportunityMasterData");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.PartnerDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NamePartnerID");

                    b.Property<int>("OpportunityMasterDataID");

                    b.Property<string>("RelatedBp");

                    b.Property<int>("RelationshipID");

                    b.Property<string>("Remark");

                    b.HasKey("ID");

                    b.HasIndex("OpportunityMasterDataID");

                    b.ToTable("PartnerDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.PotentialDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("GrossProfit");

                    b.Property<decimal>("GrossProfitTotal");

                    b.Property<string>("Level");

                    b.Property<int>("OpportunityMasterDataID");

                    b.Property<decimal>("PotentailAmount");

                    b.Property<DateTime>("PredictedClosingDate");

                    b.Property<int>("PredictedClosingInNum");

                    b.Property<string>("PredictedClosingInTime");

                    b.Property<decimal>("WeightAmount");

                    b.HasKey("ID");

                    b.HasIndex("OpportunityMasterDataID")
                        .IsUnique();

                    b.ToTable("PotentialDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SaleEmployee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Action");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("SaleEmployee");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SetUpStage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ClosingPercentTage");

                    b.Property<string>("Name");

                    b.Property<int>("StageNo");

                    b.HasKey("ID");

                    b.ToTable("SetUpStage");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SetupCompetitor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail");

                    b.Property<string>("Name");

                    b.Property<int>("ThreaLevelID");

                    b.HasKey("ID");

                    b.ToTable("SetupCompetitor");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SetupInterestange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionLevel");

                    b.HasKey("ID");

                    b.ToTable("SetupInterestRange");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SetupPartner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DFRelationship");

                    b.Property<string>("Detail");

                    b.Property<string>("Name");

                    b.Property<string>("RelatedBp");

                    b.HasKey("ID");

                    b.ToTable("SetupPartner");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SetupReasons", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("ID");

                    b.ToTable("SetupReasons");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SetupRelationship", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RelationshipDscription");

                    b.HasKey("ID");

                    b.ToTable("SetupRelationship");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.StageDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityID");

                    b.Property<DateTime>("CloseDate");

                    b.Property<int>("DocNo");

                    b.Property<int>("DocTypeID");

                    b.Property<int>("OpportunityMasterDataID");

                    b.Property<int>("OwnerID");

                    b.Property<float>("Percent");

                    b.Property<decimal>("PotentailAmount");

                    b.Property<int>("SaleEmpselectID");

                    b.Property<bool>("ShowBpsDoc");

                    b.Property<int>("StagesID");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("WeightAmount");

                    b.HasKey("ID");

                    b.HasIndex("OpportunityMasterDataID");

                    b.ToTable("StageDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SummaryDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocTypeID");

                    b.Property<bool>("IsLost");

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsWon");

                    b.Property<int>("OpportunityMasterDataID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.HasKey("ID");

                    b.HasIndex("OpportunityMasterDataID")
                        .IsUnique();

                    b.ToTable("SummaryDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.CloseShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchID");

                    b.Property<double>("CashInAmount_Sys");

                    b.Property<double>("CashOutAmount_Sys");

                    b.Property<bool>("Close");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<double>("SaleAmount_Sys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<double>("Trans_From");

                    b.Property<double>("Trans_To");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("tbCloseShift","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Counter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PrinterID");

                    b.HasKey("ID");

                    b.HasIndex("PrinterID");

                    b.ToTable("tbCounter","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.DisplayCurrency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AltCurrencyID");

                    b.Property<double>("DecimalPlaces");

                    b.Property<decimal>("DisplayRate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsShowCurrency");

                    b.Property<bool>("IsShowOtherCurrency");

                    b.Property<decimal>("PLDisplayRate");

                    b.Property<int>("PriceListID");

                    b.HasKey("ID");

                    b.ToTable("tbDisplayCurrency","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.GeneralSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoQueue");

                    b.Property<int>("BranchID");

                    b.Property<bool>("Cash");

                    b.Property<int>("CloseShift");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CustomerID");

                    b.Property<bool>("DaulScreen");

                    b.Property<bool>("EnableCountMember");

                    b.Property<bool>("EnablePromoCode");

                    b.Property<bool>("IsCusPriceList");

                    b.Property<bool>("IsOrderByQR");

                    b.Property<int>("ItemPageSize");

                    b.Property<int>("ItemViewType");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("MacAddress");

                    b.Property<int>("PanelViewMode");

                    b.Property<int>("PaymentMeansID");

                    b.Property<bool>("PreviewReceipt");

                    b.Property<int>("PriceListID");

                    b.Property<string>("PrintBillName");

                    b.Property<int>("PrintCountBill");

                    b.Property<int>("PrintCountReceipt");

                    b.Property<bool>("PrintLabel");

                    b.Property<string>("PrintLabelName");

                    b.Property<int>("PrintOrderCount");

                    b.Property<int>("PrintReceiptOption");

                    b.Property<bool>("PrintReceiptOrder");

                    b.Property<bool>("PrintReceiptTender");

                    b.Property<string>("Printer");

                    b.Property<string>("PrinterOrder");

                    b.Property<int>("QueueCount");

                    b.Property<int>("QueueOption");

                    b.Property<double>("RateIn");

                    b.Property<double>("RateOut");

                    b.Property<string>("ReceiptTemplate");

                    b.Property<string>("Receiptsize");

                    b.Property<bool>("RememberCustomer");

                    b.Property<int>("SeriesID");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("Tax");

                    b.Property<int>("TaxOption");

                    b.Property<int>("UserID");

                    b.Property<bool>("VatAble");

                    b.Property<string>("VatNum");

                    b.Property<int>("WarehouseID");

                    b.Property<string>("Wifi");

                    b.HasKey("ID");

                    b.ToTable("tbGeneralSetting","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.ItemComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("tbItemComment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.AgingPayment", b =>
                {
                    b.Property<int>("AgingPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CustomerID");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Ref_No");

                    b.Property<string>("Remark");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<double>("TotalAmountDue");

                    b.Property<int>("UserID");

                    b.HasKey("AgingPaymentID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("tbAgingPayment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.AgingPaymentCustomer", b =>
                {
                    b.Property<int>("AgingPaymentCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("BalanceDue");

                    b.Property<int>("BranchID");

                    b.Property<double>("Cash");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("DocumentNo");

                    b.Property<string>("DocumentType");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<double>("OverdueDays");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("Status");

                    b.Property<int>("SysCurrency");

                    b.Property<string>("SysName");

                    b.Property<double>("Total");

                    b.Property<double>("TotalPayment");

                    b.Property<int>("WarehouseID");

                    b.HasKey("AgingPaymentCustomerID");

                    b.ToTable("tbAgingPaymentCustomer","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.AgingPaymentDetail", b =>
                {
                    b.Property<int>("AgingPaymentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgingPaymentID");

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("Cash");

                    b.Property<int>("CurrencyID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("DocumentNo");

                    b.Property<string>("DocumentType");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<double>("OverdueDays");

                    b.Property<double>("Total");

                    b.Property<double>("Totalpayment");

                    b.HasKey("AgingPaymentDetailID");

                    b.HasIndex("AgingPaymentID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("tbAgingPaymentDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.KvmsInfo", b =>
                {
                    b.Property<int>("KvmsInfoID");

                    b.Property<string>("Address");

                    b.Property<int>("AutoMID");

                    b.Property<string>("BrandName");

                    b.Property<string>("Code");

                    b.Property<string>("ColorName");

                    b.Property<int>("CusID");

                    b.Property<string>("Email");

                    b.Property<string>("Engine");

                    b.Property<string>("Frame");

                    b.Property<string>("ModelName");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Plate");

                    b.Property<int>("PriceListID");

                    b.Property<string>("QNo");

                    b.Property<int>("Status");

                    b.Property<string>("Type");

                    b.Property<string>("TypeName");

                    b.Property<string>("Year");

                    b.HasKey("KvmsInfoID");

                    b.ToTable("tbKvmsInfo","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.ReceiptDetailKvms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<string>("KhmerName");

                    b.Property<int>("Line_ID");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderDetailID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<int>("ReceiptKvmsID");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("ReceiptKvmsID");

                    b.HasIndex("UomID");

                    b.ToTable("tbReceiptDetailKvms","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.ReceiptDetailMemo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("ComboSaleType");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsKsms");

                    b.Property<bool>("IsKsmsMaster");

                    b.Property<bool>("IsReadonly");

                    b.Property<bool>("IsScale");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<int>("Line_ID");

                    b.Property<int>("OrderDetailID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<string>("ParentLineID");

                    b.Property<double>("Qty");

                    b.Property<int>("ReceiptMemoID");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalNet");

                    b.Property<double>("TotalSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<int>("VehicleId");

                    b.HasKey("ID");

                    b.ToTable("ReceiptDetailMemoKvms");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.ReceiptKvms", b =>
                {
                    b.Property<int>("ReceiptKvmsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("BalanceDue");

                    b.Property<int>("BranchID");

                    b.Property<bool>("Cancel");

                    b.Property<double>("Change");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrandTotal");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<int>("KvmsInfoID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNo")
                        .IsRequired();

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PriceListID");

                    b.Property<string>("QueueNo")
                        .IsRequired();

                    b.Property<string>("ReceiptNo")
                        .IsRequired();

                    b.Property<double>("Received");

                    b.Property<bool>("Return");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn")
                        .IsRequired();

                    b.Property<string>("TimeOut")
                        .IsRequired();

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis")
                        .IsRequired();

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ReceiptKvmsID");

                    b.HasIndex("KvmsInfoID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("TableID");

                    b.HasIndex("UserOrderID");

                    b.ToTable("tbReceiptKvms","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.ReceiptMemo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("BalanceDue");

                    b.Property<decimal>("BalancePay");

                    b.Property<decimal>("BalanceReturn");

                    b.Property<int>("BasedOn");

                    b.Property<int>("BranchID");

                    b.Property<decimal>("BuyXAmGetXDisRate");

                    b.Property<int>("BuyXAmGetXDisType");

                    b.Property<decimal>("BuyXAmGetXDisValue");

                    b.Property<int>("BuyXAmountGetXDisID");

                    b.Property<bool>("Cancel");

                    b.Property<decimal>("CardMemberDiscountRate");

                    b.Property<decimal>("CardMemberDiscountValue");

                    b.Property<double>("Change");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<double>("ChangeDisplay");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<double>("DisplayRate");

                    b.Property<int>("DocTypeID");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrandTotal");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<double>("GrandTotalDisplay");

                    b.Property<string>("GrandTotalOtherCurrenciesDisplay");

                    b.Property<double>("GrandTotalSys");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNo")
                        .IsRequired();

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PriceListID");

                    b.Property<double>("PromoCodeDiscRate");

                    b.Property<double>("PromoCodeDiscValue");

                    b.Property<int>("PromoCodeID");

                    b.Property<string>("QueueNo")
                        .IsRequired();

                    b.Property<int>("ReceiptKvmsID");

                    b.Property<string>("ReceiptMemoNo")
                        .IsRequired();

                    b.Property<string>("ReceiptNo")
                        .IsRequired();

                    b.Property<double>("Received");

                    b.Property<string>("RemarkDiscount");

                    b.Property<bool>("Return");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<int>("TaxGroupID");

                    b.Property<int>("TaxOption");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn")
                        .IsRequired();

                    b.Property<string>("TimeOut")
                        .IsRequired();

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis")
                        .IsRequired();

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("VehicleID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("ReceiptMemo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.OpenShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchID");

                    b.Property<double>("CashAmount_Sys");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<bool>("Open");

                    b.Property<int>("SysCurrencyID");

                    b.Property<string>("TimeIn");

                    b.Property<double>("Trans_From");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.ToTable("tbOpenShift","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AppliedAmount");

                    b.Property<int>("BranchID");

                    b.Property<decimal>("BuyXAmGetXDisRate");

                    b.Property<int>("BuyXAmGetXDisType");

                    b.Property<decimal>("BuyXAmGetXDisValue");

                    b.Property<int>("BuyXAmountGetXDisID");

                    b.Property<bool>("Cancel");

                    b.Property<decimal>("CardMemberDiscountRate");

                    b.Property<decimal>("CardMemberDiscountValue");

                    b.Property<double>("Change");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("Children");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("Female");

                    b.Property<decimal>("FreightAmount");

                    b.Property<double>("GrandTotal");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<string>("GrandTotalOtherCurrenciesDisplay");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<int>("Male");

                    b.Property<string>("OrderNo")
                        .IsRequired();

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PriceListID");

                    b.Property<double>("PromoCodeDiscRate");

                    b.Property<double>("PromoCodeDiscValue");

                    b.Property<int>("PromoCodeID");

                    b.Property<string>("QueueNo")
                        .IsRequired();

                    b.Property<string>("Reason");

                    b.Property<string>("ReceiptNo")
                        .IsRequired();

                    b.Property<double>("Received");

                    b.Property<string>("Remark");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<int>("TaxGroupID");

                    b.Property<int>("TaxOption");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn")
                        .IsRequired();

                    b.Property<string>("TimeOut")
                        .IsRequired();

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis")
                        .IsRequired();

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("VehicleID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("OrderID");

                    b.HasIndex("PLCurrencyID");

                    b.ToTable("tbOrder","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BaseQty");

                    b.Property<string>("Code");

                    b.Property<int>("ComboSaleType");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<int>("GroupUomID");

                    b.Property<bool>("IsBatchNo");

                    b.Property<bool>("IsKsms");

                    b.Property<bool>("IsKsmsMaster");

                    b.Property<bool>("IsReadonly");

                    b.Property<bool>("IsScale");

                    b.Property<bool>("IsSerialNumber");

                    b.Property<bool>("IsVoided");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<int>("LinePosition");

                    b.Property<int>("Line_ID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<string>("ParentLineID");

                    b.Property<string>("Prefix");

                    b.Property<double>("PrintQty");

                    b.Property<int>("PromoType");

                    b.Property<double>("Qty");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalNet");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("Uom");

                    b.Property<int>("UomID");

                    b.Property<int>("VehicleId");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UomID");

                    b.ToTable("tbOrderDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.OrderDetail_Addon", b =>
                {
                    b.Property<int>("AddOnID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<string>("Line_ID");

                    b.Property<int>("OrderDetailID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLineID");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.HasKey("AddOnID");

                    b.HasIndex("UomID");

                    b.ToTable("tbOrderDetailAddon","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Order_Queue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("OrderNo");

                    b.HasKey("ID");

                    b.ToTable("tbOrder_Queue","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Order_Receipt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("ReceiptID");

                    b.HasKey("ID");

                    b.ToTable("tbOrder_Receipt","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Receipt", b =>
                {
                    b.Property<int>("ReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFreight");

                    b.Property<decimal>("AppliedAmount");

                    b.Property<decimal>("BalancePay");

                    b.Property<decimal>("BalanceReturn");

                    b.Property<decimal>("BalanceToPay");

                    b.Property<int>("BranchID");

                    b.Property<decimal>("BuyXAmGetXDisRate");

                    b.Property<int>("BuyXAmGetXDisType");

                    b.Property<decimal>("BuyXAmGetXDisValue");

                    b.Property<int>("BuyXAmountGetXDisID");

                    b.Property<bool>("Cancel");

                    b.Property<decimal>("CardMemberDiscountRate");

                    b.Property<decimal>("CardMemberDiscountValue");

                    b.Property<double>("Change");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("Children");

                    b.Property<int>("CompanyID");

                    b.Property<double>("CumulativePoint");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("Female");

                    b.Property<double>("GrandTotal");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<string>("GrandTotalOtherCurrenciesDisplay");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<int>("Male");

                    b.Property<decimal>("OpenOtherPaymentGrandTotal");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNo")
                        .IsRequired();

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PriceListID");

                    b.Property<double>("PromoCodeDiscRate");

                    b.Property<double>("PromoCodeDiscValue");

                    b.Property<int>("PromoCodeID");

                    b.Property<string>("QueueNo")
                        .IsRequired();

                    b.Property<string>("ReceiptNo")
                        .IsRequired();

                    b.Property<double>("Received");

                    b.Property<double>("ReceivedPoint");

                    b.Property<string>("RemarkDiscount");

                    b.Property<bool>("Return");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<int>("TaxGroupID");

                    b.Property<int>("TaxOption");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn")
                        .IsRequired();

                    b.Property<string>("TimeOut")
                        .IsRequired();

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis")
                        .IsRequired();

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("VehicleID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ReceiptID");

                    b.HasIndex("PLCurrencyID");

                    b.HasIndex("TableID");

                    b.HasIndex("UserOrderID");

                    b.ToTable("tbReceipt","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.ReceiptDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("ComboSaleType");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsKsms");

                    b.Property<bool>("IsKsmsMaster");

                    b.Property<bool>("IsReadonly");

                    b.Property<bool>("IsScale");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<int>("LinePosition");

                    b.Property<int>("Line_ID");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderDetailID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<string>("ParentLineID");

                    b.Property<double>("PrintQty");

                    b.Property<int>("PromoType");

                    b.Property<double>("Qty");

                    b.Property<int>("ReceiptID");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalNet");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<int>("VehicleId");

                    b.HasKey("ID");

                    b.HasIndex("ReceiptID");

                    b.HasIndex("UomID");

                    b.ToTable("tbReceiptDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.SystemType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Status");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("tbSystemType","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.VoidOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<decimal>("BuyXAmGetXDisRate");

                    b.Property<int>("BuyXAmGetXDisType");

                    b.Property<decimal>("BuyXAmGetXDisValue");

                    b.Property<int>("BuyXAmountGetXDisID");

                    b.Property<bool>("Cancel");

                    b.Property<decimal>("CardMemberDiscountRate");

                    b.Property<decimal>("CardMemberDiscountValue");

                    b.Property<double>("Change");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrandTotal");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<string>("GrandTotalOtherCurrenciesDisplay");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("OrderNo")
                        .IsRequired();

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PriceListID");

                    b.Property<double>("PromoCodeDiscRate");

                    b.Property<double>("PromoCodeDiscValue");

                    b.Property<int>("PromoCodeID");

                    b.Property<string>("QueueNo")
                        .IsRequired();

                    b.Property<string>("Reason");

                    b.Property<string>("ReceiptNo")
                        .IsRequired();

                    b.Property<double>("Received");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<int>("TaxGroupID");

                    b.Property<int>("TaxOption");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn")
                        .IsRequired();

                    b.Property<string>("TimeOut")
                        .IsRequired();

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis")
                        .IsRequired();

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("OrderID");

                    b.HasIndex("PLCurrencyID");

                    b.ToTable("tbVoidOrder","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.VoidOrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("ComboSaleType");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsKsms");

                    b.Property<bool>("IsKsmsMaster");

                    b.Property<bool>("IsReadonly");

                    b.Property<bool>("IsScale");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<int>("Line_ID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<string>("ParentLineID");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalNet");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<int>("VehicleId");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UomID");

                    b.ToTable("tbVoidOrderDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.service.ServiceItemSales", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("Description");

                    b.Property<float>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<int>("Group1");

                    b.Property<int>("Group2");

                    b.Property<int>("Group3");

                    b.Property<int>("GroupUomID");

                    b.Property<string>("Image");

                    b.Property<double>("InStock");

                    b.Property<bool>("IsScale");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemType");

                    b.Property<string>("KhmerName");

                    b.Property<int>("PricListID");

                    b.Property<double>("PrintQty");

                    b.Property<string>("PrintTo");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<int>("TaxGroupSaleID");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("UoM");

                    b.Property<int>("UomID");

                    b.Property<double>("VAT");

                    b.HasKey("ID");

                    b.ToTable("ServiceItemSales","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.tmptable.TmpOrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<double>("ExchageRate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("ItemID");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("tmpOrderDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Production.BOMDetail", b =>
                {
                    b.Property<int>("BDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("BID");

                    b.Property<double>("Cost");

                    b.Property<bool>("Detele");

                    b.Property<int>("GUomID");

                    b.Property<int>("ItemID");

                    b.Property<bool>("NegativeStock");

                    b.Property<double>("Qty");

                    b.Property<int>("UomID");

                    b.HasKey("BDID");

                    b.HasIndex("BID");

                    b.HasIndex("GUomID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UomID");

                    b.ToTable("tbBOMDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Production.BOMaterial", b =>
                {
                    b.Property<int>("BID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ItemID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("SysCID");

                    b.Property<double>("TotalCost");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.HasKey("BID");

                    b.HasIndex("ItemID");

                    b.HasIndex("SysCID");

                    b.HasIndex("UomID");

                    b.HasIndex("UserID");

                    b.ToTable("tbBOMaterial","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.CardType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<double>("Discount");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TypeDis");

                    b.HasKey("ID");

                    b.ToTable("CardType","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.MemberCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approve");

                    b.Property<int>("CardTypeID");

                    b.Property<DateTime>("DateApprove");

                    b.Property<DateTime>("DateCreate");

                    b.Property<bool>("Delete");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Ref_No")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ID");

                    b.HasIndex("CardTypeID");

                    b.ToTable("tbMemberCard","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.Point", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<bool>("Delete");

                    b.Property<int>("Points");

                    b.Property<int>("Quantity");

                    b.HasKey("ID");

                    b.ToTable("tbPoint","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.PointDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<int?>("ItemID");

                    b.Property<int>("PointID");

                    b.Property<double>("Price");

                    b.Property<int>("Qty");

                    b.Property<int?>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ItemID");

                    b.HasIndex("PointID");

                    b.HasIndex("UomID");

                    b.ToTable("tbPointDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.Promotion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("StopDate");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("tbPromotion","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.PromotionPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<float>("Discount");

                    b.Property<string>("Name");

                    b.Property<string>("TypeDis");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("tbPromotionPrice","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodReciptPODetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GoodsReciptPOID");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderID");

                    b.Property<double>("PurchasPrice");

                    b.Property<double>("Qty");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("GoodsReciptPOID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UomID");

                    b.ToTable("tbGoodsReciptPODatail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodsReceiptPoReturn", b =>
                {
                    b.Property<int>("GoodsReturnID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Additional_Expense");

                    b.Property<string>("Additional_Node");

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("Applied_AmountSys");

                    b.Property<double>("Balance_Due");

                    b.Property<double>("Balance_Due_Sys");

                    b.Property<int>("BranchID");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValues");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<double>("Down_Payment");

                    b.Property<double>("Down_PaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<string>("Reff_No");

                    b.Property<string>("Remark");

                    b.Property<double>("Return_Amount");

                    b.Property<string>("Status");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("Sub_Total");

                    b.Property<double>("Sub_Total_sys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValuse");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("GoodsReturnID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbGoodReceiptReturn","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodsReceiptPoReturnDetail", b =>
                {
                    b.Property<int>("GoodsReturnDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("APID");

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GoodsReceiptPoReturnID");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<double>("Qty");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("GoodsReturnDetailID");

                    b.HasIndex("GoodsReceiptPoReturnID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("UomID");

                    b.ToTable("tbGoodsReceiptReturnDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodsReciptPO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbGoodsReciptPO","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseAPReserve", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CopyToNote");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("PurchaseAPReserve");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseAPReserveDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderID");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseAPReserveID");

                    b.Property<double>("Qty");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("PurchaseAPReserveID");

                    b.HasIndex("UomID");

                    b.ToTable("PurchaseAPReserveDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseCreditMemo", b =>
                {
                    b.Property<int>("PurchaseMemoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("PurchaseMemoID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbPurchaseCreditMemo","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseCreditMemoDetail", b =>
                {
                    b.Property<int>("PurchaseMemoDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseCreditMemoID");

                    b.Property<double>("Qty");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("PurchaseMemoDetailID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("PurchaseCreditMemoID");

                    b.HasIndex("UomID");

                    b.ToTable("tbPurchaseCreditMemoDetail");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbPurchaseOrder","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OldQty");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseOrderID");

                    b.Property<double>("Qty");

                    b.Property<int>("QuotationID");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("PurchaseOrderDetailID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("PurchaseOrderID");

                    b.HasIndex("UomID");

                    b.ToTable("tbPurchaseOrderDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseQuotation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbPurchaseQuotation","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseQuotationDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OldQty");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseQuotationID");

                    b.Property<double>("Qty");

                    b.Property<int>("QuotationID");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("PurchaseQuotationID");

                    b.HasIndex("UomID");

                    b.ToTable("tbPurchaseQuotationDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<int>("RequesterID");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("tbPurchaseRequest","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseRequestDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OldQty");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseRequestID");

                    b.Property<double>("Qty");

                    b.Property<int>("QuotationID");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<int>("UomID");

                    b.Property<int>("VendorID");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseRequestID");

                    b.ToTable("tbPurchaseRequestDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.Purchase_AP", b =>
                {
                    b.Property<int>("PurchaseAPID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("PurchaseAPID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbPurchase_AP","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.Purchase_APDetail", b =>
                {
                    b.Property<int>("PurchaseDetailAPID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LineID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderID");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseAPID");

                    b.Property<double>("Qty");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("PurchaseDetailAPID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LocalCurrencyID");

                    b.HasIndex("PurchaseAPID");

                    b.HasIndex("UomID");

                    b.ToTable("tbPurchaseAPDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportDashboard.DashboardSaleSummary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency");

                    b.Property<string>("Name");

                    b.Property<double>("Total");

                    b.HasKey("ID");

                    b.ToTable("db_SaleSummary","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportDashboard.DashboardTopSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("InStock");

                    b.Property<string>("KhmerName");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("db_DashboardTopSale","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportDashboard.StockExpired", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpireDate");

                    b.Property<string>("KhmerName");

                    b.HasKey("ID");

                    b.ToTable("db_StockExpire","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportInventory.StockInWarehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<double>("Committed");

                    b.Property<string>("EnglishName");

                    b.Property<string>("ExpireDate");

                    b.Property<string>("Image");

                    b.Property<double>("InStock");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Ordered");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("rp_StokInWarehouse","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportInventory.StockInWarehouse_Detail", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Committed");

                    b.Property<string>("Cost");

                    b.Property<string>("ExpireDate");

                    b.Property<int>("ID");

                    b.Property<double>("InStock");

                    b.Property<double>("Ordered");

                    b.Property<string>("Uom");

                    b.Property<int>("UomID");

                    b.Property<string>("Warehouse");

                    b.HasKey("ItemID");

                    b.ToTable("rp_StockInWarehouse_Detail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportInventory.SummaryDetaitTransferStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("EnglishName");

                    b.Property<string>("ExpireDate");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Qty");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("rp_SummaryDetailTransferStock","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportInventory.SummaryTransferStock", b =>
                {
                    b.Property<int>("TranID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentDate");

                    b.Property<string>("Number");

                    b.Property<string>("PostingDate");

                    b.Property<string>("Time");

                    b.HasKey("TranID");

                    b.ToTable("rp_SummaryTansferStock","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportPurchase.DetailPurchaseAp", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<double>("DisItem");

                    b.Property<string>("EnglishName");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Qty");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("Uom");

                    b.HasKey("PurchaseID");

                    b.ToTable("rp_DetailPurchaseAP","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportPurchase.SummaryDetailOutgoingPayment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BalanceDue");

                    b.Property<double>("Cash");

                    b.Property<string>("Date");

                    b.Property<double>("Discount");

                    b.Property<string>("DocumentNo");

                    b.Property<string>("DocumentType");

                    b.Property<string>("LocalCurrency");

                    b.Property<double>("OverdueDay");

                    b.Property<double>("TotalPay");

                    b.HasKey("ID");

                    b.ToTable("rp_SummaryDetailOutgoingPayment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportPurchase.SummaryOutgoingPayment", b =>
                {
                    b.Property<int>("OutID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentDate");

                    b.Property<string>("Number");

                    b.Property<string>("PostingDate");

                    b.Property<string>("SysCurrency");

                    b.Property<double>("TotalAmountDue");

                    b.HasKey("OutID");

                    b.ToTable("rp_SummaryOutgoingPayment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportPurchase.SummaryPurchaseAP", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Applied_Amount");

                    b.Property<double>("Balance_Deu_Sys");

                    b.Property<double>("Balance_Due");

                    b.Property<string>("Branch");

                    b.Property<double>("DiscountRate");

                    b.Property<string>("DocumentDate");

                    b.Property<string>("DueDate");

                    b.Property<string>("Invoice");

                    b.Property<string>("LocalCurrency");

                    b.Property<string>("PostingDate");

                    b.Property<double>("SubTotal_Sys");

                    b.Property<double>("Sub_Total");

                    b.Property<string>("SysCurrency");

                    b.Property<double>("TaxRate");

                    b.Property<string>("User");

                    b.Property<string>("VendorName");

                    b.Property<string>("Warehouse");

                    b.HasKey("PurchaseID");

                    b.ToTable("rp_SummaryPurchaseAP","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportPurchase.dev.SummaryPurchaseTotal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSSC");

                    b.Property<double>("CountReceipt");

                    b.Property<double>("DiscountItem");

                    b.Property<double>("DiscountTotal");

                    b.HasKey("ID");

                    b.ToTable("rp_SummaryTotalPurchase","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.DetailSale", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<double>("DisItem");

                    b.Property<string>("EnglishName");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Qty");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("Uom");

                    b.HasKey("OrderID");

                    b.ToTable("rp_DetailSale","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.DetailTopSaleQty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateOut");

                    b.Property<double>("Qty");

                    b.Property<string>("TimeOut");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("rp_DetailTopSale","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.ReportCloseShft", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<double>("CashInAmount");

                    b.Property<double>("CashOutAmount");

                    b.Property<string>("DateIn");

                    b.Property<string>("DateOut");

                    b.Property<string>("LocalCurrency");

                    b.Property<double>("SaleAmount_Local");

                    b.Property<double>("SaleAmount_Sys");

                    b.Property<string>("SysCurrency");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<double>("Tran_From");

                    b.Property<double>("Tran_To");

                    b.Property<string>("User");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("rp_CloseShift","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.RevenueItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<double>("Cost");

                    b.Property<double>("CumulativeQty");

                    b.Property<double>("CumulativeValue");

                    b.Property<int>("CurrencyID");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("ItemID");

                    b.Property<double>("OpenQty");

                    b.Property<double>("Price");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<int>("ReceiptID");

                    b.Property<DateTime>("SystemDate")
                        .HasColumnType("Date");

                    b.Property<string>("TimeIn");

                    b.Property<string>("Trans_Type");

                    b.Property<double>("Trans_Valuse");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UomID");

                    b.HasIndex("UserID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("tbRevenueItem","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.SummaryRevenuesItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("EnglishName");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Price");

                    b.Property<double>("Profit");

                    b.Property<double>("Qty");

                    b.Property<double>("TotalCost");

                    b.Property<double>("TotalPrice");

                    b.Property<string>("Uom");

                    b.HasKey("ItemID");

                    b.ToTable("rp_SummaryRevenuseItem","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.SummarySale", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<string>("DateIn");

                    b.Property<string>("DateOut");

                    b.Property<double>("GrandTotal");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<string>("LocalCurrency");

                    b.Property<string>("Receipt");

                    b.Property<string>("SysCurrency");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<string>("User");

                    b.HasKey("OrderID");

                    b.ToTable("rp_summarysale","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.TopSaleQuantity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<string>("Code");

                    b.Property<string>("DateOut");

                    b.Property<string>("EnglishName");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Qty");

                    b.Property<string>("TimeOut");

                    b.Property<string>("Uom");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.ToTable("rp_TopSaleQuantity","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.dev.CashoutPaymentMeans", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("Currency");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<string>("Currency_Sys");

                    b.Property<string>("DateIn");

                    b.Property<string>("DateOut");

                    b.Property<double>("DisItemValue");

                    b.Property<string>("EmpName");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("ExchangeRate_Display");

                    b.Property<double>("GrandTotal");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<string>("PaymentMeans");

                    b.Property<string>("ReceiptDate");

                    b.Property<string>("ReceiptNo");

                    b.Property<string>("ReceiptTime");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<double>("TotalCashIn_Sys");

                    b.Property<double>("TotalCashOut_Sys");

                    b.Property<double>("TotalDiscountItem");

                    b.Property<double>("TotalDiscountTotal");

                    b.Property<double>("TotalSoldAmount");

                    b.Property<double>("TotalVat");

                    b.HasKey("ID");

                    b.ToTable("rp_CashoutPaymentMeans","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.dev.CashoutReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Currency");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<string>("Currency_Sys");

                    b.Property<string>("DateIn");

                    b.Property<string>("DateOut");

                    b.Property<double>("DisItemValue");

                    b.Property<string>("EmpName");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("ExchangeRate_Display");

                    b.Property<double>("GrandTotal");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<string>("ItemGroup1");

                    b.Property<string>("ItemGroup2");

                    b.Property<string>("ItemGroup3");

                    b.Property<int>("ItemId");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Price");

                    b.Property<double>("Qty");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<double>("Total");

                    b.Property<double>("TotalCashIn_Sys");

                    b.Property<double>("TotalCashOut_Sys");

                    b.Property<double>("TotalDiscountItem");

                    b.Property<double>("TotalDiscountTotal");

                    b.Property<double>("TotalSoldAmount");

                    b.Property<double>("TotalVat");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("rp_Cashout","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.dev.SummaryTotalSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountReceipt");

                    b.Property<double>("DiscountItem");

                    b.Property<double>("DiscountTotal");

                    b.Property<double>("GrandTotal");

                    b.Property<double>("GrandTotalSys");

                    b.Property<double>("SoldAmount");

                    b.Property<double>("TaxValue");

                    b.HasKey("ID");

                    b.ToTable("rp_SummaryTotalSale","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSaleAdmin.SummarySaleAdmin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("CountInvoice");

                    b.Property<double>("DisCountItem");

                    b.Property<double>("DisCountTotal");

                    b.Property<double>("SoldAmount");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalVatRate");

                    b.HasKey("ID");

                    b.ToTable("SummarySaleAdmin");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.CheckPayment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Check");

                    b.Property<string>("Invoice");

                    b.HasKey("ID");

                    b.ToTable("ServiceCheckPayment","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.DiscountItemDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Currency");

                    b.Property<double>("Discount");

                    b.Property<string>("EnglishName");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Price");

                    b.Property<string>("TypeDis");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("ServiceDiscountItemDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemCopyToPriceList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromPriceListID");

                    b.Property<int>("ToPriceListID");

                    b.HasKey("ID");

                    b.ToTable("tpItemCopyToPriceList","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemCopyToPriceListDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<int>("ItemCopyToPriceListID");

                    b.Property<int>("ItemID");

                    b.HasKey("ID");

                    b.HasIndex("ItemCopyToPriceListID");

                    b.ToTable("tpItemCopyToPriceListDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemCopyToWH", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ToWHID");

                    b.HasKey("ID");

                    b.ToTable("tpItemCopyToWH","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemCopyToWHDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemCopyToWHID");

                    b.Property<int>("ItemID");

                    b.HasKey("ID");

                    b.HasIndex("ItemCopyToWHID");

                    b.ToTable("tpItemCopyToWHDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemMasterDataService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<string>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("EnglishName");

                    b.Property<int>("Group1");

                    b.Property<int>("Group2");

                    b.Property<int>("Group3");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("PricListID");

                    b.Property<string>("Process");

                    b.Property<string>("SysCurrency");

                    b.Property<string>("UnitPrice");

                    b.Property<string>("UoM");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.ToTable("ServiceMasterData","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.PricelistSetPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<double>("Discount");

                    b.Property<string>("EnglishName");

                    b.Property<string>("KhmerName");

                    b.Property<double>("Makup");

                    b.Property<double>("Price");

                    b.Property<string>("Process");

                    b.Property<string>("SysCurrency");

                    b.Property<string>("TypeDis");

                    b.Property<string>("Uom");

                    b.HasKey("ID");

                    b.ToTable("ServicePricelistSetPrice","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServiceMapItemMasterDataPurchasAP", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("ExpireDate");

                    b.Property<int>("GroupUomID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseDetailAPID");

                    b.Property<double>("Qty");

                    b.Property<double>("SetRate");

                    b.Property<string>("SysCurrency");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.ToTable("ServiceMapItemMasterDataPurchasAP","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServiceMapItemMasterDataPurchaseCreditMemo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("ExpireDate");

                    b.Property<int>("GroupUomID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseMemoDetailID");

                    b.Property<double>("Qty");

                    b.Property<double>("SetRate");

                    b.Property<string>("SysCurrency");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.ToTable("ServiceMapItemMasterDataPurchaseCreditMemo","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServiceMapItemMasterDataPurchaseOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Barcode");

                    b.Property<bool>("Choosed");

                    b.Property<string>("Code");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("ExpireDate");

                    b.Property<int>("GroupUomID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<int>("PurchaseOrderDetailID");

                    b.Property<double>("Qty");

                    b.Property<double>("SetRate");

                    b.Property<string>("SysCurrency");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.ToTable("ServiceMapItemMasterDataPurchaseOrder","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServiceMapItemMasterDataQuotation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Barcode");

                    b.Property<bool>("Choosed");

                    b.Property<string>("Code");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<string>("ExpireDate");

                    b.Property<int>("GroupUomID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<string>("ManageExpire");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PurchasPrice");

                    b.Property<double>("Qty");

                    b.Property<int>("QuotationDetailID");

                    b.Property<string>("QuotedDate");

                    b.Property<string>("RequiredDate");

                    b.Property<double>("RequiredQty");

                    b.Property<string>("SysCurrency");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.ToTable("ServiceMapItemMasterDataQuotation","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServiceMapItemPurchaseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("GroupUomID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<double>("OpenQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remark");

                    b.Property<int>("RequestDetailID");

                    b.Property<string>("RequiredDate");

                    b.Property<string>("SysCurrency");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("Total");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<int>("VendorID");

                    b.Property<string>("VendorName");

                    b.HasKey("ID");

                    b.ToTable("ServiceMapItemMasterPurchaseRequest","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServicePointDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("CurrencyName");

                    b.Property<string>("EnglishName");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("Qty");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.ToTable("ServicePointDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServicePriceListCopyItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<string>("EnglishName");

                    b.Property<string>("KhmerName");

                    b.Property<string>("Process");

                    b.Property<string>("UoM");

                    b.HasKey("ItemID");

                    b.ToTable("ServicePriceListCopyItem");
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ServiceQuotationDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<string>("Code");

                    b.Property<string>("EnglishName");

                    b.Property<double>("ExchangeRate");

                    b.Property<int>("GroupUomID");

                    b.Property<int>("ItemID");

                    b.Property<string>("KhmerName");

                    b.Property<int>("LineID");

                    b.Property<string>("LocalCurrency");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("PurchasePrice");

                    b.Property<int>("PurchaseQuotationID");

                    b.Property<double>("Qty");

                    b.Property<int>("QuotationDetailID");

                    b.Property<string>("SysCurrency");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("Total");

                    b.Property<double>("Total_Sys");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.ToTable("ServiceQuotationDetail","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Temporary_Table.GoodReceiptStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("ItemID");

                    b.Property<int>("LocalcurrencyID");

                    b.Property<double>("Qty");

                    b.Property<int>("UomID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("tpGoodReciptStock","dbo");
                });

            modelBuilder.Entity("CKBS.Models.Temporary_Table.TpPriceList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PirceListID");

                    b.Property<int>("currencyID");

                    b.HasKey("ID");

                    b.ToTable("tpPriceList","dbo");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.GeneralSettingAdmin.Display", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amounts");

                    b.Property<string>("DecimalSeparator");

                    b.Property<int>("DisplayCurrencyID");

                    b.Property<int>("Percent");

                    b.Property<int>("Prices");

                    b.Property<int>("Quantities");

                    b.Property<int>("Rates");

                    b.Property<string>("ThousandsSep");

                    b.Property<int>("Units");

                    b.HasKey("ID");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ProjectCostAnalysis.FreightProjCostDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountWithTax");

                    b.Property<int>("FreightID");

                    b.Property<int>("FreightProjectCostID");

                    b.Property<string>("Name");

                    b.Property<string>("TaxGroup");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TotalTaxAmount");

                    b.HasKey("ID");

                    b.HasIndex("FreightProjectCostID");

                    b.ToTable("tbFreightProjCostDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ProjectCostAnalysis.FreightProjectCost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountReven");

                    b.Property<decimal>("OpenAmountReven");

                    b.Property<int>("ProjCAID");

                    b.Property<int>("SaleType");

                    b.Property<decimal>("TaxSumValue");

                    b.HasKey("ID");

                    b.ToTable("tbFreightProjectCost");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ProjectCostAnalysis.ProjCostAnalysisDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<double>("InStock");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<decimal>("LineTotalBeforeDis");

                    b.Property<decimal>("LineTotalCost");

                    b.Property<decimal>("LineTotalMargin");

                    b.Property<double>("OpenQty");

                    b.Property<string>("Process");

                    b.Property<int>("ProjectCostAnalysisID");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<decimal>("UnitMargin");

                    b.Property<double>("UnitPrice");

                    b.Property<decimal>("UnitPriceAfterDis");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("ID");

                    b.HasIndex("ProjectCostAnalysisID");

                    b.ToTable("tbProjCostAnalysisDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ProjectCostAnalysis.ProjectCostAnalysis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseOnID");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<int>("ConTactID");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("ExpectedTotalProfit");

                    b.Property<double>("FreightAmount");

                    b.Property<double>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("KeyCopy");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Name");

                    b.Property<double>("OtherCost");

                    b.Property<int>("OwnerID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEMID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<double>("SubTotalAfterDis");

                    b.Property<double>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalBefDis");

                    b.Property<double>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<double>("TotalCommission");

                    b.Property<double>("TotalMargin");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<DateTime>("ValidUntilDate")
                        .HasColumnType("Date");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("tbProjectCostAnalysis");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ARDownPayment", b =>
                {
                    b.Property<int>("ARDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ARID");

                    b.Property<decimal>("AppliedAmount");

                    b.Property<decimal>("AppliedAmountSys");

                    b.Property<decimal>("BalanceDue");

                    b.Property<decimal>("BalanceDueSys");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<decimal>("DPMRate");

                    b.Property<decimal>("DPMValue");

                    b.Property<decimal>("DisRate");

                    b.Property<decimal>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<decimal>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("Total");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<DateTime>("ValidUntilDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("VatRate");

                    b.Property<decimal>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ARDID");

                    b.ToTable("ARDownPayment");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ARDownPaymentDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ARDID");

                    b.Property<decimal>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<decimal>("DisRate");

                    b.Property<decimal>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<decimal>("OpenQty");

                    b.Property<decimal>("PrintQty");

                    b.Property<string>("Process");

                    b.Property<decimal>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SQDID");

                    b.Property<decimal>("TaxDownPaymentValue");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<decimal>("TotalWTax");

                    b.Property<decimal>("TotalWTaxSys");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.HasIndex("ARDID");

                    b.ToTable("ARDownPaymentDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ARReserveInvoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<string>("Types");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("ARReserveInvoice");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ARReserveInvoiceDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ARReserveInvoiceID");

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SDDID");

                    b.Property<int>("SODID");

                    b.Property<int>("SQDID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("ID");

                    b.HasIndex("ARReserveInvoiceID");

                    b.ToTable("ARReserveInvoiceDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.AttchmentFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentDate");

                    b.Property<int?>("ContractBilingID");

                    b.Property<bool>("Delete");

                    b.Property<string>("FileName");

                    b.Property<int>("ServiceContractID");

                    b.Property<string>("TargetPath");

                    b.HasKey("ID");

                    b.HasIndex("ContractBilingID");

                    b.HasIndex("ServiceContractID");

                    b.ToTable("AttchmentFile");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.DraftAR", b =>
                {
                    b.Property<int>("DraftID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<string>("DraftName");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<bool>("Remove");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("DraftID");

                    b.ToTable("DraftAR");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.DraftARDetail", b =>
                {
                    b.Property<int>("DraftDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DraftID");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("DraftDetailID");

                    b.HasIndex("DraftID");

                    b.ToTable("DraftARDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.FreightSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountReven");

                    b.Property<decimal>("OpenAmountReven");

                    b.Property<int>("SaleID");

                    b.Property<int>("SaleType");

                    b.Property<decimal>("TaxSumValue");

                    b.HasKey("ID");

                    b.ToTable("FreightSale");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.FreightSaleDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountWithTax");

                    b.Property<int>("FreightID");

                    b.Property<int>("FreightSaleID");

                    b.Property<string>("Name");

                    b.Property<string>("TaxGroup");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TotalTaxAmount");

                    b.HasKey("ID");

                    b.HasIndex("FreightSaleID");

                    b.ToTable("FreightSaleDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ReturnDelivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BasedOn");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<decimal>("DisRate");

                    b.Property<decimal>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<decimal>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("ReturnDelivery");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ReturnDeliveryDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("ReturnDeliveryID");

                    b.Property<int>("SDDID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.HasIndex("ReturnDeliveryID");

                    b.ToTable("ReturnDeliveryDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleAR", b =>
                {
                    b.Property<int>("SARID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<int>("GLAccID");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("SARID");

                    b.ToTable("tbSaleAR");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleARDetail", b =>
                {
                    b.Property<int>("SARDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SARID");

                    b.Property<int>("SDDID");

                    b.Property<int>("SODID");

                    b.Property<int>("SQDID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("SARDID");

                    b.HasIndex("SARID");

                    b.ToTable("tbSaleARDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleAREdite", b =>
                {
                    b.Property<int>("SARID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("SARID");

                    b.ToTable("SaleAREdites");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleAREditeDetail", b =>
                {
                    b.Property<int>("SARDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<double>("EditeQty");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SARID");

                    b.Property<int>("SDDID");

                    b.Property<int>("SODID");

                    b.Property<int>("SQDID");

                    b.Property<int?>("SaleAREditeHistoryID");

                    b.Property<int>("Status");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("SARDID");

                    b.HasIndex("SARID");

                    b.HasIndex("SaleAREditeHistoryID");

                    b.ToTable("SaleAREditeDetails");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleAREditeDetailHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<double>("EditeQty");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SARDID");

                    b.Property<int>("SAREID");

                    b.Property<int>("SARID");

                    b.Property<int>("SDDID");

                    b.Property<int>("SODID");

                    b.Property<int>("SQDID");

                    b.Property<int>("Status");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("ID");

                    b.ToTable("SaleAREditeDetailHistory");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleAREditeHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SARID");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("SaleAREditeHistory");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleCreditMemo", b =>
                {
                    b.Property<int>("SCMOID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AppliedAmount");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BasedOn");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<decimal>("DPMValue");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SaleType");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("SCMOID");

                    b.ToTable("SaleCreditMemos");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleCreditMemoDetail", b =>
                {
                    b.Property<int>("SCMODID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SARDID");

                    b.Property<int>("SCMOID");

                    b.Property<decimal>("TaxDownPaymentValue");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("SCMODID");

                    b.HasIndex("SCMOID");

                    b.ToTable("tbSaleCreditMemoDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleDelivery", b =>
                {
                    b.Property<int>("SDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("SDID");

                    b.ToTable("tbSaleDelivery");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleDeliveryDetail", b =>
                {
                    b.Property<int>("SDDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SDID");

                    b.Property<int>("SODID");

                    b.Property<int>("SQDID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("SDDID");

                    b.HasIndex("SDID");

                    b.ToTable("tbSaleDeliveryDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleOrder", b =>
                {
                    b.Property<int>("SOID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("SOID");

                    b.ToTable("tbSaleOrder","dbo");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleOrderDetail", b =>
                {
                    b.Property<int>("SODID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SOID");

                    b.Property<int>("SQDID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("SODID");

                    b.HasIndex("SOID");

                    b.ToTable("tbSaleOrderDetail","dbo");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleQuote", b =>
                {
                    b.Property<int>("SQID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseonProjCostANID");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<int>("ReceivedBy");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("RequestedBy");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("ShippedBy");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<DateTime>("ValidUntilDate")
                        .HasColumnType("Date");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("SQID");

                    b.ToTable("tbSaleQuote");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleQuoteDetail", b =>
                {
                    b.Property<int>("SQDID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<string>("Process");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SQID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("SQDID");

                    b.HasIndex("SQID");

                    b.ToTable("tbSaleQuoteDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ServiceContract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalContractNo");

                    b.Property<double>("AppliedAmount");

                    b.Property<int>("BaseOnID");

                    b.Property<string>("BasedCopyKeys");

                    b.Property<int>("BranchID");

                    b.Property<DateTime>("ChangeLog");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("ContractENDate");

                    b.Property<DateTime>("ContractRenewalDate");

                    b.Property<DateTime>("ContractStartDate");

                    b.Property<int>("ContractTemplateID");

                    b.Property<string>("ContractType");

                    b.Property<string>("CopyKey");

                    b.Property<int>("CopyType");

                    b.Property<int>("CusID");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DownPayment");

                    b.Property<decimal>("DownPaymentSys");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("FeeAmount");

                    b.Property<string>("FeeNote");

                    b.Property<decimal>("FreightAmount");

                    b.Property<decimal>("FreightAmountSys");

                    b.Property<bool>("IncludeVat");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remark");

                    b.Property<string>("Remarks");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEmID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<decimal>("SubTotalBefDis");

                    b.Property<decimal>("SubTotalBefDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalAmountSys");

                    b.Property<string>("TypeDis");

                    b.Property<string>("Types");

                    b.Property<int>("UserID");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("ServiceContract");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ServiceContractDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<bool>("Delete");

                    b.Property<double>("DisRate");

                    b.Property<double>("DisValue");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<double>("Factor");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("GUomID");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<string>("ItemType");

                    b.Property<double>("OpenQty");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SDDID");

                    b.Property<int>("SODID");

                    b.Property<int>("SQDID");

                    b.Property<int>("ServiceContractID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<double>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("ID");

                    b.HasIndex("ServiceContractID");

                    b.ToTable("ServiceContractDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Account.AuthorizationTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Option");

                    b.HasKey("ID");

                    b.ToTable("AuthorizationTemplate");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.Activity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Activities");

                    b.Property<int>("AssignByName");

                    b.Property<int>("BPID");

                    b.Property<int>("EmpID");

                    b.Property<int>("EmpNameID");

                    b.Property<int>("Number");

                    b.Property<bool>("Personal");

                    b.Property<int>("SubNameID");

                    b.Property<int>("TypeID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.General", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityID");

                    b.Property<bool>("After");

                    b.Property<bool>("By");

                    b.Property<DateTime>("ByDate");

                    b.Property<bool>("Days");

                    b.Property<string>("DaysInMonthly");

                    b.Property<string>("DaysOfAnnualy");

                    b.Property<string>("Durration");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("Fri");

                    b.Property<string>("Location");

                    b.Property<bool>("Mon");

                    b.Property<string>("MonthsInAnnualy");

                    b.Property<string>("MonthsOfAnnulay");

                    b.Property<bool>("NoEndDate");

                    b.Property<int>("NumAfter");

                    b.Property<int>("NumOfMonths");

                    b.Property<string>("NumofAnnualy");

                    b.Property<string>("Priority");

                    b.Property<string>("Recurrence");

                    b.Property<string>("Remark");

                    b.Property<int>("RepeatDate");

                    b.Property<bool>("RepeatEveryRecurr");

                    b.Property<bool>("RepeatEveryWeek");

                    b.Property<int>("RepeatNumOfmonths");

                    b.Property<bool>("RepeatOncheckYearly");

                    b.Property<int>("RepeatofNumAnnualy");

                    b.Property<bool>("Sat");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Status");

                    b.Property<bool>("Sun");

                    b.Property<bool>("Thu");

                    b.Property<bool>("Tue");

                    b.Property<bool>("Wed");

                    b.Property<bool>("checkNumAnnualy");

                    b.Property<int>("numDay");

                    b.Property<string>("numOfRepeat");

                    b.Property<bool>("repeatOn");

                    b.HasKey("ID");

                    b.HasIndex("ActivityID")
                        .IsUnique();

                    b.ToTable("General");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.SetupActivity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activities");

                    b.HasKey("ID");

                    b.ToTable("SetupActivity");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.SetupLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("SetupLocation");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.SetupStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("ID");

                    b.ToTable("SetupStatus");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.SetupSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TypeID");

                    b.HasKey("ID");

                    b.ToTable("SetupSubject");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.SetupType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("SetupType");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.CanRingSetup.CanRing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChangeQty");

                    b.Property<decimal>("ChargePrice");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ItemChangeID");

                    b.Property<int>("ItemID");

                    b.Property<string>("Name");

                    b.Property<int>("PriceListID");

                    b.Property<decimal>("Qty");

                    b.Property<int>("UomChangeID");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("CanRing");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.General.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.Inventory.StockOut", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("Date");

                    b.Property<int>("BPID");

                    b.Property<string>("BatchAttr1");

                    b.Property<string>("BatchAttr2");

                    b.Property<string>("BatchNo");

                    b.Property<int>("Contract");

                    b.Property<decimal>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("Details");

                    b.Property<int>("Direction");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<int>("FromWareDetialID");

                    b.Property<decimal>("InStock");

                    b.Property<int>("ItemID");

                    b.Property<string>("Location");

                    b.Property<string>("LotNumber");

                    b.Property<DateTime?>("MfrDate")
                        .HasColumnType("Date");

                    b.Property<string>("MfrSerialNumber");

                    b.Property<DateTime?>("MfrWarDateEnd")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("MfrWarDateStart")
                        .HasColumnType("Date");

                    b.Property<int>("OutStockFrom");

                    b.Property<int>("ProcessItem");

                    b.Property<string>("SerialNumber");

                    b.Property<DateTime>("SyetemDate")
                        .HasColumnType("Date");

                    b.Property<int>("SysNum");

                    b.Property<DateTime>("TimeIn");

                    b.Property<int>("TransID");

                    b.Property<int>("TransType");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("StockOut");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.AccountMemberCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashAccID");

                    b.Property<int>("UnearnedRevenueID");

                    b.HasKey("ID");

                    b.ToTable("AccountMemberCards");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.ControlAccountsReceivable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustID");

                    b.Property<int>("GLAID");

                    b.Property<string>("TypeOfAccount");

                    b.HasKey("ID");

                    b.ToTable("ControlAccountsReceivable");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLAccountDetermination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CusID");

                    b.Property<int>("GLID");

                    b.Property<int>("SaleGLDeterminationMasterID");

                    b.Property<string>("TypeOfAccount");

                    b.HasKey("ID");

                    b.HasIndex("SaleGLDeterminationMasterID");

                    b.ToTable("SaleGLAccountDetermination");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLAccountDeterminationResources", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GLAID");

                    b.Property<int>("SaleGLDeterminationMasterID");

                    b.Property<string>("TypeOfAccount");

                    b.HasKey("ID");

                    b.HasIndex("SaleGLDeterminationMasterID");

                    b.ToTable("SaleGLADeterRes");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLDeterminationMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountMemberCardID");

                    b.Property<int>("CusID");

                    b.HasKey("ID");

                    b.HasIndex("AccountMemberCardID");

                    b.ToTable("SaleGLADeter");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.AlertManagement.ExpirationStockItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddmissionDate");

                    b.Property<string>("BatchAttribute1");

                    b.Property<string>("BatchAttribute2");

                    b.Property<string>("BatchNo");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("ImageItem");

                    b.Property<decimal>("Instock");

                    b.Property<bool>("IsRead");

                    b.Property<string>("ItemBarcode");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemId");

                    b.Property<string>("ItemName");

                    b.Property<DateTime?>("MfrDate");

                    b.Property<string>("Type");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.Property<int>("UserID");

                    b.Property<int>("WareDId");

                    b.Property<int>("WarehouseId");

                    b.Property<string>("WarehouseName");

                    b.HasKey("ID");

                    b.ToTable("ExpirationStockItems");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.AlertManagement.ServiceContractAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPID");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("DueDateType");

                    b.Property<int>("InvoiceID");

                    b.Property<string>("InvoiceNumber");

                    b.Property<bool>("IsRead");

                    b.Property<string>("Name");

                    b.Property<int>("SeriesDID");

                    b.Property<string>("TimeLeft");

                    b.Property<string>("Type");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ServiceContractAlerts");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Banking.TaxGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CompanyID");

                    b.Property<bool>("Delete");

                    b.Property<int>("GLID");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.ToTable("TaxGroup","dbo");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Banking.TaxGroupDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EffectiveFrom");

                    b.Property<decimal>("Rate");

                    b.Property<int>("TaxGroupID");

                    b.HasKey("ID");

                    b.HasIndex("TaxGroupID");

                    b.ToTable("TaxDefinition","dbo");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CanRingExchangeAdmin.ExchangeCanRingDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanRingID");

                    b.Property<decimal>("ChangeQty");

                    b.Property<decimal>("ChargePrice");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ExchangeCanRingMasterID");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ItemChangeID");

                    b.Property<int>("ItemID");

                    b.Property<string>("Name");

                    b.Property<int>("PriceListID");

                    b.Property<decimal>("Qty");

                    b.Property<int>("UomChangeID");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ExchangeCanRingMasterID");

                    b.ToTable("ExchangeCanRingDetails");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CanRingExchangeAdmin.ExchangeCanRingMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("CusId");

                    b.Property<int>("DocTypeID");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<int>("PaymentMeanID");

                    b.Property<int>("PriceListID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("SysCurrencyID");

                    b.Property<decimal>("Total");

                    b.Property<decimal>("TotalSystem");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("ExchangeCanRingMasters");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CardMembers.CardMember", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpireDateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("ExpireDateTo")
                        .HasColumnType("Date");

                    b.Property<int>("LengthExpireCard");

                    b.Property<string>("Name");

                    b.Property<int>("TypeCardID");

                    b.HasKey("ID");

                    b.ToTable("CardMembers");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CardMembers.CardMemberDeposit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardMemberID");

                    b.Property<int>("CusID");

                    b.Property<int>("DocTypeID");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<decimal>("TotalDeposit");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("CardMemberDeposits");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CardMembers.CardMemberDepositTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("CardMemberDepositID");

                    b.Property<int>("CardMemberID");

                    b.Property<decimal>("CumulativeBalance");

                    b.Property<int>("CusID");

                    b.Property<int>("DocTypeID");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("CardMemberDepositTransactions");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CardMembers.RenewCardHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardID");

                    b.Property<int>("CusID");

                    b.Property<DateTime>("LastDateExpirationFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("LastDateExpirationTo")
                        .HasColumnType("Date");

                    b.Property<int>("LengthExpireCard");

                    b.Property<DateTime>("RenewDateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("RenewDateTo")
                        .HasColumnType("Date");

                    b.HasKey("ID");

                    b.ToTable("RenewCardHistory");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CardMembers.TypeCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("TypeDiscount");

                    b.HasKey("ID");

                    b.ToTable("TypeCards");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ChartOfAccounts.Opex", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("tbOpexs");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.GeneralSettingAdmin.CardMemberTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Option");

                    b.HasKey("ID");

                    b.ToTable("CardMemberTemplate");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.GeneralSettingAdmin.GeneralServiceSetup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("GeneralServiceSetups");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.BPBranch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("BranchCotactPerson");

                    b.Property<int>("BusinessPartnerID");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactTel");

                    b.Property<string>("Email");

                    b.Property<string>("GPSLink");

                    b.Property<string>("Name");

                    b.Property<bool>("SetDefualt");

                    b.Property<string>("Tel");

                    b.HasKey("ID");

                    b.HasIndex("BusinessPartnerID");

                    b.ToTable("BPBranch");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.ContactPerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("BusinessPartnerID");

                    b.Property<string>("ContactID");

                    b.Property<int>("ContryOfBirth");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("MidelName");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("Pager");

                    b.Property<string>("Parssword");

                    b.Property<string>("Position");

                    b.Property<string>("Profession");

                    b.Property<string>("Remark1");

                    b.Property<string>("Remark2");

                    b.Property<bool>("SetAsDefualt");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("BusinessPartnerID");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.ContractBiling", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Activities");

                    b.Property<string>("Amount");

                    b.Property<int>("Attachement");

                    b.Property<int>("BPID");

                    b.Property<int>("BusinessPartnerID");

                    b.Property<int>("ConfrimRenew");

                    b.Property<int>("ContractID");

                    b.Property<string>("ContractNameTemplate");

                    b.Property<string>("ContractType");

                    b.Property<string>("DocumentNo");

                    b.Property<decimal>("EstimateSupportCost");

                    b.Property<string>("FileName");

                    b.Property<DateTime>("NewContractEndDate");

                    b.Property<DateTime>("NewContractStartDate");

                    b.Property<DateTime>("NextOpenRenewalDate");

                    b.Property<string>("NumExpiresOfDay");

                    b.Property<string>("Path");

                    b.Property<int>("Payment");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("Renewalenddate");

                    b.Property<DateTime>("Renewalstartdate");

                    b.Property<int>("SaleID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("Status");

                    b.Property<string>("SubContractTypeTemplate");

                    b.Property<DateTime>("TerminateDate");

                    b.HasKey("ID");

                    b.HasIndex("BusinessPartnerID");

                    b.ToTable("ContractBillingss");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.EmployeeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.GroupCustomer1", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("tbGroup1");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.GroupCustomer2", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<int>("Group1ID");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("tbGroup2");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.SetupContractName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractName");

                    b.HasKey("ID");

                    b.ToTable("SetupContractName");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.SetupCustomerSource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("CustomerSource");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.Channel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("ID");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractType");

                    b.Property<string>("Description");

                    b.Property<decimal>("Duration");

                    b.Property<bool>("Expired");

                    b.Property<bool>("Friday");

                    b.Property<string>("FridayEndTime");

                    b.Property<string>("FridayStartTime");

                    b.Property<bool>("Includeholiday");

                    b.Property<bool>("Labor");

                    b.Property<bool>("Monday");

                    b.Property<string>("MondayEndTime");

                    b.Property<string>("MondayStartTime");

                    b.Property<string>("Name");

                    b.Property<bool>("Parts");

                    b.Property<string>("Remarks");

                    b.Property<int>("ReminderType");

                    b.Property<decimal>("ReminderValue");

                    b.Property<bool>("Renewal");

                    b.Property<int>("ResolutionTimeType");

                    b.Property<decimal>("ResolutionTimeValue");

                    b.Property<int>("ResponseTimeType");

                    b.Property<decimal>("ResponseTimeValue");

                    b.Property<bool>("Saturday");

                    b.Property<string>("SaturdayEndTime");

                    b.Property<string>("SaturdayStartTime");

                    b.Property<bool>("Sunday");

                    b.Property<string>("SundayEndTime");

                    b.Property<string>("SundayStartTime");

                    b.Property<bool>("Thursday");

                    b.Property<string>("ThursdayEndTime");

                    b.Property<string>("ThursdayStartTime");

                    b.Property<bool>("Travel");

                    b.Property<bool>("Tuesday");

                    b.Property<string>("TuesdayEndTime");

                    b.Property<string>("TuesdayStartTime");

                    b.Property<bool>("Wednesday");

                    b.Property<string>("WednesdayEndTime");

                    b.Property<string>("WednesdayStartTime");

                    b.HasKey("ID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.ServiceCall", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPID");

                    b.Property<string>("BPRefNo");

                    b.Property<int>("CallID");

                    b.Property<int>("CallStatus");

                    b.Property<int>("ChannelID");

                    b.Property<DateTime?>("ClosedOnDate");

                    b.Property<string>("ClosedOnTime");

                    b.Property<string>("ContractNo");

                    b.Property<DateTime>("CreatedOnDate");

                    b.Property<string>("CreatedOnTime");

                    b.Property<int>("DocTypeID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("HandledByID");

                    b.Property<int>("ItemGroupID");

                    b.Property<int>("ItemID");

                    b.Property<string>("MfrSerialNo");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int>("Priority");

                    b.Property<string>("Resolution");

                    b.Property<string>("SerialNumber");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Subject");

                    b.Property<int>("TechnicianID");

                    b.HasKey("ID");

                    b.ToTable("ServiceCalls");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.ServiceData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID");

                    b.Property<string>("MfrSerialNo");

                    b.Property<double>("Qty");

                    b.Property<string>("SerialNo");

                    b.Property<int>("ServiceCallID");

                    b.HasKey("ID");

                    b.HasIndex("ServiceCallID");

                    b.ToTable("tbServiceData");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.ServiceItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Acitivity");

                    b.Property<int>("ActivityID");

                    b.Property<string>("ActivityName");

                    b.Property<double>("Completed");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("Finnish");

                    b.Property<int>("HandledByID");

                    b.Property<int>("LinkActivytyID");

                    b.Property<string>("Remark");

                    b.Property<int>("ServiceDataID");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TechnicianID");

                    b.HasKey("ID");

                    b.HasIndex("ServiceDataID");

                    b.ToTable("tbServiceItem");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.KSMS.ServiceSetup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ItemID");

                    b.Property<decimal>("Price");

                    b.Property<int>("PriceListID");

                    b.Property<string>("Remark");

                    b.Property<string>("SetupCode");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ServiceSetups");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.KSMS.ServiceSetupDetial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<int>("CurrencyID");

                    b.Property<decimal>("Factor");

                    b.Property<int>("GUomID");

                    b.Property<int>("ItemID");

                    b.Property<decimal>("Qty");

                    b.Property<int>("ServiceSetupID");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("UomID");

                    b.HasKey("ID");

                    b.HasIndex("ServiceSetupID");

                    b.ToTable("ServiceSetupDetials");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.BuyXGetX.BuyXGetX", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateF")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateT")
                        .HasColumnType("Date");

                    b.Property<string>("Name");

                    b.Property<int>("PriListID");

                    b.HasKey("ID");

                    b.ToTable("BuyXGetX");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.BuyXGetX.BuyXGetXDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyItemID");

                    b.Property<decimal>("BuyQty");

                    b.Property<int>("BuyXGetXID");

                    b.Property<bool>("Delete");

                    b.Property<int>("GetItemID");

                    b.Property<decimal>("GetQty");

                    b.Property<int>("GetUomID");

                    b.Property<int>("ItemUomID");

                    b.Property<string>("LineID");

                    b.Property<string>("Procode");

                    b.HasKey("ID");

                    b.HasIndex("BuyXGetXID");

                    b.ToTable("BuyXGetXDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("LineID");

                    b.Property<int>("PointQty");

                    b.Property<int>("PriceListID");

                    b.Property<string>("RefNo");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("PointCard");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<int>("ItemID");

                    b.Property<string>("LineID");

                    b.Property<int>("PointRedemptID");

                    b.Property<int?>("PointRedemptionID");

                    b.Property<double>("Qty");

                    b.Property<int>("UomID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("PointRedemptionID");

                    b.ToTable("PointItem");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointItemHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<int>("ItemID");

                    b.Property<string>("LineID");

                    b.Property<int>("PointRedemptionHistoryID");

                    b.Property<double>("Qty");

                    b.Property<int>("UomID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("PointRedemptionHistoryID");

                    b.ToTable("PointItemHistory");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<double>("PointQty");

                    b.Property<bool>("Redeemed");

                    b.Property<string>("Title");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("PointRedemption");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemptionHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<double>("PointQty");

                    b.Property<int?>("PointRedemptionMasterID");

                    b.Property<bool>("Redeemed");

                    b.Property<string>("Title");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("PointRedemptionMasterID");

                    b.ToTable("PointRedemptionHistory");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemptionMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("CustomerID");

                    b.Property<bool>("Delete");

                    b.Property<int>("DocTypeID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<DateTime>("PostingDate");

                    b.Property<int>("PriceListID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("PointRedemptionMaster");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.PromoCode.PromoCodeDetail", b =>
                {
                    b.Property<int>("PromoCodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID");

                    b.Property<int>("MaxUse");

                    b.Property<string>("PromoCode");

                    b.Property<int>("Status");

                    b.Property<int>("UseCount");

                    b.HasKey("PromoCodeID");

                    b.ToTable("PromoCodeDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.PromoCode.PromoCodeDiscount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateF")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateT")
                        .HasColumnType("Date");

                    b.Property<string>("Name");

                    b.Property<int>("PriceListID");

                    b.Property<int>("PromoCount");

                    b.Property<int>("PromoType");

                    b.Property<decimal>("PromoValue");

                    b.Property<int>("StringCount");

                    b.Property<string>("TimeF");

                    b.Property<string>("TimeT");

                    b.Property<int>("UseCountCode");

                    b.Property<bool>("Used");

                    b.HasKey("ID");

                    b.ToTable("PromoCodeDiscount");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.CanRing.CanRingDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanRingID");

                    b.Property<int>("CanRingMasterID");

                    b.Property<decimal>("ChangeQty");

                    b.Property<decimal>("ChargePrice");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ItemChangeID");

                    b.Property<int>("ItemID");

                    b.Property<string>("Name");

                    b.Property<int>("PriceListID");

                    b.Property<decimal>("Qty");

                    b.Property<int>("UomChangeID");

                    b.Property<int>("UomID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CanRingMasterID");

                    b.ToTable("CanRingDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.CanRing.CanRingMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<decimal>("Change");

                    b.Property<decimal>("ChangeAlt");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("CusId");

                    b.Property<int>("DocTypeID");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PaymentMeanID");

                    b.Property<int>("PriceListID");

                    b.Property<decimal>("Received");

                    b.Property<decimal>("ReceivedAlt");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("SysCurrencyID");

                    b.Property<decimal>("Total");

                    b.Property<decimal>("TotalAlt");

                    b.Property<decimal>("TotalSystem");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("CanRingMaster");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.KSMS.KSService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CusId");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<double>("MaxCount");

                    b.Property<int>("PriceListID");

                    b.Property<double>("Qty");

                    b.Property<int>("ReceiptDID");

                    b.Property<int>("ReceiptID");

                    b.Property<double>("UsedCount");

                    b.Property<int>("VehicleID");

                    b.HasKey("ID");

                    b.ToTable("KSServices");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.KSMS.KSServiceHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KSServiceID");

                    b.Property<int>("KSServiceMasterID");

                    b.Property<double>("Qty");

                    b.Property<int>("ReceiptDID");

                    b.Property<int>("ReceiptID");

                    b.HasKey("ID");

                    b.ToTable("KSServiceHistories");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.KSMS.KSServiceMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CusId");

                    b.Property<int>("DocTypeID");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<int>("PriceListID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("UserID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("KSServiceMaster");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.LoyaltyProgram.Redeem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<string>("Number");

                    b.Property<int>("OpenShiftID");

                    b.Property<decimal>("RedeemPoint");

                    b.Property<int>("SeriesID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Redeem");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.LoyaltyProgram.RedeemRetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemName");

                    b.Property<decimal>("Qty");

                    b.Property<int>("RID");

                    b.Property<int?>("RedeemID");

                    b.Property<string>("Uom");

                    b.Property<int>("UomID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.HasIndex("RedeemID");

                    b.ToTable("RedeemRetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.MultiPaymentMeans", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltCurrency");

                    b.Property<int>("AltCurrencyID");

                    b.Property<int>("AltRate");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<bool>("Exceed");

                    b.Property<decimal>("LCRate")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("OpenAmount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<string>("PLCurrency");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeanID");

                    b.Property<int>("ReceiptID");

                    b.Property<bool>("ReturnStatus");

                    b.Property<decimal>("SCRate")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(36,18)");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.ToTable("MultiPaymentMean");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.MultipayMeansSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Changed");

                    b.Property<bool>("Check");

                    b.Property<int>("PaymentID");

                    b.Property<int>("SettingID");

                    b.HasKey("ID");

                    b.ToTable("MultipayMeansSetting");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.PendingVoidItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<decimal>("BuyXAmGetXDisRate");

                    b.Property<int>("BuyXAmGetXDisType");

                    b.Property<decimal>("BuyXAmGetXDisValue");

                    b.Property<int>("BuyXAmountGetXDisID");

                    b.Property<bool>("Cancel");

                    b.Property<decimal>("CardMemberDiscountRate");

                    b.Property<decimal>("CardMemberDiscountValue");

                    b.Property<double>("Change");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrandTotal");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<string>("GrandTotalOtherCurrenciesDisplay");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<bool>("IsVoided");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNo");

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PriceListID");

                    b.Property<double>("PromoCodeDiscRate");

                    b.Property<double>("PromoCodeDiscValue");

                    b.Property<int>("PromoCodeID");

                    b.Property<string>("QueueNo");

                    b.Property<string>("Reason");

                    b.Property<string>("ReceiptNo");

                    b.Property<double>("Received");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<int>("TaxGroupID");

                    b.Property<int>("TaxOption");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("PendingVoidItem");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.PendingVoidItemDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("ComboSaleType");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsKsms");

                    b.Property<bool>("IsKsmsMaster");

                    b.Property<bool>("IsReadonly");

                    b.Property<bool>("IsScale");

                    b.Property<bool>("IsVoided");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<int>("Line_ID");

                    b.Property<int>("OrderDetailID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<string>("ParentLineID");

                    b.Property<int>("PendingVoidItemID");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalNet");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<int>("VehicleId");

                    b.HasKey("ID");

                    b.HasIndex("PendingVoidItemID");

                    b.HasIndex("UomID");

                    b.ToTable("PendingVoidItemDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.SettingPayment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Payment");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("SettingID");

                    b.HasKey("ID");

                    b.ToTable("SettingPayment");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.VoidItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<decimal>("BuyXAmGetXDisRate");

                    b.Property<int>("BuyXAmGetXDisType");

                    b.Property<decimal>("BuyXAmGetXDisValue");

                    b.Property<int>("BuyXAmountGetXDisID");

                    b.Property<bool>("Cancel");

                    b.Property<decimal>("CardMemberDiscountRate");

                    b.Property<decimal>("CardMemberDiscountValue");

                    b.Property<double>("Change");

                    b.Property<string>("ChangeCurrenciesDisplay");

                    b.Property<double>("Change_Display");

                    b.Property<string>("CheckBill")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("CompanyID");

                    b.Property<string>("CurrencyDisplay");

                    b.Property<int>("CustomerCount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("Date");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("DisplayRate");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrandTotal");

                    b.Property<string>("GrandTotalCurrenciesDisplay");

                    b.Property<string>("GrandTotalOtherCurrenciesDisplay");

                    b.Property<double>("GrandTotal_Display");

                    b.Property<double>("GrandTotal_Sys");

                    b.Property<bool>("IsVoided");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("LocalSetRate");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNo");

                    b.Property<decimal>("OtherPaymentGrandTotal");

                    b.Property<int>("PLCurrencyID");

                    b.Property<double>("PLRate");

                    b.Property<int>("PaymentMeansID");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PriceListID");

                    b.Property<double>("PromoCodeDiscRate");

                    b.Property<double>("PromoCodeDiscValue");

                    b.Property<int>("PromoCodeID");

                    b.Property<string>("QueueNo");

                    b.Property<string>("Reason");

                    b.Property<string>("ReceiptNo");

                    b.Property<double>("Received");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<double>("Sub_Total");

                    b.Property<int>("SysCurrencyID");

                    b.Property<int>("TableID");

                    b.Property<int>("TaxGroupID");

                    b.Property<int>("TaxOption");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TimeIn");

                    b.Property<string>("TimeOut");

                    b.Property<double>("Tip");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserDiscountID");

                    b.Property<int>("UserOrderID");

                    b.Property<int>("WaiterID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("VoidItem");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.VoidItemDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("ComboSaleType");

                    b.Property<string>("Comment");

                    b.Property<double>("Cost");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<string>("EnglishName");

                    b.Property<bool>("IsKsms");

                    b.Property<bool>("IsKsmsMaster");

                    b.Property<bool>("IsReadonly");

                    b.Property<bool>("IsScale");

                    b.Property<bool>("IsVoided");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemPrintTo");

                    b.Property<string>("ItemStatus");

                    b.Property<string>("ItemType");

                    b.Property<int>("KSServiceSetupId");

                    b.Property<string>("KhmerName");

                    b.Property<string>("LineID");

                    b.Property<int>("Line_ID");

                    b.Property<int>("OrderDetailID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ParentLevel");

                    b.Property<string>("ParentLineID");

                    b.Property<double>("PrintQty");

                    b.Property<double>("Qty");

                    b.Property<int>("RemarkDiscountID");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalNet");

                    b.Property<double>("Total_Sys");

                    b.Property<string>("TypeDis");

                    b.Property<double>("UnitPrice");

                    b.Property<int>("UomID");

                    b.Property<int>("VehicleId");

                    b.Property<int>("VoidItemID");

                    b.HasKey("ID");

                    b.HasIndex("UomID");

                    b.HasIndex("VoidItemID");

                    b.ToTable("VoidItemDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Purchase.DraftAP", b =>
                {
                    b.Property<int>("DraftID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalExpense");

                    b.Property<string>("AdditionalNote");

                    b.Property<double>("AppliedAmount");

                    b.Property<double>("AppliedAmountSys");

                    b.Property<double>("BalanceDue");

                    b.Property<double>("BalanceDueSys");

                    b.Property<int>("BaseOnID");

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("Date");

                    b.Property<int>("DocumentTypeID");

                    b.Property<double>("DownPayment");

                    b.Property<double>("DownPaymentSys");

                    b.Property<string>("DraftName");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FrieghtAmount");

                    b.Property<decimal>("FrieghtAmountSys");

                    b.Property<string>("InvoiceNo");

                    b.Property<int>("LocalCurID");

                    b.Property<double>("LocalSetRate");

                    b.Property<string>("Number");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PurCurrencyID");

                    b.Property<double>("PurRate");

                    b.Property<string>("ReffNo");

                    b.Property<string>("Remark");

                    b.Property<bool>("Remove");

                    b.Property<double>("ReturnAmount");

                    b.Property<int>("SeriesDetailID");

                    b.Property<int>("SeriesID");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<decimal>("SubTotalAfterDis");

                    b.Property<decimal>("SubTotalAfterDisSys");

                    b.Property<double>("SubTotalSys");

                    b.Property<int>("SysCurrencyID");

                    b.Property<double>("TaxRate");

                    b.Property<double>("TaxValue");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UserID");

                    b.Property<int>("VendorID");

                    b.Property<int>("WarehouseID");

                    b.HasKey("DraftID");

                    b.ToTable("DraftAP");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Purchase.DraftAPDetail", b =>
                {
                    b.Property<int>("DraftDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlertStock");

                    b.Property<string>("Check");

                    b.Property<bool>("Delete");

                    b.Property<double>("DiscountRate");

                    b.Property<double>("DiscountValue");

                    b.Property<int>("DraftID");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FinDisRate");

                    b.Property<decimal>("FinDisValue");

                    b.Property<decimal>("FinTotalValue");

                    b.Property<int>("ItemID");

                    b.Property<int>("LocalCurrencyID");

                    b.Property<double>("OpenQty");

                    b.Property<int>("OrderID");

                    b.Property<double>("PurchasPrice");

                    b.Property<double>("Qty");

                    b.Property<string>("Remark");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxOfFinDisValue");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TaxValue");

                    b.Property<double>("Total");

                    b.Property<double>("TotalSys");

                    b.Property<double>("TotalWTax");

                    b.Property<double>("TotalWTaxSys");

                    b.Property<string>("TypeDis");

                    b.Property<int>("UomID");

                    b.HasKey("DraftDetailID");

                    b.HasIndex("DraftID");

                    b.ToTable("DraftAPDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Purchase.FreightPurchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ExpenceAmount");

                    b.Property<decimal>("OpenExpenceAmount");

                    b.Property<int>("PurID");

                    b.Property<int>("PurType");

                    b.Property<decimal>("TaxSumValue");

                    b.HasKey("ID");

                    b.ToTable("FreightPurchase");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Purchase.FreightPurchaseDetial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountWithTax");

                    b.Property<int>("FreightID");

                    b.Property<int>("FreightPurchaseID");

                    b.Property<string>("Name");

                    b.Property<string>("TaxGroup");

                    b.Property<int>("TaxGroupID");

                    b.Property<decimal>("TaxRate");

                    b.Property<decimal>("TotalTaxAmount");

                    b.HasKey("ID");

                    b.HasIndex("FreightPurchaseID");

                    b.ToTable("FreightPurchaseDetial");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.RemarkDiscount.RemarkDiscountItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Remark");

                    b.HasKey("ID");

                    b.ToTable("RemarkDiscounts");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.AttachmentFileOfContractTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentDate");

                    b.Property<int>("ContractTemplateID");

                    b.Property<bool>("Delete");

                    b.Property<string>("FileName");

                    b.Property<string>("TargetPath");

                    b.HasKey("ID");

                    b.HasIndex("ContractTemplateID");

                    b.ToTable("AttachmentFileOfContractTemplate");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.ContractTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContracType");

                    b.Property<string>("Description");

                    b.Property<bool>("Expired");

                    b.Property<string>("Name");

                    b.Property<string>("ResponseTime");

                    b.Property<int>("ResponseTimeDH");

                    b.Property<string>("ResultionTime");

                    b.Property<int>("ResultionTimeDH");

                    b.Property<string>("StarttimeWed");

                    b.HasKey("ID");

                    b.ToTable("ContractTemplate");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.Converage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractTemplateID");

                    b.Property<string>("EndtimeFri");

                    b.Property<string>("EndtimeMon");

                    b.Property<string>("EndtimeSat");

                    b.Property<string>("EndtimeSun");

                    b.Property<string>("EndtimeThu");

                    b.Property<string>("EndtimeThur");

                    b.Property<string>("EndtimeWed");

                    b.Property<bool>("Expired");

                    b.Property<bool>("Friday");

                    b.Property<bool>("Holiday");

                    b.Property<bool>("Labor");

                    b.Property<bool>("Monthday");

                    b.Property<bool>("Part");

                    b.Property<bool>("Saturday");

                    b.Property<string>("StarttimeFri");

                    b.Property<string>("StarttimeMon");

                    b.Property<string>("StarttimeSat");

                    b.Property<string>("StarttimeSun");

                    b.Property<string>("StarttimeThu");

                    b.Property<string>("StarttimeThur");

                    b.Property<string>("StarttimeWed");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thuesday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Travel");

                    b.Property<bool>("Wednesday");

                    b.HasKey("ID");

                    b.HasIndex("ContractTemplateID")
                        .IsUnique();

                    b.ToTable("Converage");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.Remark", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractTemplateID");

                    b.Property<string>("Remarks");

                    b.HasKey("ID");

                    b.HasIndex("ContractTemplateID")
                        .IsUnique();

                    b.ToTable("Remark");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.SetupContractType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractType");

                    b.HasKey("ID");

                    b.ToTable("SetupContractType");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Territory.Territory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level");

                    b.Property<int>("LoationId");

                    b.Property<string>("Name");

                    b.Property<int>("ParentId");

                    b.Property<int>("ParentTerID");

                    b.HasKey("ID");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseQty");

                    b.Property<int>("BpId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("Direction");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemName");

                    b.Property<string>("LineID");

                    b.Property<int>("OrderDetailID");

                    b.Property<decimal>("Qty");

                    b.Property<int>("SaleID");

                    b.Property<decimal>("TotalBatches");

                    b.Property<decimal>("TotalNeeded");

                    b.Property<decimal>("TotalSelected");

                    b.Property<int>("UomID");

                    b.Property<int>("WareId");

                    b.Property<string>("WhsCode");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailID");

                    b.ToTable("TmpBatchNo");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNoSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchNoID");

                    b.Property<decimal>("TotalSelected");

                    b.HasKey("Id");

                    b.HasIndex("BatchNoID")
                        .IsUnique();

                    b.ToTable("TmpBatchNoSelected");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNoSelectedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AvailableQty");

                    b.Property<int>("BPID");

                    b.Property<string>("BatchNo");

                    b.Property<int>("BatchNoSelectedID");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("LineID");

                    b.Property<decimal>("OrigialQty");

                    b.Property<decimal>("SelectedQty");

                    b.Property<decimal>("UnitCost");

                    b.HasKey("Id");

                    b.HasIndex("BatchNoSelectedID");

                    b.ToTable("TmpBatchNoSelectedDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<decimal>("BaseQty");

                    b.Property<int>("BpId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("Direction");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemName");

                    b.Property<string>("LineID");

                    b.Property<decimal>("OpenQty");

                    b.Property<int>("OrderDetailID");

                    b.Property<decimal>("Qty");

                    b.Property<int>("SaleID");

                    b.Property<decimal>("TotalSelected");

                    b.Property<int>("UomID");

                    b.Property<int>("WareId");

                    b.Property<string>("WhsCode");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailID");

                    b.ToTable("TmpSerialNumber");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumberSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SerialNumberID");

                    b.Property<decimal>("TotalSelected");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumberID")
                        .IsUnique();

                    b.ToTable("TmpSerialNumberSelected");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumberSelectedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpireDate");

                    b.Property<int>("ItemID");

                    b.Property<string>("LineID");

                    b.Property<string>("LotNumber");

                    b.Property<string>("MfrSerialNo");

                    b.Property<decimal>("Qty");

                    b.Property<string>("SerialNumber");

                    b.Property<int>("SerialNumberSelectedID");

                    b.Property<decimal>("UnitCost");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumberSelectedID");

                    b.ToTable("TmpSerialNumberSelectedDetail");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.SolutionDataManagement.SolutionDataManagement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID");

                    b.Property<int>("CompanyID");

                    b.Property<int>("ConTactID");

                    b.Property<int>("CusID");

                    b.Property<int>("DocTypeID");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerID");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("Date");

                    b.Property<int>("PriceListID");

                    b.Property<string>("RefNo");

                    b.Property<string>("Remarks");

                    b.Property<int>("SaleCurrencyID");

                    b.Property<int>("SaleEMID");

                    b.Property<int>("SeriesDID");

                    b.Property<int>("SeriesID");

                    b.Property<int>("Status");

                    b.Property<int>("UserID");

                    b.Property<DateTime>("ValidUntilDate")
                        .HasColumnType("Date");

                    b.Property<int>("WarehouseID");

                    b.HasKey("ID");

                    b.ToTable("tbSolutionDataManagement");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.SolutionDataManagement.SolutionDataManagementDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<int>("GUomID");

                    b.Property<double>("InStock");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemID");

                    b.Property<string>("ItemNameEN");

                    b.Property<string>("ItemNameKH");

                    b.Property<double>("Qty");

                    b.Property<string>("Remarks");

                    b.Property<int>("SolutionDataManagementID");

                    b.Property<int>("UomID");

                    b.Property<string>("UomName");

                    b.HasKey("ID");

                    b.HasIndex("SolutionDataManagementID");

                    b.ToTable("tbSolutionDataManagementDetail");
                });

            modelBuilder.Entity("KEDI.Core.System.Models.SystemLicense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiKey");

                    b.Property<string>("Certificate");

                    b.Property<string>("DeviceKey");

                    b.Property<int>("Edition");

                    b.Property<string>("EntryKey");

                    b.Property<long>("Expiration");

                    b.Property<int>("MaximumUsers");

                    b.Property<string>("Name");

                    b.Property<string>("PrivateKey");

                    b.Property<string>("PublicKey");

                    b.Property<int>("Role");

                    b.Property<string>("SecretKey");

                    b.Property<string>("ServerHost");

                    b.Property<string>("Signature");

                    b.Property<string>("TenantHost");

                    b.Property<string>("TenantID")
                        .IsRequired();

                    b.Property<string>("TimeStamp");

                    b.Property<bool>("Unlimited");

                    b.Property<string>("Version");

                    b.HasKey("ID");

                    b.ToTable("SystemLicense");
                });

            modelBuilder.Entity("CKBS.Models.Services.Account.UserAccount", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.General.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("CKBS.Models.Services.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("CKBS.Models.Services.Administrator.General.UserPrivillege")
                        .WithMany("UserAccount")
                        .HasForeignKey("UserID");

                    b.OwnsMany("KEDI.Core.Premise.Users.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<Guid>("ID")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTime>("Created");

                            b1.Property<string>("CreatedByIp");

                            b1.Property<DateTime>("Expires");

                            b1.Property<string>("ReasonRevoked");

                            b1.Property<string>("ReplacedByToken");

                            b1.Property<DateTime?>("Revoked");

                            b1.Property<string>("RevokedByIp");

                            b1.Property<string>("Token");

                            b1.Property<int>("UserID");

                            b1.HasKey("ID");

                            b1.HasIndex("UserID");

                            b1.ToTable("RefreshToken");

                            b1.HasOne("CKBS.Models.Services.Account.UserAccount")
                                .WithMany("RefreshTokens")
                                .HasForeignKey("UserID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.AlertManagement.SetttingAlertUser", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.AlertManagement.SetttingAlert")
                        .WithMany("SetttingAlertUser")
                        .HasForeignKey("SetttingAlertID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.Branch", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.Company", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "LocalCurrency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.PriceList.PriceLists", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "SystemCurrency")
                        .WithMany()
                        .HasForeignKey("SystemCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.ReceiptInformation", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.General.UserPrivillege", b =>
                {
                    b.HasOne("CKBS.Models.Services.Account.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.GroupDUoM", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.GroupUOM", "GroupUOM")
                        .WithMany()
                        .HasForeignKey("GroupUoMID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UoMID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.StockMoving", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.Warehouse", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Inventory.WarehouseSummary", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.SystemInitialization.Series", b =>
                {
                    b.HasOne("CKBS.Models.Services.Financials.JournalEntry")
                        .WithMany("Series")
                        .HasForeignKey("JournalEntryID");
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Tables.GroupTable", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Administrator.Tables.Table", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Tables.GroupTable", "GroupTable")
                        .WithMany()
                        .HasForeignKey("GroupTableID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.AlertWarehouses", b =>
                {
                    b.HasOne("CKBS.Models.Services.AlertManagement.AlertDetail")
                        .WithMany("AlertWarehouses")
                        .HasForeignKey("AlertDetailID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.AlertManagement.SetttingAlert")
                        .WithMany("AlertWarehouses")
                        .HasForeignKey("SetttingAlertID");
                });

            modelBuilder.Entity("CKBS.Models.Services.AlertManagement.UserAlert", b =>
                {
                    b.HasOne("CKBS.Models.Services.AlertManagement.AlertDetail")
                        .WithMany("UserAlerts")
                        .HasForeignKey("AlertDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Appointment.AppointmentService", b =>
                {
                    b.HasOne("CKBS.Models.Services.Appointment.Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.ExchangeRate", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.IncomingPayment", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.IncomingPaymentDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.IncomingPayment")
                        .WithMany("IncomingPaymentDetails")
                        .HasForeignKey("IncomingPaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.OutgoingPayment", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Banking.OutgoingPaymentDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.OutgoingPayment")
                        .WithMany("OutgoingPaymentDetails")
                        .HasForeignKey("OutgoingPaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Financials.ItemAccounting", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup1", "ItemGroup1")
                        .WithMany()
                        .HasForeignKey("ItemGroupID");

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID");
                });

            modelBuilder.Entity("CKBS.Models.Services.Financials.JournalEntryDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Financials.JournalEntry")
                        .WithMany("JournalEntryDetails")
                        .HasForeignKey("JournalEntryID");
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.AutoMobile", b =>
                {
                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner")
                        .WithMany("AutoMobile")
                        .HasForeignKey("BusinessPartnerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.BusinessPartner", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.PriceList.PriceLists", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.InstaillmentDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.HumanResources.Instaillment")
                        .WithMany("InstaillmentDetails")
                        .HasForeignKey("InstaillmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.OrderDetailQAutoMs", b =>
                {
                    b.HasOne("CKBS.Models.Services.HumanResources.OrderQAutoM")
                        .WithMany("OrderDetailQAutoMs")
                        .HasForeignKey("OrderID");

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.HumanResources.OrderQAutoM", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.QuoteAutoM")
                        .WithOne("OrderQAutoM")
                        .HasForeignKey("CKBS.Models.Services.HumanResources.OrderQAutoM", "QuoteAutoMID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.ItemGroup1", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.Category.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackID");

                    b.HasOne("CKBS.Models.Services.Inventory.Category.Colors", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorID");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.ItemGroup2", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.Category.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackID");

                    b.HasOne("CKBS.Models.Services.Inventory.Category.Colors", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorID");

                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup1", "ItemGroup1")
                        .WithMany()
                        .HasForeignKey("ItemG1ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Category.ItemGroup3", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.Category.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackID");

                    b.HasOne("CKBS.Models.Services.Inventory.Category.Colors", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup1", "ItemGroup1")
                        .WithMany()
                        .HasForeignKey("ItemG1ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup2", "ItemGroup2")
                        .WithMany()
                        .HasForeignKey("ItemG2ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.InventoryAudit", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.ItemMasterData", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.GroupUOM", "GroupUOM")
                        .WithMany()
                        .HasForeignKey("GroupUomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasureInv")
                        .WithMany()
                        .HasForeignKey("InventoryUoMID");

                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup1", "ItemGroup1")
                        .WithMany()
                        .HasForeignKey("ItemGroup1ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup2", "ItemGroup2")
                        .WithMany()
                        .HasForeignKey("ItemGroup2ID");

                    b.HasOne("CKBS.Models.Services.Inventory.Category.ItemGroup3", "ItemGroup3")
                        .WithMany()
                        .HasForeignKey("ItemGroup3ID");

                    b.HasOne("CKBS.Models.Services.Inventory.PriceList.PriceLists", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.General.PrinterName", "PrinterName")
                        .WithMany()
                        .HasForeignKey("PrintToID");

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasurePur")
                        .WithMany()
                        .HasForeignKey("PurchaseUomID");

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasureSale")
                        .WithMany()
                        .HasForeignKey("SaleUomID");
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.PriceList.PriceListDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.PriceList.PriceLists", "PriceLists")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.PriceList.PriceLists", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodIssues", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAcount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodIssuesDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currencys")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.Transaction.GoodIssues")
                        .WithMany("GoodIssuesDetails")
                        .HasForeignKey("GoodIssuesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodReceiptDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currencys")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.Transaction.GoodsReceipt")
                        .WithMany("GoodReceiptDetails")
                        .HasForeignKey("GoodsReceiptID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.GoodsReceipt", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAcount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.Transfer", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAcount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserRequestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseFromID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouses")
                        .WithMany()
                        .HasForeignKey("WarehouseToID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Inventory.Transaction.TransferDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currencys")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.Transaction.Transfer")
                        .WithMany("TransferDetails")
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.LoyaltyProgram.ComboSale.SaleComboDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.LoyaltyProgram.ComboSale.SaleCombo")
                        .WithMany("ComboDetails")
                        .HasForeignKey("SaleComboID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.CompetitorDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.OpportunityMasterData")
                        .WithMany("CompetitorDetail")
                        .HasForeignKey("OpportunityMasterDataID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.DescriptionPotentialDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.PotentialDetail")
                        .WithMany("DescriptionPotentialDetail")
                        .HasForeignKey("PotentialDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.DescriptionSummaryDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.SummaryDetail")
                        .WithMany("DescriptionSummaryDetails")
                        .HasForeignKey("SummaryDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.PartnerDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.OpportunityMasterData")
                        .WithMany("PartnerDetail")
                        .HasForeignKey("OpportunityMasterDataID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.PotentialDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.OpportunityMasterData")
                        .WithOne("PotentialDetails")
                        .HasForeignKey("CKBS.Models.Services.Opportunity.PotentialDetail", "OpportunityMasterDataID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.StageDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.OpportunityMasterData")
                        .WithMany("StageDetail")
                        .HasForeignKey("OpportunityMasterDataID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Opportunity.SummaryDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Opportunity.OpportunityMasterData")
                        .WithOne("SummaryDetails")
                        .HasForeignKey("CKBS.Models.Services.Opportunity.SummaryDetail", "OpportunityMasterDataID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Counter", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.PrinterName", "PrinterName")
                        .WithMany()
                        .HasForeignKey("PrinterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.AgingPayment", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.AgingPaymentDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.KVMS.AgingPayment")
                        .WithMany("AgingPaymentDetails")
                        .HasForeignKey("AgingPaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.ReceiptDetailKvms", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.KVMS.ReceiptKvms", "ReceiptKvms")
                        .WithMany()
                        .HasForeignKey("ReceiptKvmsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.KVMS.ReceiptKvms", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.KVMS.KvmsInfo", "KvmsInfo")
                        .WithMany()
                        .HasForeignKey("KvmsInfoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserOrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Order", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("PLCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.OrderDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderID");

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.OrderDetail_Addon", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.Receipt", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("PLCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserOrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.ReceiptDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.Receipt", "Receipt")
                        .WithMany("RececiptDetail")
                        .HasForeignKey("ReceiptID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.VoidOrder", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("PLCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.POS.VoidOrderDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.VoidOrder")
                        .WithMany("VoidOrderDetail")
                        .HasForeignKey("OrderID");

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Production.BOMDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Production.BOMaterial")
                        .WithMany("BOMDetails")
                        .HasForeignKey("BID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.GroupUOM", "GroupUOM")
                        .WithMany()
                        .HasForeignKey("GUomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Production.BOMaterial", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("SysCID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.MemberCard", b =>
                {
                    b.HasOne("CKBS.Models.Services.Promotions.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.PointDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID");

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("CKBS.Models.Services.Promotions.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID");
                });

            modelBuilder.Entity("CKBS.Models.Services.Promotions.PromotionPrice", b =>
                {
                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodReciptPODetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Purchase.GoodsReciptPO")
                        .WithMany("GoodReciptPODetails")
                        .HasForeignKey("GoodsReciptPOID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodsReceiptPoReturn", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodsReceiptPoReturnDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Purchase.GoodsReceiptPoReturn")
                        .WithMany("GoodsReceiptPoReturnDetail")
                        .HasForeignKey("GoodsReceiptPoReturnID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.GoodsReciptPO", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseAPReserve", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseAPReserveDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Purchase.PurchaseAPReserve")
                        .WithMany("PurchaseAPReserveDetails")
                        .HasForeignKey("PurchaseAPReserveID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseCreditMemo", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseCreditMemoDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Purchase.PurchaseCreditMemo")
                        .WithMany("PurchaseCreditMemoDetails")
                        .HasForeignKey("PurchaseCreditMemoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseOrder", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseOrderDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Purchase.PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UniofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseQuotation", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseQuotationDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Purchase.PurchaseQuotation")
                        .WithMany("PurchaseQuotationDetails")
                        .HasForeignKey("PurchaseQuotationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UniofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.PurchaseRequestDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Purchase.PurchaseRequest")
                        .WithMany("PurchaseRequestDetails")
                        .HasForeignKey("PurchaseRequestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.Purchase_AP", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.Purchase.Purchase_APDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("LocalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Purchase.Purchase_AP")
                        .WithMany("PurchaseAPDetails")
                        .HasForeignKey("PurchaseAPID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.Services.ReportSale.RevenueItem", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.General.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Banking.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Inventory.ItemMasterData", "ItemMasterData")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeasure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Account.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemCopyToPriceListDetail", b =>
                {
                    b.HasOne("CKBS.Models.ServicesClass.ItemCopyToPriceList")
                        .WithMany("ItemCopyToPriceListDetail")
                        .HasForeignKey("ItemCopyToPriceListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CKBS.Models.ServicesClass.ItemCopyToWHDetail", b =>
                {
                    b.HasOne("CKBS.Models.ServicesClass.ItemCopyToWH")
                        .WithMany("ItemCopyToWHDetail")
                        .HasForeignKey("ItemCopyToWHID");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ProjectCostAnalysis.FreightProjCostDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.ProjectCostAnalysis.FreightProjectCost")
                        .WithMany("FreightProjCostDetails")
                        .HasForeignKey("FreightProjectCostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ProjectCostAnalysis.ProjCostAnalysisDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.ProjectCostAnalysis.ProjectCostAnalysis")
                        .WithMany("ProjCostAnalysisDetails")
                        .HasForeignKey("ProjectCostAnalysisID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ARDownPaymentDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.ARDownPayment")
                        .WithMany("ARDownPaymentDetails")
                        .HasForeignKey("ARDID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ARReserveInvoiceDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.ARReserveInvoice")
                        .WithMany("ARReserveInvoiceDetails")
                        .HasForeignKey("ARReserveInvoiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.AttchmentFile", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.HumanResources.ContractBiling")
                        .WithMany("AttchmentFiles")
                        .HasForeignKey("ContractBilingID");

                    b.HasOne("KEDI.Core.Premise.Models.Sale.ServiceContract")
                        .WithMany("AttchmentFiles")
                        .HasForeignKey("ServiceContractID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.DraftARDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.DraftAR")
                        .WithMany("DraftAPDetails")
                        .HasForeignKey("DraftID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.FreightSaleDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.FreightSale")
                        .WithMany("FreightSaleDetails")
                        .HasForeignKey("FreightSaleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ReturnDeliveryDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.ReturnDelivery")
                        .WithMany("ReturnDeliveryDetails")
                        .HasForeignKey("ReturnDeliveryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleARDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleAR")
                        .WithMany("SaleARDetails")
                        .HasForeignKey("SARID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleAREditeDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleAREdite")
                        .WithMany("SaleAREditeDetails")
                        .HasForeignKey("SARID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleAREditeHistory")
                        .WithMany("SaleAREditeDetails")
                        .HasForeignKey("SaleAREditeHistoryID");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleCreditMemoDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleCreditMemo")
                        .WithMany("SaleCreditMemoDetails")
                        .HasForeignKey("SCMOID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleDeliveryDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleDelivery")
                        .WithMany("SaleDeliveryDetails")
                        .HasForeignKey("SDID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleOrderDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleOrder")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("SOID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.SaleQuoteDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.SaleQuote")
                        .WithMany("SaleQuoteDetails")
                        .HasForeignKey("SQID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Sale.ServiceContractDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Sale.ServiceContract")
                        .WithMany("ServiceContractDetails")
                        .HasForeignKey("ServiceContractID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Activity.General", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Activity.Activity")
                        .WithOne("General")
                        .HasForeignKey("KEDI.Core.Premise.Models.Services.Activity.General", "ActivityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLAccountDetermination", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLDeterminationMaster")
                        .WithMany("SaleGLAccountDeterminations")
                        .HasForeignKey("SaleGLDeterminationMasterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLAccountDeterminationResources", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLDeterminationMaster")
                        .WithMany("SaleGLAccountDeterminationResources")
                        .HasForeignKey("SaleGLDeterminationMasterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Administrator.SetUp.SaleGLDeterminationMaster", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Administrator.SetUp.AccountMemberCard", "AccountMemberCard")
                        .WithMany()
                        .HasForeignKey("AccountMemberCardID");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Banking.TaxGroupDefinition", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Banking.TaxGroup")
                        .WithMany("TaxGroupDefinitions")
                        .HasForeignKey("TaxGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.CanRingExchangeAdmin.ExchangeCanRingDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.CanRingExchangeAdmin.ExchangeCanRingMaster")
                        .WithMany("ExchangeCanRingDetails")
                        .HasForeignKey("ExchangeCanRingMasterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.BPBranch", b =>
                {
                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner")
                        .WithMany("BPBranches")
                        .HasForeignKey("BusinessPartnerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.ContactPerson", b =>
                {
                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner")
                        .WithMany("ContactPeople")
                        .HasForeignKey("BusinessPartnerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.HumanResources.ContractBiling", b =>
                {
                    b.HasOne("CKBS.Models.Services.HumanResources.BusinessPartner")
                        .WithMany("ContractBilings")
                        .HasForeignKey("BusinessPartnerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.ServiceData", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Inventory.ServiceCall")
                        .WithMany("ServiceDatas")
                        .HasForeignKey("ServiceCallID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Inventory.ServiceItem", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Inventory.ServiceData")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ServiceDataID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.KSMS.ServiceSetupDetial", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.KSMS.ServiceSetup")
                        .WithMany("ServiceSetupDetials")
                        .HasForeignKey("ServiceSetupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.BuyXGetX.BuyXGetXDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.LoyaltyProgram.BuyXGetX.BuyXGetX")
                        .WithMany("BuyXGetXDetails")
                        .HasForeignKey("BuyXGetXID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointItem", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemption")
                        .WithMany("PointItems")
                        .HasForeignKey("PointRedemptionID");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointItemHistory", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemptionHistory")
                        .WithMany("PointItems")
                        .HasForeignKey("PointRedemptionHistoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemptionHistory", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.LoyaltyProgram.MemberPoints.PointRedemptionMaster")
                        .WithMany("PointRedemptions")
                        .HasForeignKey("PointRedemptionMasterID");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.CanRing.CanRingDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.POS.CanRing.CanRingMaster")
                        .WithMany("CanRingDetials")
                        .HasForeignKey("CanRingMasterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.LoyaltyProgram.RedeemRetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.POS.LoyaltyProgram.Redeem")
                        .WithMany("RedeemRetails")
                        .HasForeignKey("RedeemID");
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.PendingVoidItemDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.POS.PendingVoidItem")
                        .WithMany("PendingVoidItemDetails")
                        .HasForeignKey("PendingVoidItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.POS.VoidItemDetail", b =>
                {
                    b.HasOne("CKBS.Models.Services.Administrator.Inventory.UnitofMeasure", "UnitofMeansure")
                        .WithMany()
                        .HasForeignKey("UomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KEDI.Core.Premise.Models.Services.POS.VoidItem")
                        .WithMany("VoidItemDetails")
                        .HasForeignKey("VoidItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Purchase.DraftAPDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Purchase.DraftAP")
                        .WithMany("DraftDetails")
                        .HasForeignKey("DraftID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.Purchase.FreightPurchaseDetial", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.Purchase.FreightPurchase")
                        .WithMany("FreightPurchaseDetials")
                        .HasForeignKey("FreightPurchaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.AttachmentFileOfContractTemplate", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.ContractTemplate")
                        .WithMany("AttachmentFiles")
                        .HasForeignKey("ContractTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.Converage", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.ContractTemplate")
                        .WithOne("Converage")
                        .HasForeignKey("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.Converage", "ContractTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.Remark", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.ContractTemplate")
                        .WithOne("Remark")
                        .HasForeignKey("KEDI.Core.Premise.Models.Services.ServiceContractTemplate.Remark", "ContractTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNo", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.OrderDetail")
                        .WithMany("BatchNos")
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNoSelected", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNo")
                        .WithOne("BatchNoSelected")
                        .HasForeignKey("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNoSelected", "BatchNoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNoSelectedDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.BatchNoSelected")
                        .WithMany("BatchNoSelectedDetails")
                        .HasForeignKey("BatchNoSelectedID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumber", b =>
                {
                    b.HasOne("CKBS.Models.Services.POS.OrderDetail")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumberSelected", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumber")
                        .WithOne("SerialNumberSelected")
                        .HasForeignKey("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumberSelected", "SerialNumberID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumberSelectedDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.ServicesClass.SerialBatches.Sales.SerialNumberSelected")
                        .WithMany("SerialNumberSelectedDetails")
                        .HasForeignKey("SerialNumberSelectedID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KEDI.Core.Premise.Models.SolutionDataManagement.SolutionDataManagementDetail", b =>
                {
                    b.HasOne("KEDI.Core.Premise.Models.SolutionDataManagement.SolutionDataManagement")
                        .WithMany("SolutionDataManagementDetails")
                        .HasForeignKey("SolutionDataManagementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
